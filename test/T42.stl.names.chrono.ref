// File: T42_stl_names_chrono.cpp
#include <T42.stl.names.chrono.hpp> // foo
#include <T42.stl.names.chrono.hpp> // foo_high_res
#include <chrono> // std::chrono::_V2::steady_clock
#include <chrono> // std::chrono::_V2::system_clock
#include <chrono> // std::chrono::duration
#include <chrono> // std::chrono::time_point
#include <ratio> // std::ratio

#include <pybind11/pybind11.h>
#include <functional>
#include <string>

#ifndef BINDER_PYBIND11_TYPE_CASTER
	#define BINDER_PYBIND11_TYPE_CASTER
	PYBIND11_DECLARE_HOLDER_TYPE(T, std::shared_ptr<T>)
	PYBIND11_DECLARE_HOLDER_TYPE(T, T*)
	PYBIND11_MAKE_OPAQUE(std::shared_ptr<void>)
#endif

void bind_T42_stl_names_chrono(std::function< pybind11::module &(std::string const &namespace_) > &M)
{
	// foo(std::chrono::time_point<struct std::chrono::_V2::system_clock, std::chrono::duration<long, struct std::ratio<1, 1000000000> > >) file:T42.stl.names.chrono.hpp line:18
	M("").def("foo", (void (*)(std::chrono::time_point<struct std::chrono::_V2::system_clock, std::chrono::duration<long, struct std::ratio<1, 1000000000> > >)) &foo, "C++: foo(std::chrono::time_point<struct std::chrono::_V2::system_clock, std::chrono::duration<long, struct std::ratio<1, 1000000000> > >) --> void", pybind11::arg(""));

	// foo(std::chrono::time_point<struct std::chrono::_V2::steady_clock, std::chrono::duration<long, struct std::ratio<1, 1000000000> > >) file:T42.stl.names.chrono.hpp line:19
	M("").def("foo", (void (*)(std::chrono::time_point<struct std::chrono::_V2::steady_clock, std::chrono::duration<long, struct std::ratio<1, 1000000000> > >)) &foo, "C++: foo(std::chrono::time_point<struct std::chrono::_V2::steady_clock, std::chrono::duration<long, struct std::ratio<1, 1000000000> > >) --> void", pybind11::arg(""));

	// foo_high_res(std::chrono::time_point<struct std::chrono::_V2::system_clock, std::chrono::duration<long, struct std::ratio<1, 1000000000> > >) file:T42.stl.names.chrono.hpp line:20
	M("").def("foo_high_res", (void (*)(std::chrono::time_point<struct std::chrono::_V2::system_clock, std::chrono::duration<long, struct std::ratio<1, 1000000000> > >)) &foo_high_res, "C++: foo_high_res(std::chrono::time_point<struct std::chrono::_V2::system_clock, std::chrono::duration<long, struct std::ratio<1, 1000000000> > >) --> void", pybind11::arg(""));

	// foo(std::chrono::duration<long, struct std::ratio<10, 1> >) file:T42.stl.names.chrono.hpp line:22
	M("").def("foo", (void (*)(std::chrono::duration<long, struct std::ratio<10, 1> >)) &foo, "C++: foo(std::chrono::duration<long, struct std::ratio<10, 1> >) --> void", pybind11::arg(""));

	// foo(std::chrono::duration<long, struct std::ratio<1, 1000000000> >) file:T42.stl.names.chrono.hpp line:23
	M("").def("foo", (void (*)(std::chrono::duration<long, struct std::ratio<1, 1000000000> >)) &foo, "C++: foo(std::chrono::duration<long, struct std::ratio<1, 1000000000> >) --> void", pybind11::arg(""));

	// foo(std::chrono::duration<long, struct std::ratio<1, 1000000> >) file:T42.stl.names.chrono.hpp line:24
	M("").def("foo", (void (*)(std::chrono::duration<long, struct std::ratio<1, 1000000> >)) &foo, "C++: foo(std::chrono::duration<long, struct std::ratio<1, 1000000> >) --> void", pybind11::arg(""));

	// foo(std::chrono::duration<long, struct std::ratio<1, 1000> >) file:T42.stl.names.chrono.hpp line:25
	M("").def("foo", (void (*)(std::chrono::duration<long, struct std::ratio<1, 1000> >)) &foo, "C++: foo(std::chrono::duration<long, struct std::ratio<1, 1000> >) --> void", pybind11::arg(""));

	// foo(std::chrono::duration<long, struct std::ratio<1, 1> >) file:T42.stl.names.chrono.hpp line:26
	M("").def("foo", (void (*)(std::chrono::duration<long, struct std::ratio<1, 1> >)) &foo, "C++: foo(std::chrono::duration<long, struct std::ratio<1, 1> >) --> void", pybind11::arg(""));

	// foo(std::chrono::duration<long, struct std::ratio<60, 1> >) file:T42.stl.names.chrono.hpp line:27
	M("").def("foo", (void (*)(std::chrono::duration<long, struct std::ratio<60, 1> >)) &foo, "C++: foo(std::chrono::duration<long, struct std::ratio<60, 1> >) --> void", pybind11::arg(""));

	// foo(std::chrono::duration<long, struct std::ratio<3600, 1> >) file:T42.stl.names.chrono.hpp line:28
	M("").def("foo", (void (*)(std::chrono::duration<long, struct std::ratio<3600, 1> >)) &foo, "C++: foo(std::chrono::duration<long, struct std::ratio<3600, 1> >) --> void", pybind11::arg(""));

	// foo(std::chrono::time_point<struct std::chrono::_V2::system_clock, std::chrono::duration<long, struct std::ratio<10, 1> > >) file:T42.stl.names.chrono.hpp line:30
	M("").def("foo", (void (*)(std::chrono::time_point<struct std::chrono::_V2::system_clock, std::chrono::duration<long, struct std::ratio<10, 1> > >)) &foo, "C++: foo(std::chrono::time_point<struct std::chrono::_V2::system_clock, std::chrono::duration<long, struct std::ratio<10, 1> > >) --> void", pybind11::arg(""));

}


#include <map>
#include <memory>
#include <stdexcept>
#include <functional>
#include <string>

#include <pybind11/pybind11.h>

typedef std::function< pybind11::module & (std::string const &) > ModuleGetter;

void bind_T42_stl_names_chrono(std::function< pybind11::module &(std::string const &namespace_) > &M);


PYBIND11_MODULE(T42_stl_names_chrono, root_module) {
	root_module.doc() = "T42_stl_names_chrono module";

	std::map <std::string, pybind11::module> modules;
	ModuleGetter M = [&](std::string const &namespace_) -> pybind11::module & {
		auto it = modules.find(namespace_);
		if( it == modules.end() ) throw std::runtime_error("Attempt to access pybind11::module for namespace " + namespace_ + " before it was created!!!");
		return it->second;
	};

	modules[""] = root_module;

	std::vector< std::pair<std::string, std::string> > sub_modules {
	};
	for(auto &p : sub_modules ) modules[p.first.size() ? p.first+"::"+p.second : p.second] = modules[p.first].def_submodule(p.second.c_str(), ("Bindings for " + p.first + "::" + p.second + " namespace").c_str() );

	//pybind11::class_<std::shared_ptr<void>>(M(""), "_encapsulated_data_");

	bind_T42_stl_names_chrono(M);

}

// Source list file: /home/ghottiger/git/binder-1.2.1/build/test//T42_stl_names_chrono.sources
// T42_stl_names_chrono.cpp
// T42_stl_names_chrono.cpp

// Modules list file: /home/ghottiger/git/binder-1.2.1/build/test//T42_stl_names_chrono.modules
// 
