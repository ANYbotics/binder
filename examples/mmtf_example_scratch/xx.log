clang version 4.0.0 (tags/RELEASE_400/final)
Target: x86_64-unknown-linux-gnu
Thread model: posix
InstalledDir: 
Found candidate GCC installation: /usr/lib/gcc/i686-linux-gnu/8
Found candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/7
Found candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/7.4.0
Found candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/8
Selected GCC installation: /usr/lib/gcc/x86_64-linux-gnu/7.4.0
Candidate multilib: .;@m64
Selected multilib: .;@m64
clang version 4.0.0 (tags/RELEASE_400/final)
Target: x86_64-unknown-linux-gnu
Thread model: posix
InstalledDir: 
Found candidate GCC installation: /usr/lib/gcc/i686-linux-gnu/8
Found candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/7
Found candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/7.4.0
Found candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/8
Selected GCC installation: /usr/lib/gcc/x86_64-linux-gnu/7.4.0
Candidate multilib: .;@m64
Selected multilib: .;@m64
clang Invocation:
 "clang-tool" "-cc1" "-triple" "x86_64-unknown-linux-gnu" "-fsyntax-only" "-disable-free" "-disable-llvm-verifier" "-discard-value-names" "-main-file-name" "all_cmake_includes.hpp" "-mrelocation-model" "static" "-mthread-model" "posix" "-mdisable-fp-elim" "-fmath-errno" "-masm-verbose" "-mconstructor-aliases" "-munwind-tables" "-fuse-init-array" "-target-cpu" "x86-64" "-v" "-dwarf-column-info" "-debugger-tuning=gdb" "-resource-dir" "/home/danpf/git/binder/build/llvm-4.0.0/build_4.0.0.linux.danpf-lappytappy.release/bin/../lib/clang/4.0.0" "-I" "/home/danpf/git/binder/examples/mmtf_example_scratch/mmtf-cpp/include" "-I" "/home/danpf/.local/share/pyenv/versions/3.7.0/include/python3.7m" "-I" "/home/danpf/git/binder/examples/mmtf_example_scratch/msgpack-c/include" "-I" "/home/danpf/git/binder/examples/mmtf_example_scratch/../../build/pybind11/include" "-D" "NDEBUG" "-internal-isystem" "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0" "-internal-isystem" "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/x86_64-linux-gnu/c++/7.4.0" "-internal-isystem" "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/x86_64-linux-gnu/c++/7.4.0" "-internal-isystem" "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/backward" "-internal-isystem" "/usr/local/include" "-internal-isystem" "/home/danpf/git/binder/build/llvm-4.0.0/build_4.0.0.linux.danpf-lappytappy.release/bin/../lib/clang/4.0.0/include" "-internal-externc-isystem" "/usr/include/x86_64-linux-gnu" "-internal-externc-isystem" "/include" "-internal-externc-isystem" "/usr/include" "-std=c++11" "-fdeprecated-macro" "-fdebug-compilation-dir" "/home/danpf/git/binder/examples/mmtf_example_scratch" "-ferror-limit" "19" "-fmessage-length" "0" "-fobjc-runtime=gcc" "-fcxx-exceptions" "-fexceptions" "-fdiagnostics-show-option" "-x" "c++-header" "/home/danpf/git/binder/examples/mmtf_example_scratch/all_cmake_includes.hpp"

clang -cc1 version 4.0.0 based upon LLVM 4.0.0 default target x86_64-unknown-linux-gnu
ignoring nonexistent directory "/include"
ignoring duplicate directory "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/x86_64-linux-gnu/c++/7.4.0"
#include "..." search starts here:
#include <...> search starts here:
 /home/danpf/git/binder/examples/mmtf_example_scratch/mmtf-cpp/include
 /home/danpf/.local/share/pyenv/versions/3.7.0/include/python3.7m
 /home/danpf/git/binder/examples/mmtf_example_scratch/msgpack-c/include
 /home/danpf/git/binder/examples/mmtf_example_scratch/../../build/pybind11/include
 /usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0
 /usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/x86_64-linux-gnu/c++/7.4.0
 /usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/backward
 /usr/local/include
 /home/danpf/git/binder/build/llvm-4.0.0/build_4.0.0.linux.danpf-lappytappy.release/bin/../lib/clang/4.0.0/include
 /usr/include/x86_64-linux-gnu
 /usr/include
End of search list.
In file included from /home/danpf/git/binder/examples/mmtf_example_scratch/all_cmake_includes.hpp:11:
In file included from /home/danpf/git/binder/examples/mmtf_example_scratch/mmtf-cpp/include/mmtf.hpp:15:
In file included from /home/danpf/git/binder/examples/mmtf_example_scratch/mmtf-cpp/include/mmtf/decoder.hpp:16:
In file included from /home/danpf/git/binder/examples/mmtf_example_scratch/mmtf-cpp/include/mmtf/structure_data.hpp:25:
/home/danpf/git/binder/examples/mmtf_example_scratch/msgpack-c/include/msgpack.hpp:10:10: fatal error: 'msgpackmsgpack/object.hpp' file not found
#include <msgpackmsgpack/object.hpp>
         ^~~~~~~~~~~~~~~~~~~~~~~~~~~
binder: std::integral_constant<bool,true>

binder: std::integral_constant<bool,false>

binder: std::integral_constant<unsigned long,0>

binder: std::integral_constant<unsigned long,2>

binder: std::integral_constant<int,0>

binder: std::conditional<true,std::__is_default_constructible_impl<std::allocator<char> >,std::__not_<std::is_void<std::allocator<char> > >>

binder: std::conditional<true,std::__is_nt_default_constructible_impl<std::allocator<char>, false>,std::is_default_constructible<std::allocator<char> >>

binder: std::conditional<false,std::is_function<std::basic_istream<char> *>,std::__or_<std::is_reference<std::basic_istream<char> *>, std::is_void<std::basic_istream<char> *> >>

binder: std::conditional<false,std::is_lvalue_reference<std::basic_istream<char> *>,std::is_rvalue_reference<std::basic_istream<char> *>>

binder: std::conditional<false,std::is_reference<std::basic_istream<char> *>,std::is_void<std::basic_istream<char> *>>

binder: std::conditional<true,std::is_object<std::basic_istream<char> *>,std::is_reference<std::basic_istream<char> *>>

binder: std::conditional<false,std::__and_<std::__is_convertible_to_basic_istream<std::basic_istream<char> &>, std::__is_extractable<std::basic_istream<char> &, char &, void> >,std::__not_<std::is_lvalue_reference<std::basic_istream<char> &> >>

binder: std::conditional<false,std::__and_<std::__is_convertible_to_basic_istream<std::basic_istream<char> &>, std::__is_extractable<std::basic_istream<char> &, unsigned char &, void> >,std::__not_<std::is_lvalue_reference<std::basic_istream<char> &> >>

binder: std::conditional<false,std::__and_<std::__is_convertible_to_basic_istream<std::basic_istream<char> &>, std::__is_extractable<std::basic_istream<char> &, signed char &, void> >,std::__not_<std::is_lvalue_reference<std::basic_istream<char> &> >>

binder: std::conditional<false,std::is_function<std::basic_istream<wchar_t> *>,std::__or_<std::is_reference<std::basic_istream<wchar_t> *>, std::is_void<std::basic_istream<wchar_t> *> >>

binder: std::conditional<false,std::is_lvalue_reference<std::basic_istream<wchar_t> *>,std::is_rvalue_reference<std::basic_istream<wchar_t> *>>

binder: std::conditional<false,std::is_reference<std::basic_istream<wchar_t> *>,std::is_void<std::basic_istream<wchar_t> *>>

binder: std::conditional<true,std::is_object<std::basic_istream<wchar_t> *>,std::is_reference<std::basic_istream<wchar_t> *>>

binder: std::conditional<false,std::__and_<std::__is_convertible_to_basic_istream<std::basic_istream<wchar_t> &>, std::__is_extractable<std::basic_istream<wchar_t> &, wchar_t &, void> >,std::__not_<std::is_lvalue_reference<std::basic_istream<wchar_t> &> >>

binder: std::conditional<true,std::__and_<std::is_move_constructible<_IO_FILE *>, std::is_move_assignable<_IO_FILE *> >,std::__not_<std::__is_tuple_like<_IO_FILE *> >>

binder: std::conditional<false,std::is_function<_IO_FILE *>,std::__or_<std::is_reference<_IO_FILE *>, std::is_void<_IO_FILE *> >>

binder: std::conditional<false,std::is_lvalue_reference<_IO_FILE *>,std::is_rvalue_reference<_IO_FILE *>>

binder: std::conditional<false,std::is_reference<_IO_FILE *>,std::is_void<_IO_FILE *>>

binder: std::conditional<true,std::is_object<_IO_FILE *>,std::is_reference<_IO_FILE *>>

binder: std::conditional<false,std::__is_direct_constructible_ref_cast<_IO_FILE *, _IO_FILE *&&>,std::__is_direct_constructible_new_safe<_IO_FILE *, _IO_FILE *&&>>

binder: std::conditional<false,std::is_void<_IO_FILE *>,std::__or_<std::__is_array_unknown_bounds<_IO_FILE *>, std::is_function<_IO_FILE *> >>

binder: std::conditional<false,std::__not_<std::extent<_IO_FILE *, 0> >,std::is_array<_IO_FILE *>>

binder: std::conditional<false,std::__is_array_unknown_bounds<_IO_FILE *>,std::is_function<_IO_FILE *>>

binder: std::conditional<false,std::is_reference<_IO_FILE *>,std::is_scalar<_IO_FILE *>>

binder: std::conditional<false,std::is_integral<_IO_FILE *>,std::is_floating_point<_IO_FILE *>>

binder: std::conditional<false,std::is_arithmetic<_IO_FILE *>,std::__or_<std::is_enum<_IO_FILE *>, std::is_pointer<_IO_FILE *>, std::is_member_pointer<_IO_FILE *>, std::is_null_pointer<_IO_FILE *> >>

binder: std::conditional<false,std::is_enum<_IO_FILE *>,std::__or_<std::is_pointer<_IO_FILE *>, std::is_member_pointer<_IO_FILE *>, std::is_null_pointer<_IO_FILE *> >>

binder: std::conditional<true,std::is_pointer<_IO_FILE *>,std::__or_<std::is_member_pointer<_IO_FILE *>, std::is_null_pointer<_IO_FILE *> >>

binder: std::conditional<true,std::__is_direct_constructible_impl<_IO_FILE *, _IO_FILE *&&>,std::is_destructible<_IO_FILE *>>

binder: std::conditional<false,std::is_function<_IO_FILE *&&>,std::__or_<std::is_reference<_IO_FILE *&&>, std::is_void<_IO_FILE *&&> >>

binder: std::conditional<false,std::is_lvalue_reference<_IO_FILE *&&>,std::is_rvalue_reference<_IO_FILE *&&>>

binder: std::conditional<true,std::is_reference<_IO_FILE *&&>,std::is_void<_IO_FILE *&&>>

binder: std::conditional<false,std::is_object<_IO_FILE *&&>,std::is_reference<_IO_FILE *&&>>

binder: std::conditional<true,std::is_move_assignable<_IO_FILE *>,std::is_move_constructible<_IO_FILE *>>

binder: std::conditional<false,std::is_function<_IO_FILE *&>,std::__or_<std::is_reference<_IO_FILE *&>, std::is_void<_IO_FILE *&> >>

binder: std::conditional<true,std::is_lvalue_reference<_IO_FILE *&>,std::is_rvalue_reference<_IO_FILE *&>>

binder: std::conditional<true,std::is_reference<_IO_FILE *&>,std::is_void<_IO_FILE *&>>

binder: std::conditional<false,std::is_object<_IO_FILE *&>,std::is_reference<_IO_FILE *&>>

binder: std::conditional<true,std::__is_nt_constructible_impl<_IO_FILE *, _IO_FILE *&&>,std::is_constructible<_IO_FILE *, _IO_FILE *&&>>

binder: std::conditional<true,std::is_nothrow_move_assignable<_IO_FILE *>,std::is_nothrow_move_constructible<_IO_FILE *>>

binder: std::conditional<true,std::__is_nt_assignable_impl<_IO_FILE *&, _IO_FILE *&&>,std::is_assignable<_IO_FILE *&, _IO_FILE *&&>>

binder: std::conditional<true,std::__and_<std::is_move_constructible<bool>, std::is_move_assignable<bool> >,std::__not_<std::__is_tuple_like<bool> >>

binder: std::conditional<false,std::is_function<bool>,std::__or_<std::is_reference<bool>, std::is_void<bool> >>

binder: std::conditional<false,std::is_lvalue_reference<bool>,std::is_rvalue_reference<bool>>

binder: std::conditional<false,std::is_reference<bool>,std::is_void<bool>>

binder: std::conditional<true,std::is_object<bool>,std::is_reference<bool>>

binder: std::conditional<false,std::__is_direct_constructible_ref_cast<bool, bool &&>,std::__is_direct_constructible_new_safe<bool, bool &&>>

binder: std::conditional<false,std::is_void<bool>,std::__or_<std::__is_array_unknown_bounds<bool>, std::is_function<bool> >>

binder: std::conditional<false,std::__not_<std::extent<bool, 0> >,std::is_array<bool>>

binder: std::conditional<false,std::__is_array_unknown_bounds<bool>,std::is_function<bool>>

binder: std::conditional<false,std::is_reference<bool>,std::is_scalar<bool>>

binder: std::conditional<true,std::is_integral<bool>,std::is_floating_point<bool>>

binder: std::conditional<true,std::is_arithmetic<bool>,std::__or_<std::is_enum<bool>, std::is_pointer<bool>, std::is_member_pointer<bool>, std::is_null_pointer<bool> >>

binder: std::conditional<true,std::__is_direct_constructible_impl<bool, bool &&>,std::is_destructible<bool>>

binder: std::conditional<false,std::is_function<bool &&>,std::__or_<std::is_reference<bool &&>, std::is_void<bool &&> >>

binder: std::conditional<false,std::is_lvalue_reference<bool &&>,std::is_rvalue_reference<bool &&>>

binder: std::conditional<true,std::is_reference<bool &&>,std::is_void<bool &&>>

binder: std::conditional<false,std::is_object<bool &&>,std::is_reference<bool &&>>

binder: std::conditional<true,std::is_move_assignable<bool>,std::is_move_constructible<bool>>

binder: std::conditional<false,std::is_function<bool &>,std::__or_<std::is_reference<bool &>, std::is_void<bool &> >>

binder: std::conditional<true,std::is_lvalue_reference<bool &>,std::is_rvalue_reference<bool &>>

binder: std::conditional<true,std::is_reference<bool &>,std::is_void<bool &>>

binder: std::conditional<false,std::is_object<bool &>,std::is_reference<bool &>>

binder: std::conditional<true,std::__is_nt_constructible_impl<bool, bool &&>,std::is_constructible<bool, bool &&>>

binder: std::conditional<true,std::is_nothrow_move_assignable<bool>,std::is_nothrow_move_constructible<bool>>

binder: std::conditional<true,std::__is_nt_assignable_impl<bool &, bool &&>,std::is_assignable<bool &, bool &&>>

binder: std::conditional<false,std::is_function<__mbstate_t>,std::__or_<std::is_reference<__mbstate_t>, std::is_void<__mbstate_t> >>

binder: std::conditional<false,std::is_lvalue_reference<__mbstate_t>,std::is_rvalue_reference<__mbstate_t>>

binder: std::conditional<false,std::is_reference<__mbstate_t>,std::is_void<__mbstate_t>>

binder: std::conditional<true,std::is_object<__mbstate_t>,std::is_reference<__mbstate_t>>

binder: std::conditional<false,std::is_function<__mbstate_t &>,std::__or_<std::is_reference<__mbstate_t &>, std::is_void<__mbstate_t &> >>

binder: std::conditional<true,std::is_lvalue_reference<__mbstate_t &>,std::is_rvalue_reference<__mbstate_t &>>

binder: std::conditional<true,std::is_reference<__mbstate_t &>,std::is_void<__mbstate_t &>>

binder: std::conditional<false,std::is_object<__mbstate_t &>,std::is_reference<__mbstate_t &>>

binder: std::conditional<false,std::is_function<const __mbstate_t &>,std::__or_<std::is_reference<const __mbstate_t &>, std::is_void<const __mbstate_t &> >>

binder: std::conditional<true,std::is_lvalue_reference<const __mbstate_t &>,std::is_rvalue_reference<const __mbstate_t &>>

binder: std::conditional<true,std::is_reference<const __mbstate_t &>,std::is_void<const __mbstate_t &>>

binder: std::conditional<false,std::is_object<const __mbstate_t &>,std::is_reference<const __mbstate_t &>>

binder: std::conditional<true,std::__and_<std::is_copy_constructible<__mbstate_t>, std::is_default_constructible<__mbstate_t> >,std::is_copy_assignable<__mbstate_t>>

binder: std::conditional<false,std::__is_direct_constructible_ref_cast<__mbstate_t, const __mbstate_t &>,std::__is_direct_constructible_new_safe<__mbstate_t, const __mbstate_t &>>

binder: std::conditional<false,std::is_void<__mbstate_t>,std::__or_<std::__is_array_unknown_bounds<__mbstate_t>, std::is_function<__mbstate_t> >>

binder: std::conditional<false,std::__not_<std::extent<__mbstate_t, 0> >,std::is_array<__mbstate_t>>

binder: std::conditional<false,std::__is_array_unknown_bounds<__mbstate_t>,std::is_function<__mbstate_t>>

binder: std::conditional<false,std::is_reference<__mbstate_t>,std::is_scalar<__mbstate_t>>

binder: std::conditional<false,std::is_integral<__mbstate_t>,std::is_floating_point<__mbstate_t>>

binder: std::conditional<false,std::is_arithmetic<__mbstate_t>,std::__or_<std::is_enum<__mbstate_t>, std::is_pointer<__mbstate_t>, std::is_member_pointer<__mbstate_t>, std::is_null_pointer<__mbstate_t> >>

binder: std::conditional<false,std::is_enum<__mbstate_t>,std::__or_<std::is_pointer<__mbstate_t>, std::is_member_pointer<__mbstate_t>, std::is_null_pointer<__mbstate_t> >>

binder: std::conditional<false,std::is_pointer<__mbstate_t>,std::__or_<std::is_member_pointer<__mbstate_t>, std::is_null_pointer<__mbstate_t> >>

binder: std::conditional<false,std::is_member_pointer<__mbstate_t>,std::is_null_pointer<__mbstate_t>>

binder: std::conditional<true,std::__is_direct_constructible_impl<__mbstate_t, const __mbstate_t &>,std::is_destructible<__mbstate_t>>

binder: std::conditional<true,std::is_default_constructible<__mbstate_t>,std::is_copy_constructible<__mbstate_t>>

binder: std::conditional<true,std::__is_default_constructible_impl<__mbstate_t>,std::__not_<std::is_void<__mbstate_t> >>

binder: std::conditional<false,std::is_function<std::_Rb_tree_node_base *>,std::__or_<std::is_reference<std::_Rb_tree_node_base *>, std::is_void<std::_Rb_tree_node_base *> >>

binder: std::conditional<false,std::is_lvalue_reference<std::_Rb_tree_node_base *>,std::is_rvalue_reference<std::_Rb_tree_node_base *>>

binder: std::conditional<false,std::is_reference<std::_Rb_tree_node_base *>,std::is_void<std::_Rb_tree_node_base *>>

binder: std::conditional<true,std::is_object<std::_Rb_tree_node_base *>,std::is_reference<std::_Rb_tree_node_base *>>

binder: std::conditional<false,std::is_function<std::_Rb_tree_node_base *&>,std::__or_<std::is_reference<std::_Rb_tree_node_base *&>, std::is_void<std::_Rb_tree_node_base *&> >>

binder: std::conditional<true,std::is_lvalue_reference<std::_Rb_tree_node_base *&>,std::is_rvalue_reference<std::_Rb_tree_node_base *&>>

binder: std::conditional<true,std::is_reference<std::_Rb_tree_node_base *&>,std::is_void<std::_Rb_tree_node_base *&>>

binder: std::conditional<false,std::is_object<std::_Rb_tree_node_base *&>,std::is_reference<std::_Rb_tree_node_base *&>>

binder: std::conditional<false,std::is_function<std::_Rb_tree_node_base *const &>,std::__or_<std::is_reference<std::_Rb_tree_node_base *const &>, std::is_void<std::_Rb_tree_node_base *const &> >>

binder: std::conditional<true,std::is_lvalue_reference<std::_Rb_tree_node_base *const &>,std::is_rvalue_reference<std::_Rb_tree_node_base *const &>>

binder: std::conditional<true,std::is_reference<std::_Rb_tree_node_base *const &>,std::is_void<std::_Rb_tree_node_base *const &>>

binder: std::conditional<false,std::is_object<std::_Rb_tree_node_base *const &>,std::is_reference<std::_Rb_tree_node_base *const &>>

binder: std::conditional<true,std::is_copy_assignable<std::_Rb_tree_node_base *>,std::is_copy_assignable<std::_Rb_tree_node_base *>>

binder: std::conditional<true,const std::pair<std::_Rb_tree_node_base *, std::_Rb_tree_node_base *> &,const std::__nonesuch_no_braces &>

binder: std::conditional<false,std::is_function<std::_Rb_tree_node_base *&&>,std::__or_<std::is_reference<std::_Rb_tree_node_base *&&>, std::is_void<std::_Rb_tree_node_base *&&> >>

binder: std::conditional<false,std::is_lvalue_reference<std::_Rb_tree_node_base *&&>,std::is_rvalue_reference<std::_Rb_tree_node_base *&&>>

binder: std::conditional<true,std::is_reference<std::_Rb_tree_node_base *&&>,std::is_void<std::_Rb_tree_node_base *&&>>

binder: std::conditional<false,std::is_object<std::_Rb_tree_node_base *&&>,std::is_reference<std::_Rb_tree_node_base *&&>>

binder: std::conditional<true,std::is_move_assignable<std::_Rb_tree_node_base *>,std::is_move_assignable<std::_Rb_tree_node_base *>>

binder: std::conditional<true,std::pair<std::_Rb_tree_node_base *, std::_Rb_tree_node_base *> &&,std::__nonesuch_no_braces &&>

binder: std::conditional<false,std::__is_direct_constructible_ref_cast<std::_Rb_tree_node_base *, std::_Rb_tree_node_base *const &>,std::__is_direct_constructible_new_safe<std::_Rb_tree_node_base *, std::_Rb_tree_node_base *const &>>

binder: std::conditional<false,std::is_void<std::_Rb_tree_node_base *>,std::__or_<std::__is_array_unknown_bounds<std::_Rb_tree_node_base *>, std::is_function<std::_Rb_tree_node_base *> >>

binder: std::conditional<false,std::__not_<std::extent<std::_Rb_tree_node_base *, 0> >,std::is_array<std::_Rb_tree_node_base *>>

binder: std::conditional<false,std::__is_array_unknown_bounds<std::_Rb_tree_node_base *>,std::is_function<std::_Rb_tree_node_base *>>

binder: std::conditional<false,std::is_reference<std::_Rb_tree_node_base *>,std::is_scalar<std::_Rb_tree_node_base *>>

binder: std::conditional<false,std::is_integral<std::_Rb_tree_node_base *>,std::is_floating_point<std::_Rb_tree_node_base *>>

binder: std::conditional<false,std::is_arithmetic<std::_Rb_tree_node_base *>,std::__or_<std::is_enum<std::_Rb_tree_node_base *>, std::is_pointer<std::_Rb_tree_node_base *>, std::is_member_pointer<std::_Rb_tree_node_base *>, std::is_null_pointer<std::_Rb_tree_node_base *> >>

binder: std::conditional<false,std::is_enum<std::_Rb_tree_node_base *>,std::__or_<std::is_pointer<std::_Rb_tree_node_base *>, std::is_member_pointer<std::_Rb_tree_node_base *>, std::is_null_pointer<std::_Rb_tree_node_base *> >>

binder: std::conditional<true,std::is_pointer<std::_Rb_tree_node_base *>,std::__or_<std::is_member_pointer<std::_Rb_tree_node_base *>, std::is_null_pointer<std::_Rb_tree_node_base *> >>

binder: std::conditional<true,std::__is_direct_constructible_impl<std::_Rb_tree_node_base *, std::_Rb_tree_node_base *const &>,std::is_destructible<std::_Rb_tree_node_base *>>

binder: std::conditional<true,std::is_constructible<std::_Rb_tree_node_base *, std::_Rb_tree_node_base *const &>,std::is_constructible<std::_Rb_tree_node_base *, std::_Rb_tree_node_base *const &>>

binder: std::conditional<false,std::is_void<std::_Rb_tree_node_base *const &>,std::__or_<std::is_function<std::_Rb_tree_node_base *>, std::is_array<std::_Rb_tree_node_base *> >>

binder: std::conditional<false,std::is_function<std::_Rb_tree_node_base *>,std::is_array<std::_Rb_tree_node_base *>>

binder: std::conditional<true,std::is_convertible<std::_Rb_tree_node_base *const &, std::_Rb_tree_node_base *>,std::is_convertible<std::_Rb_tree_node_base *const &, std::_Rb_tree_node_base *>>

binder: std::conditional<true,std::__and_<std::is_convertible<int &&, std::_Rb_tree_node_base *>, std::is_convertible<std::_Rb_tree_node_base *const &, std::_Rb_tree_node_base *> >,std::__not_<std::__and_<std::is_convertible<int &&, std::_Rb_tree_node_base *>, std::is_convertible<std::_Rb_tree_node_base *const &, std::_Rb_tree_node_base *> > >>

binder: std::conditional<false,std::__is_direct_constructible_ref_cast<std::_Rb_tree_node_base *, int &&>,std::__is_direct_constructible_new_safe<std::_Rb_tree_node_base *, int &&>>

binder: std::conditional<true,std::__is_direct_constructible_impl<std::_Rb_tree_node_base *, int &&>,std::is_destructible<std::_Rb_tree_node_base *>>

binder: std::conditional<false,std::is_function<int &&>,std::__or_<std::is_reference<int &&>, std::is_void<int &&> >>

binder: std::conditional<false,std::is_lvalue_reference<int &&>,std::is_rvalue_reference<int &&>>

binder: std::conditional<true,std::is_reference<int &&>,std::is_void<int &&>>

binder: std::conditional<false,std::is_object<int &&>,std::is_reference<int &&>>

binder: std::conditional<false,std::__and_<std::is_constructible<std::_Rb_tree_node_base *, std::_Rb_tree_node_base *const &&>, std::__and_<std::is_convertible<int &&, std::_Rb_tree_node_base *>, std::is_convertible<std::_Rb_tree_node_base *const &, std::_Rb_tree_node_base *> > >,std::is_constructible<std::_Rb_tree_node_base *, int &&>>

binder: std::conditional<false,std::__and_<std::is_convertible<int &&, std::_Rb_tree_node_base *>, std::is_convertible<std::_Rb_tree_node_base *const &, std::_Rb_tree_node_base *> >,std::__not_<std::__and_<std::is_convertible<int &&, std::_Rb_tree_node_base *>, std::is_convertible<std::_Rb_tree_node_base *const &, std::_Rb_tree_node_base *> > >>

binder: std::conditional<false,std::__and_<std::is_constructible<std::_Rb_tree_node_base *, std::_Rb_tree_node_base *const &&>, std::__not_<std::__and_<std::is_convertible<int &&, std::_Rb_tree_node_base *>, std::is_convertible<std::_Rb_tree_node_base *const &, std::_Rb_tree_node_base *> > > >,std::is_constructible<std::_Rb_tree_node_base *, int &&>>

binder: std::conditional<true,std::__and_<std::is_convertible<std::_Rb_tree_node_base *const &, std::_Rb_tree_node_base *>, std::is_convertible<int &&, std::_Rb_tree_node_base *> >,std::__not_<std::__and_<std::is_convertible<std::_Rb_tree_node_base *const &, std::_Rb_tree_node_base *>, std::is_convertible<int &&, std::_Rb_tree_node_base *> > >>

binder: std::conditional<true,std::__and_<std::is_constructible<std::_Rb_tree_node_base *, int &&>, std::__and_<std::is_convertible<std::_Rb_tree_node_base *const &, std::_Rb_tree_node_base *>, std::is_convertible<int &&, std::_Rb_tree_node_base *> > >,std::is_constructible<std::_Rb_tree_node_base *, std::_Rb_tree_node_base *const &>>

binder: std::conditional<false,std::__and_<std::is_convertible<std::_Rb_tree_node_base *const &, std::_Rb_tree_node_base *>, std::is_convertible<int &&, std::_Rb_tree_node_base *> >,std::is_constructible<std::_Rb_tree_node_base *, int &&>>

binder: std::conditional<false,std::__and_<std::is_convertible<std::_Rb_tree_node_base *const &, std::_Rb_tree_node_base *>, std::is_convertible<int &&, std::_Rb_tree_node_base *> >,std::__not_<std::__and_<std::is_convertible<std::_Rb_tree_node_base *const &, std::_Rb_tree_node_base *>, std::is_convertible<int &&, std::_Rb_tree_node_base *> > >>

binder: std::conditional<true,std::__and_<std::is_constructible<std::_Rb_tree_node_base *, int &&>, std::__not_<std::__and_<std::is_convertible<std::_Rb_tree_node_base *const &, std::_Rb_tree_node_base *>, std::is_convertible<int &&, std::_Rb_tree_node_base *> > > >,std::is_constructible<std::_Rb_tree_node_base *, std::_Rb_tree_node_base *const &>>

binder: std::conditional<false,std::__not_<std::__and_<std::is_convertible<std::_Rb_tree_node_base *const &, std::_Rb_tree_node_base *>, std::is_convertible<int &&, std::_Rb_tree_node_base *> > >,std::is_constructible<std::_Rb_tree_node_base *, int &&>>

binder: std::conditional<false,std::is_constructible<std::_Rb_tree_node_base *, int &&>,std::is_constructible<std::_Rb_tree_node_base *, int &&>>

binder: std::conditional<false,std::is_void<int &&>,std::__or_<std::is_function<std::_Rb_tree_node_base *>, std::is_array<std::_Rb_tree_node_base *> >>

binder: std::conditional<false,std::is_convertible<int &&, std::_Rb_tree_node_base *>,std::is_convertible<int &&, std::_Rb_tree_node_base *>>

binder: std::remove_cv<std::allocator<char>>

binder: std::remove_cv<std::basic_istream<char> *>

binder: std::remove_cv<std::basic_istream<char> &>

binder: std::remove_cv<std::basic_istream<wchar_t> *>

binder: std::remove_cv<std::basic_istream<wchar_t> &>

binder: std::remove_cv<_IO_FILE *>

binder: std::remove_cv<bool>

binder: std::remove_cv<__mbstate_t>

binder: std::remove_cv<std::_Rb_tree_node_base *>

binder: std::remove_cv<std::_Rb_tree_node_base *const &>

binder: std::remove_cv<int &&>

binder: std::is_void<std::allocator<char>>

binder: std::is_void<std::basic_istream<char> *>

binder: std::is_void<std::basic_istream<char> &>

binder: std::is_void<std::basic_istream<wchar_t> *>

binder: std::is_void<std::basic_istream<wchar_t> &>

binder: std::is_void<_IO_FILE *>

binder: std::is_void<bool>

binder: std::is_void<__mbstate_t>

binder: std::is_void<std::_Rb_tree_node_base *>

binder: std::is_void<std::_Rb_tree_node_base *const &>

binder: std::is_void<int &&>

binder: std::is_integral<_IO_FILE *>

binder: std::is_integral<bool>

binder: std::is_integral<__mbstate_t>

binder: std::is_integral<std::_Rb_tree_node_base *>

binder: std::is_floating_point<_IO_FILE *>

binder: std::is_floating_point<__mbstate_t>

binder: std::is_floating_point<std::_Rb_tree_node_base *>

binder: std::is_array<std::allocator<char>>

binder: std::is_array<_IO_FILE *>

binder: std::is_array<bool>

binder: std::is_array<__mbstate_t>

binder: std::is_array<std::_Rb_tree_node_base *>

binder: std::is_pointer<_IO_FILE *>

binder: std::is_pointer<__mbstate_t>

binder: std::is_pointer<std::_Rb_tree_node_base *>

binder: std::is_lvalue_reference<std::basic_istream<char> &>

binder: std::is_lvalue_reference<std::basic_istream<char> *>

binder: std::is_lvalue_reference<std::basic_istream<wchar_t> &>

binder: std::is_lvalue_reference<std::basic_istream<wchar_t> *>

binder: std::is_lvalue_reference<_IO_FILE *>

binder: std::is_lvalue_reference<_IO_FILE *&&>

binder: std::is_lvalue_reference<_IO_FILE *&>

binder: std::is_lvalue_reference<bool>

binder: std::is_lvalue_reference<bool &&>

binder: std::is_lvalue_reference<bool &>

binder: std::is_lvalue_reference<__mbstate_t>

binder: std::is_lvalue_reference<__mbstate_t &>

binder: std::is_lvalue_reference<const __mbstate_t &>

binder: std::is_lvalue_reference<std::_Rb_tree_node_base *>

binder: std::is_lvalue_reference<std::_Rb_tree_node_base *&>

binder: std::is_lvalue_reference<std::_Rb_tree_node_base *const &>

binder: std::is_lvalue_reference<std::_Rb_tree_node_base *&&>

binder: std::is_lvalue_reference<int &&>

binder: std::is_rvalue_reference<std::basic_istream<char> *>

binder: std::is_rvalue_reference<std::basic_istream<wchar_t> *>

binder: std::is_rvalue_reference<_IO_FILE *>

binder: std::is_rvalue_reference<_IO_FILE *&&>

binder: std::is_rvalue_reference<bool>

binder: std::is_rvalue_reference<bool &&>

binder: std::is_rvalue_reference<__mbstate_t>

binder: std::is_rvalue_reference<std::_Rb_tree_node_base *>

binder: std::is_rvalue_reference<std::_Rb_tree_node_base *&&>

binder: std::is_rvalue_reference<int &&>

binder: std::is_function<std::basic_istream<char> *>

binder: std::is_function<std::basic_istream<wchar_t> *>

binder: std::is_function<_IO_FILE *>

binder: std::is_function<_IO_FILE *&&>

binder: std::is_function<_IO_FILE *&>

binder: std::is_function<bool>

binder: std::is_function<bool &&>

binder: std::is_function<bool &>

binder: std::is_function<__mbstate_t>

binder: std::is_function<__mbstate_t &>

binder: std::is_function<const __mbstate_t &>

binder: std::is_function<std::_Rb_tree_node_base *>

binder: std::is_function<std::_Rb_tree_node_base *&>

binder: std::is_function<std::_Rb_tree_node_base *const &>

binder: std::is_function<std::_Rb_tree_node_base *&&>

binder: std::is_function<int &&>

binder: std::is_enum<_IO_FILE *>

binder: std::is_enum<__mbstate_t>

binder: std::is_enum<std::_Rb_tree_node_base *>

binder: std::is_null_pointer<__mbstate_t>

binder: std::is_reference<std::basic_istream<char> *>

binder: std::is_reference<std::basic_istream<wchar_t> *>

binder: std::is_reference<_IO_FILE *>

binder: std::is_reference<_IO_FILE *&&>

binder: std::is_reference<_IO_FILE *&>

binder: std::is_reference<bool>

binder: std::is_reference<bool &&>

binder: std::is_reference<bool &>

binder: std::is_reference<__mbstate_t>

binder: std::is_reference<__mbstate_t &>

binder: std::is_reference<const __mbstate_t &>

binder: std::is_reference<std::_Rb_tree_node_base *>

binder: std::is_reference<std::_Rb_tree_node_base *&>

binder: std::is_reference<std::_Rb_tree_node_base *const &>

binder: std::is_reference<std::_Rb_tree_node_base *&&>

binder: std::is_reference<int &&>

binder: std::is_arithmetic<_IO_FILE *>

binder: std::is_arithmetic<bool>

binder: std::is_arithmetic<__mbstate_t>

binder: std::is_arithmetic<std::_Rb_tree_node_base *>

binder: std::is_object<std::basic_istream<char> *>

binder: std::is_object<std::basic_istream<wchar_t> *>

binder: std::is_object<_IO_FILE *>

binder: std::is_object<_IO_FILE *&&>

binder: std::is_object<_IO_FILE *&>

binder: std::is_object<bool>

binder: std::is_object<bool &&>

binder: std::is_object<bool &>

binder: std::is_object<__mbstate_t>

binder: std::is_object<__mbstate_t &>

binder: std::is_object<const __mbstate_t &>

binder: std::is_object<std::_Rb_tree_node_base *>

binder: std::is_object<std::_Rb_tree_node_base *&>

binder: std::is_object<std::_Rb_tree_node_base *const &>

binder: std::is_object<std::_Rb_tree_node_base *&&>

binder: std::is_object<int &&>

binder: std::is_member_pointer<__mbstate_t>

binder: std::is_scalar<_IO_FILE *>

binder: std::is_scalar<bool>

binder: std::is_scalar<__mbstate_t>

binder: std::is_scalar<std::_Rb_tree_node_base *>

binder: std::add_rvalue_reference<std::basic_istream<char> *>

binder: std::add_rvalue_reference<std::basic_istream<wchar_t> *>

binder: std::add_rvalue_reference<_IO_FILE *&&>

binder: std::add_rvalue_reference<_IO_FILE *&>

binder: std::add_rvalue_reference<bool &&>

binder: std::add_rvalue_reference<bool &>

binder: std::add_rvalue_reference<__mbstate_t &>

binder: std::add_rvalue_reference<const __mbstate_t &>

binder: std::add_rvalue_reference<std::_Rb_tree_node_base *&>

binder: std::add_rvalue_reference<std::_Rb_tree_node_base *const &>

binder: std::add_rvalue_reference<std::_Rb_tree_node_base *&&>

binder: std::add_rvalue_reference<int &&>

binder: struct _IO_FILE *& std::declval<_IO_FILE *&>()

binder: bool & std::declval<bool &>()

binder: __mbstate_t & std::declval<__mbstate_t &>()

binder: const __mbstate_t & std::declval<const __mbstate_t &>()

binder: struct std::_Rb_tree_node_base *& std::declval<std::_Rb_tree_node_base *&>()

binder: struct std::_Rb_tree_node_base *const & std::declval<std::_Rb_tree_node_base *const &>()

binder: std::remove_all_extents<__mbstate_t>

binder: std::is_destructible<_IO_FILE *>

binder: std::is_destructible<bool>

binder: std::is_destructible<__mbstate_t>

binder: std::is_destructible<std::_Rb_tree_node_base *>

binder: std::is_default_constructible<std::allocator<char>>

binder: std::is_default_constructible<__mbstate_t>

binder: std::is_same<std::fpos<__mbstate_t>,std::fpos<__mbstate_t>>

binder: std::is_same<std::_Rb_tree_node_base *,std::_Rb_tree_node_base *>

binder: std::remove_reference<std::basic_istream<char> &>

binder: std::remove_reference<std::basic_istream<wchar_t> &>

binder: std::remove_reference<_IO_FILE *>

binder: std::remove_reference<bool>

binder: std::is_constructible<_IO_FILE *,<_IO_FILE *&&>>

binder: std::is_constructible<bool,<bool &&>>

binder: std::is_constructible<__mbstate_t,<const __mbstate_t &>>

binder: std::is_constructible<std::_Rb_tree_node_base *,<std::_Rb_tree_node_base *const &>>

binder: std::is_constructible<std::_Rb_tree_node_base *,<int &&>>

binder: std::is_copy_constructible<__mbstate_t>

binder: std::is_move_constructible<_IO_FILE *>

binder: std::is_move_constructible<bool>

binder: std::is_nothrow_default_constructible<std::allocator<char>>

binder: std::is_nothrow_constructible<_IO_FILE *,<_IO_FILE *&&>>

binder: std::is_nothrow_constructible<bool,<bool &&>>

binder: std::is_nothrow_move_constructible<_IO_FILE *>

binder: std::is_nothrow_move_constructible<bool>

binder: std::is_assignable<_IO_FILE *&,_IO_FILE *&&>

binder: std::is_assignable<bool &,bool &&>

binder: std::is_assignable<__mbstate_t &,const __mbstate_t &>

binder: std::is_assignable<std::_Rb_tree_node_base *&,std::_Rb_tree_node_base *const &>

binder: std::is_assignable<std::_Rb_tree_node_base *&,std::_Rb_tree_node_base *&&>

binder: std::is_copy_assignable<__mbstate_t>

binder: std::is_copy_assignable<std::_Rb_tree_node_base *>

binder: std::is_move_assignable<_IO_FILE *>

binder: std::is_move_assignable<bool>

binder: std::is_move_assignable<std::_Rb_tree_node_base *>

binder: std::is_nothrow_assignable<_IO_FILE *&,_IO_FILE *&&>

binder: std::is_nothrow_assignable<bool &,bool &&>

binder: std::is_nothrow_move_assignable<_IO_FILE *>

binder: std::is_nothrow_move_assignable<bool>

binder: std::is_convertible<std::_Rb_tree_node_base *const &,std::_Rb_tree_node_base *>

binder: std::is_convertible<int &&,std::_Rb_tree_node_base *>

binder: std::remove_const<std::allocator<char>>

binder: std::remove_const<std::basic_istream<char> *>

binder: std::remove_const<std::basic_istream<char> &>

binder: std::remove_const<std::basic_istream<wchar_t> *>

binder: std::remove_const<std::basic_istream<wchar_t> &>

binder: std::remove_const<_IO_FILE *>

binder: std::remove_const<bool>

binder: std::remove_const<__mbstate_t>

binder: std::remove_const<std::_Rb_tree_node_base *>

binder: std::remove_const<std::_Rb_tree_node_base *const &>

binder: std::remove_const<int &&>

binder: std::remove_volatile<std::allocator<char>>

binder: std::remove_volatile<std::basic_istream<char> *>

binder: std::remove_volatile<std::basic_istream<char> &>

binder: std::remove_volatile<std::basic_istream<wchar_t> *>

binder: std::remove_volatile<std::basic_istream<wchar_t> &>

binder: std::remove_volatile<_IO_FILE *>

binder: std::remove_volatile<bool>

binder: std::remove_volatile<__mbstate_t>

binder: std::remove_volatile<std::_Rb_tree_node_base *>

binder: std::remove_volatile<std::_Rb_tree_node_base *const &>

binder: std::remove_volatile<int &&>

binder: std::enable_if<false,void>

binder: std::enable_if<false,std::error_code &>

binder: std::enable_if<true,void>

binder: std::enable_if<false,std::basic_istream<char> &>

binder: std::enable_if<false,std::basic_istream<wchar_t> &>

binder: std::enable_if<false,bool>

binder: std::enable_if<true,bool>

binder: void std::swap<_IO_FILE *>(struct _IO_FILE *&, struct _IO_FILE *&)

binder: void std::swap<bool>(bool &, bool &)

binder: std::piecewise_construct_t

binder: std::pair<std::_Rb_tree_node_base *,std::_Rb_tree_node_base *>

binder: std::pair<bool,unsigned long>

binder: std::pair<int,bool>

binder: std::pair<int,int>

binder: std::pair<pybind11::handle,pybind11::handle>

binder: std::pair<const _object *,const char *>

binder: std::pair<const std::type_info *,void *(*)(void *)>

binder: std::pair<const void *,const pybind11::detail::type_info *>

binder: std::tuple_size<std::tuple<>>

binder: __gnu_cxx::__enable_if<true,std::string>

binder: __gnu_cxx::__enable_if<false,std::string>

binder: __gnu_cxx::__conditional_type<true,__gnu_cxx::__numeric_traits_integer<long>,__gnu_cxx::__numeric_traits_floating<long>>

binder: __gnu_cxx::__conditional_type<true,__gnu_cxx::__numeric_traits_integer<int>,__gnu_cxx::__numeric_traits_floating<int>>

binder: __gnu_cxx::__conditional_type<false,__gnu_cxx::__numeric_traits_integer<float>,__gnu_cxx::__numeric_traits_floating<float>>

binder: __gnu_cxx::__conditional_type<false,__gnu_cxx::__numeric_traits_integer<double>,__gnu_cxx::__numeric_traits_floating<double>>

binder: __gnu_cxx::__conditional_type<false,__gnu_cxx::__numeric_traits_integer<long double>,__gnu_cxx::__numeric_traits_floating<long double>>

binder: __gnu_cxx::__conditional_type<true,__gnu_cxx::__numeric_traits_integer<unsigned long>,__gnu_cxx::__numeric_traits_floating<unsigned long>>

binder: __gnu_cxx::__conditional_type<true,__gnu_cxx::__numeric_traits_integer<char>,__gnu_cxx::__numeric_traits_floating<char>>

binder: __gnu_cxx::__conditional_type<true,unsigned long,unsigned long long>

binder: __gnu_cxx::__conditional_type<true,__gnu_cxx::__numeric_traits_integer<short>,__gnu_cxx::__numeric_traits_floating<short>>

binder: __gnu_cxx::__add_unsigned<char>

binder: __gnu_cxx::__add_unsigned<signed char>

binder: __gnu_cxx::__add_unsigned<short>

binder: __gnu_cxx::__add_unsigned<int>

binder: __gnu_cxx::__add_unsigned<long>

binder: __gnu_cxx::__add_unsigned<long long>

binder: __gnu_cxx::__remove_unsigned<char>

binder: __gnu_cxx::__remove_unsigned<unsigned char>

binder: __gnu_cxx::__remove_unsigned<unsigned short>

binder: __gnu_cxx::__remove_unsigned<unsigned int>

binder: __gnu_cxx::__remove_unsigned<unsigned long>

binder: __gnu_cxx::__remove_unsigned<unsigned long long>

binder: bool __gnu_cxx::__is_null_pointer(std::nullptr_t)

binder: __gnu_cxx::__promote<long double,false>

binder: __gnu_cxx::__promote<double,false>

binder: __gnu_cxx::__promote<float,false>

binder: __gnu_cxx::__numeric_traits_integer<long>

binder: __gnu_cxx::__numeric_traits_integer<int>

binder: __gnu_cxx::__numeric_traits_integer<unsigned long>

binder: __gnu_cxx::__numeric_traits_integer<char>

binder: __gnu_cxx::__numeric_traits_integer<short>

binder: __gnu_cxx::__numeric_traits_floating<float>

binder: __gnu_cxx::__numeric_traits_floating<double>

binder: __gnu_cxx::__numeric_traits_floating<long double>

binder: __gnu_cxx::__numeric_traits<long>

binder: __gnu_cxx::__numeric_traits<int>

binder: __gnu_cxx::__numeric_traits<float>

binder: __gnu_cxx::__numeric_traits<double>

binder: __gnu_cxx::__numeric_traits<long double>

binder: __gnu_cxx::__numeric_traits<unsigned long>

binder: __gnu_cxx::__numeric_traits<char>

binder: __gnu_cxx::__numeric_traits<short>

binder: std::input_iterator_tag

binder: std::output_iterator_tag

binder: std::forward_iterator_tag

binder: std::bidirectional_iterator_tag

binder: std::random_access_iterator_tag

binder: std::iterator<std::output_iterator_tag,void,void,void,void>

binder: std::iterator<std::random_access_iterator_tag,bool,long,bool *,bool &>

binder: std::iterator<std::random_access_iterator_tag,bool,long,std::_Bit_reference *,std::_Bit_reference>

binder: std::iterator<std::random_access_iterator_tag,bool,long,const bool *,bool>

binder: std::iterator_traits<char *>

binder: std::iterator_traits<const char *>

binder: std::iterator_traits<std::_Bit_iterator>

binder: std::iterator_traits<std::_Bit_const_iterator>

binder: std::reverse_iterator<std::_Bit_const_iterator>

binder: std::reverse_iterator<std::_Bit_iterator>

binder: __gnu_cxx::__normal_iterator<char *,std::string>

binder: __gnu_cxx::__normal_iterator<const char *,std::string>

binder: __gnu_cxx::__normal_iterator<wchar_t *,std::basic_string<wchar_t>>

binder: __gnu_cxx::__normal_iterator<const wchar_t *,std::basic_string<wchar_t>>

binder: __gnu_cxx::__normal_iterator<char16_t *,std::basic_string<char16_t, std::char_traits<char16_t>, std::allocator<char16_t> >>

binder: __gnu_cxx::__normal_iterator<const char16_t *,std::basic_string<char16_t, std::char_traits<char16_t>, std::allocator<char16_t> >>

binder: __gnu_cxx::__normal_iterator<char32_t *,std::basic_string<char32_t, std::char_traits<char32_t>, std::allocator<char32_t> >>

binder: __gnu_cxx::__normal_iterator<const char32_t *,std::basic_string<char32_t, std::char_traits<char32_t>, std::allocator<char32_t> >>

binder: __gnu_cxx::__ops::_Iter_less_iter

binder: struct __gnu_cxx::__ops::_Iter_less_iter __gnu_cxx::__ops::__iter_less_iter()

binder: __gnu_cxx::__ops::_Iter_less_val

binder: struct __gnu_cxx::__ops::_Iter_less_val __gnu_cxx::__ops::__iter_less_val()

binder: struct __gnu_cxx::__ops::_Iter_less_val __gnu_cxx::__ops::__iter_comp_val(struct __gnu_cxx::__ops::_Iter_less_iter)

binder: __gnu_cxx::__ops::_Val_less_iter

binder: struct __gnu_cxx::__ops::_Val_less_iter __gnu_cxx::__ops::__val_less_iter()

binder: struct __gnu_cxx::__ops::_Val_less_iter __gnu_cxx::__ops::__val_comp_iter(struct __gnu_cxx::__ops::_Iter_less_iter)

binder: __gnu_cxx::__ops::_Iter_equal_to_iter

binder: struct __gnu_cxx::__ops::_Iter_equal_to_iter __gnu_cxx::__ops::__iter_equal_to_iter()

binder: __gnu_cxx::__ops::_Iter_equal_to_val

binder: struct __gnu_cxx::__ops::_Iter_equal_to_val __gnu_cxx::__ops::__iter_equal_to_val()

binder: struct __gnu_cxx::__ops::_Iter_equal_to_val __gnu_cxx::__ops::__iter_comp_val(struct __gnu_cxx::__ops::_Iter_equal_to_iter)

binder: const unsigned long & std::min<unsigned long>(const unsigned long &, const unsigned long &)

binder: const long & std::min<long>(const long &, const long &)

binder: unsigned long * std::copy<unsigned long *,unsigned long *>(unsigned long *, unsigned long *, unsigned long *)

binder: void std::fill<unsigned long *,int>(unsigned long *, unsigned long *, const int &)

binder: (anonymous)

binder: unsigned long __ctype_get_mb_cur_max()

binder: double atof(const char *)

binder: int atoi(const char *)

binder: long atol(const char *)

binder: long long atoll(const char *)

binder: int strfromd(char *, unsigned long, const char *, double)

binder: int strfromf(char *, unsigned long, const char *, float)

binder: int strfroml(char *, unsigned long, const char *, long double)

binder: int strfromf32(char *, unsigned long, const char *, float)

binder: int strfromf64(char *, unsigned long, const char *, double)

binder: int strfromf32x(char *, unsigned long, const char *, double)

binder: int strfromf64x(char *, unsigned long, const char *, long double)

binder: __locale_struct

binder: char * l64a(long)

binder: long a64l(const char *)

binder: unsigned short __uint16_identity(unsigned short)

binder: unsigned int __uint32_identity(unsigned int)

binder: unsigned long __uint64_identity(unsigned long)

binder: timeval

binder: timespec

binder: unsigned int gnu_dev_major(unsigned long)

binder: unsigned int gnu_dev_minor(unsigned long)

binder: unsigned long gnu_dev_makedev(unsigned int, unsigned int)

binder: __pthread_rwlock_arch_t

binder: __pthread_internal_list

binder: __pthread_mutex_s

binder: __pthread_cond_s

binder: pthread_attr_t

binder: long random()

binder: void srandom(unsigned int)

binder: char * initstate(unsigned int, char *, unsigned long)

binder: char * setstate(char *)

binder: random_data

binder: int random_r(struct random_data *__restrict, int *__restrict)

binder: int srandom_r(unsigned int, struct random_data *)

binder: int initstate_r(unsigned int, char *__restrict, unsigned long, struct random_data *__restrict)

binder: int setstate_r(char *__restrict, struct random_data *__restrict)

binder: int rand()

binder: void srand(unsigned int)

binder: int rand_r(unsigned int *)

binder: double drand48()

binder: long lrand48()

binder: long mrand48()

binder: void srand48(long)

binder: drand48_data

binder: int drand48_r(struct drand48_data *__restrict, double *__restrict)

binder: int lrand48_r(struct drand48_data *__restrict, long *__restrict)

binder: int mrand48_r(struct drand48_data *__restrict, long *__restrict)

binder: int srand48_r(long, struct drand48_data *)

binder: void * malloc(unsigned long)

binder: void * calloc(unsigned long, unsigned long)

binder: void * realloc(void *, unsigned long)

binder: void * reallocarray(void *, unsigned long, unsigned long)

binder: void free(void *)

binder: void * alloca(unsigned long)

binder: void * valloc(unsigned long)

binder: void * aligned_alloc(unsigned long, unsigned long)

binder: void abort()

binder: void exit(int)

binder: void quick_exit(int)

binder: void _Exit(int)

binder: char * getenv(const char *)

binder: char * secure_getenv(const char *)

binder: int putenv(char *)

binder: int setenv(const char *, const char *, int)

binder: int unsetenv(const char *)

binder: int clearenv()

binder: char * mktemp(char *)

binder: int mkstemp(char *)

binder: int mkstemp64(char *)

binder: int mkstemps(char *, int)

binder: int mkstemps64(char *, int)

binder: char * mkdtemp(char *)

binder: int mkostemp(char *, int)

binder: int mkostemp64(char *, int)

binder: int mkostemps(char *, int, int)

binder: int mkostemps64(char *, int, int)

binder: int system(const char *)

binder: char * canonicalize_file_name(const char *)

binder: char * realpath(const char *__restrict, char *__restrict)

binder: int abs(int)

binder: long labs(long)

binder: long long llabs(long long)

binder: char * ecvt(double, int, int *__restrict, int *__restrict)

binder: char * fcvt(double, int, int *__restrict, int *__restrict)

binder: char * gcvt(double, int, char *)

binder: char * qecvt(long double, int, int *__restrict, int *__restrict)

binder: char * qfcvt(long double, int, int *__restrict, int *__restrict)

binder: char * qgcvt(long double, int, char *)

binder: int ecvt_r(double, int, int *__restrict, int *__restrict, char *__restrict, unsigned long)

binder: int fcvt_r(double, int, int *__restrict, int *__restrict, char *__restrict, unsigned long)

binder: int qecvt_r(long double, int, int *__restrict, int *__restrict, char *__restrict, unsigned long)

binder: int qfcvt_r(long double, int, int *__restrict, int *__restrict, char *__restrict, unsigned long)

binder: int mblen(const char *, unsigned long)

binder: int mbtowc(wchar_t *__restrict, const char *__restrict, unsigned long)

binder: int wctomb(char *, wchar_t)

binder: unsigned long mbstowcs(wchar_t *__restrict, const char *__restrict, unsigned long)

binder: unsigned long wcstombs(char *__restrict, const wchar_t *__restrict, unsigned long)

binder: int rpmatch(const char *)

binder: void setkey(const char *)

binder: int posix_openpt(int)

binder: int grantpt(int)

binder: int unlockpt(int)

binder: char * ptsname(int)

binder: int ptsname_r(int, char *, unsigned long)

binder: int getpt()

binder: long std::abs(long)

binder: long long std::abs(long long)

binder: double std::abs(double)

binder: float std::abs(float)

binder: long double std::abs(long double)

binder: std::exception
	{ // std::exception file:bits/exception.h line:60
		pybind11::class_<std::exception, std::shared_ptr<std::exception>, PyCallBack_std_exception> cl(M("std"), "exception", "");
		pybind11::handle cl_type = cl;

		cl.def( pybind11::init( [](){ return new std::exception(); }, [](){ return new PyCallBack_std_exception(); } ) );
		cl.def( pybind11::init( [](PyCallBack_std_exception const &o){ return new PyCallBack_std_exception(o); } ) );
		cl.def( pybind11::init( [](std::exception const &o){ return new std::exception(o); } ) );
		cl.def("what", (const char * (std::exception::*)() const) &std::exception::what, "C++: std::exception::what() const --> const char *", pybind11::return_value_policy::automatic);
		cl.def("assign", (class std::exception & (std::exception::*)(const class std::exception &)) &std::exception::operator=, "C++: std::exception::operator=(const class std::exception &) --> class std::exception &", pybind11::return_value_policy::automatic, pybind11::arg(""));
	}

binder: void __gnu_cxx::__verbose_terminate_handler()

binder: void * __cxa_allocate_exception(unsigned long)

binder: void __cxa_free_exception(void *)

binder: std::type_info

binder: std::bad_cast

binder: std::bad_typeid

binder: std::nested_exception

binder: std::bad_alloc

binder: std::bad_array_new_length

binder: std::nothrow_t

binder: std::allocator<char16_t>

binder: std::allocator<char32_t>

binder: std::allocator<void>

binder: std::allocator_traits<std::allocator<char>>

binder: std::allocator_traits<std::allocator<wchar_t>>

binder: std::allocator_traits<std::allocator<char16_t>>

binder: std::allocator_traits<std::allocator<char32_t>>

binder: __gnu_cxx::__alloc_traits<std::allocator<char>>

binder: __gnu_cxx::__alloc_traits<std::allocator<wchar_t>>

binder: __gnu_cxx::__alloc_traits<std::allocator<char16_t>>

binder: __gnu_cxx::__alloc_traits<std::allocator<char32_t>>

binder: std::float_round_style

binder: std::float_denorm_style

binder: std::numeric_limits<bool>

binder: std::numeric_limits<char>

binder: std::numeric_limits<signed char>

binder: std::numeric_limits<unsigned char>

binder: std::numeric_limits<wchar_t>

binder: std::numeric_limits<char16_t>

binder: std::numeric_limits<char32_t>

binder: std::numeric_limits<short>

binder: std::numeric_limits<unsigned short>

binder: std::numeric_limits<int>

binder: std::numeric_limits<unsigned int>

binder: std::numeric_limits<long>

binder: std::numeric_limits<unsigned long>

binder: std::numeric_limits<long long>

binder: std::numeric_limits<unsigned long long>

binder: std::numeric_limits<float>

binder: std::numeric_limits<double>

binder: std::numeric_limits<long double>

binder: std::(anonymous)

binder: iovec

binder: __socket_type

binder: sockaddr

binder: sockaddr_storage

binder: msghdr

binder: cmsghdr

binder: struct cmsghdr * __cmsg_nxthdr(struct msghdr *, struct cmsghdr *)

binder: ucred

binder: linger

binder: osockaddr

binder: mmsghdr

binder: int socket(int, int, int)

binder: int bind(int, const struct sockaddr *, unsigned int)

binder: int getsockname(int, struct sockaddr *__restrict, unsigned int *__restrict)

binder: int connect(int, const struct sockaddr *, unsigned int)

binder: int getpeername(int, struct sockaddr *__restrict, unsigned int *__restrict)

binder: long send(int, const void *, unsigned long, int)

binder: long recv(int, void *, unsigned long, int)

binder: long sendto(int, const void *, unsigned long, int, const struct sockaddr *, unsigned int)

binder: long recvfrom(int, void *__restrict, unsigned long, int, struct sockaddr *__restrict, unsigned int *__restrict)

binder: long sendmsg(int, const struct msghdr *, int)

binder: int sendmmsg(int, struct mmsghdr *, unsigned int, int)

binder: long recvmsg(int, struct msghdr *, int)

binder: int recvmmsg(int, struct mmsghdr *, unsigned int, int, struct timespec *)

binder: int getsockopt(int, int, int, void *__restrict, unsigned int *__restrict)

binder: int setsockopt(int, int, int, const void *, unsigned int)

binder: int listen(int, int)

binder: int accept(int, struct sockaddr *__restrict, unsigned int *__restrict)

binder: int accept4(int, struct sockaddr *__restrict, unsigned int *__restrict, int)

binder: int shutdown(int, int)

binder: int sockatmark(int)

binder: int isfdtype(int, int)

binder: in_addr

binder: ip_opts

binder: ip_mreqn

binder: in_pktinfo

binder: in6_addr

binder: sockaddr_in

binder: sockaddr_in6

binder: ip_mreq

binder: ip_mreq_source

binder: ipv6_mreq

binder: group_req

binder: group_source_req

binder: ip_msfilter

binder: group_filter

binder: unsigned int ntohl(unsigned int)

binder: unsigned short ntohs(unsigned short)

binder: unsigned int htonl(unsigned int)

binder: unsigned short htons(unsigned short)

binder: int bindresvport(int, struct sockaddr_in *)

binder: int bindresvport6(int, struct sockaddr_in6 *)

binder: in6_pktinfo

binder: ip6_mtuinfo

binder: int inet6_option_space(int)

binder: int inet6_option_append(struct cmsghdr *, const unsigned char *, int, int)

binder: unsigned char * inet6_option_alloc(struct cmsghdr *, int, int, int)

binder: int inet6_opt_init(void *, unsigned int)

binder: int inet6_opt_finish(void *, unsigned int, int)

binder: int inet6_opt_set_val(void *, int, void *, unsigned int)

binder: int inet6_opt_get_val(void *, int, void *, unsigned int)

binder: unsigned int inet6_rth_space(int, int)

binder: void * inet6_rth_init(void *, unsigned int, int, int)

binder: int inet6_rth_add(void *, const struct in6_addr *)

binder: int inet6_rth_reverse(const void *, void *)

binder: int inet6_rth_segments(const void *)

binder: struct in6_addr * inet6_rth_getaddr(const void *, int)

binder: int getipv4sourcefilter(int, struct in_addr, struct in_addr, unsigned int *, unsigned int *, struct in_addr *)

binder: int setipv4sourcefilter(int, struct in_addr, struct in_addr, unsigned int, unsigned int, const struct in_addr *)

binder: int getsourcefilter(int, unsigned int, const struct sockaddr *, unsigned int, unsigned int *, unsigned int *, struct sockaddr_storage *)

binder: int setsourcefilter(int, unsigned int, const struct sockaddr *, unsigned int, unsigned int, unsigned int, const struct sockaddr_storage *)

binder: unsigned int inet_addr(const char *)

binder: unsigned int inet_lnaof(struct in_addr)

binder: struct in_addr inet_makeaddr(unsigned int, unsigned int)

binder: unsigned int inet_netof(struct in_addr)

binder: unsigned int inet_network(const char *)

binder: char * inet_ntoa(struct in_addr)

binder: int inet_pton(int, const char *__restrict, void *__restrict)

binder: const char * inet_ntop(int, const void *__restrict, char *__restrict, unsigned int)

binder: int inet_aton(const char *, struct in_addr *)

binder: char * inet_neta(unsigned int, char *, unsigned long)

binder: char * inet_net_ntop(int, const void *, int, char *, unsigned long)

binder: int inet_net_pton(int, const char *, void *, unsigned long)

binder: unsigned int inet_nsap_addr(const char *, unsigned char *, int)

binder: char * inet_nsap_ntoa(int, const unsigned char *, char *)

binder: void * memcpy(void *__restrict, const void *__restrict, unsigned long)

binder: void * memmove(void *, const void *, unsigned long)

binder: void * memccpy(void *__restrict, const void *__restrict, int, unsigned long)

binder: void * memset(void *, int, unsigned long)

binder: int memcmp(const void *, const void *, unsigned long)

binder: void * memchr(const void *, int, unsigned long)

binder: void * rawmemchr(const void *, int)

binder: void * memrchr(const void *, int, unsigned long)

binder: char * strcpy(char *__restrict, const char *__restrict)

binder: char * strncpy(char *__restrict, const char *__restrict, unsigned long)

binder: char * strcat(char *__restrict, const char *__restrict)

binder: char * strncat(char *__restrict, const char *__restrict, unsigned long)

binder: int strcmp(const char *, const char *)

binder: int strncmp(const char *, const char *, unsigned long)

binder: int strcoll(const char *, const char *)

binder: unsigned long strxfrm(char *__restrict, const char *__restrict, unsigned long)

binder: int strcoll_l(const char *, const char *, struct __locale_struct *)

binder: unsigned long strxfrm_l(char *, const char *, unsigned long, struct __locale_struct *)

binder: char * strdup(const char *)

binder: char * strndup(const char *, unsigned long)

binder: char * strchr(const char *, int)

binder: char * strrchr(const char *, int)

binder: char * strchrnul(const char *, int)

binder: unsigned long strcspn(const char *, const char *)

binder: unsigned long strspn(const char *, const char *)

binder: char * strpbrk(const char *, const char *)

binder: char * strstr(const char *, const char *)

binder: char * strtok(char *__restrict, const char *__restrict)

binder: char * strcasestr(const char *, const char *)

binder: void * memmem(const void *, unsigned long, const void *, unsigned long)

binder: void * __mempcpy(void *__restrict, const void *__restrict, unsigned long)

binder: void * mempcpy(void *__restrict, const void *__restrict, unsigned long)

binder: unsigned long strlen(const char *)

binder: unsigned long strnlen(const char *, unsigned long)

binder: char * strerror(int)

binder: char * strerror_r(int, char *, unsigned long)

binder: char * strerror_l(int, struct __locale_struct *)

binder: int bcmp(const void *, const void *, unsigned long)

binder: void bcopy(const void *, void *, unsigned long)

binder: void bzero(void *, unsigned long)

binder: char * index(const char *, int)

binder: char * rindex(const char *, int)

binder: int ffs(int)

binder: int ffsl(long)

binder: int ffsll(long long)

binder: int strcasecmp(const char *, const char *)

binder: int strncasecmp(const char *, const char *, unsigned long)

binder: int strcasecmp_l(const char *, const char *, struct __locale_struct *)

binder: int strncasecmp_l(const char *, const char *, unsigned long, struct __locale_struct *)

binder: void explicit_bzero(void *, unsigned long)

binder: char * strsignal(int)

binder: char * __stpcpy(char *__restrict, const char *__restrict)

binder: char * stpcpy(char *__restrict, const char *__restrict)

binder: char * __stpncpy(char *__restrict, const char *__restrict, unsigned long)

binder: char * stpncpy(char *__restrict, const char *__restrict, unsigned long)

binder: int strverscmp(const char *, const char *)

binder: char * strfry(char *)

binder: void * memfrob(void *, unsigned long)

binder: char * basename(const char *)

binder: void * std::memchr(void *, int, unsigned long)

binder: char * std::strchr(char *, int)

binder: char * std::strpbrk(char *, const char *)

binder: char * std::strrchr(char *, int)

binder: char * std::strstr(char *, const char *)

binder: std::basic_string<char16_t,std::char_traits<char16_t>,std::allocator<char16_t>>

binder: std::basic_string<char32_t,std::char_traits<char32_t>,std::allocator<char32_t>>

binder: wchar_t * wcscpy(wchar_t *__restrict, const wchar_t *__restrict)

binder: wchar_t * wcsncpy(wchar_t *__restrict, const wchar_t *__restrict, unsigned long)

binder: wchar_t * wcscat(wchar_t *__restrict, const wchar_t *__restrict)

binder: wchar_t * wcsncat(wchar_t *__restrict, const wchar_t *__restrict, unsigned long)

binder: int wcscmp(const wchar_t *, const wchar_t *)

binder: int wcsncmp(const wchar_t *, const wchar_t *, unsigned long)

binder: int wcscasecmp(const wchar_t *, const wchar_t *)

binder: int wcsncasecmp(const wchar_t *, const wchar_t *, unsigned long)

binder: int wcscasecmp_l(const wchar_t *, const wchar_t *, struct __locale_struct *)

binder: int wcsncasecmp_l(const wchar_t *, const wchar_t *, unsigned long, struct __locale_struct *)

binder: int wcscoll(const wchar_t *, const wchar_t *)

binder: unsigned long wcsxfrm(wchar_t *__restrict, const wchar_t *__restrict, unsigned long)

binder: int wcscoll_l(const wchar_t *, const wchar_t *, struct __locale_struct *)

binder: unsigned long wcsxfrm_l(wchar_t *, const wchar_t *, unsigned long, struct __locale_struct *)

binder: wchar_t * wcsdup(const wchar_t *)

binder: wchar_t * wcschr(const wchar_t *, wchar_t)

binder: wchar_t * wcsrchr(const wchar_t *, wchar_t)

binder: wchar_t * wcschrnul(const wchar_t *, wchar_t)

binder: unsigned long wcscspn(const wchar_t *, const wchar_t *)

binder: unsigned long wcsspn(const wchar_t *, const wchar_t *)

binder: wchar_t * wcspbrk(const wchar_t *, const wchar_t *)

binder: wchar_t * wcsstr(const wchar_t *, const wchar_t *)

binder: unsigned long wcslen(const wchar_t *)

binder: wchar_t * wcswcs(const wchar_t *, const wchar_t *)

binder: unsigned long wcsnlen(const wchar_t *, unsigned long)

binder: wchar_t * wmemchr(const wchar_t *, wchar_t, unsigned long)

binder: int wmemcmp(const wchar_t *, const wchar_t *, unsigned long)

binder: wchar_t * wmemcpy(wchar_t *__restrict, const wchar_t *__restrict, unsigned long)

binder: wchar_t * wmemmove(wchar_t *, const wchar_t *, unsigned long)

binder: wchar_t * wmemset(wchar_t *, wchar_t, unsigned long)

binder: wchar_t * wmempcpy(wchar_t *__restrict, const wchar_t *__restrict, unsigned long)

binder: unsigned int btowc(int)

binder: int wctob(unsigned int)

binder: int wcwidth(wchar_t)

binder: int wcswidth(const wchar_t *, unsigned long)

binder: wchar_t * wcpcpy(wchar_t *__restrict, const wchar_t *__restrict)

binder: wchar_t * wcpncpy(wchar_t *__restrict, const wchar_t *__restrict, unsigned long)

binder: int fwide(struct _IO_FILE *, int)

binder: int fwprintf(struct _IO_FILE *__restrict, const wchar_t *__restrict)

binder: int wprintf(const wchar_t *__restrict)

binder: int swprintf(wchar_t *__restrict, unsigned long, const wchar_t *__restrict)

binder: int fwscanf(struct _IO_FILE *__restrict, const wchar_t *__restrict)

binder: int wscanf(const wchar_t *__restrict)

binder: int swscanf(const wchar_t *__restrict, const wchar_t *__restrict)

binder: unsigned int fgetwc(struct _IO_FILE *)

binder: unsigned int getwc(struct _IO_FILE *)

binder: unsigned int getwchar()

binder: unsigned int fputwc(wchar_t, struct _IO_FILE *)

binder: unsigned int putwc(wchar_t, struct _IO_FILE *)

binder: unsigned int putwchar(wchar_t)

binder: wchar_t * fgetws(wchar_t *__restrict, int, struct _IO_FILE *__restrict)

binder: int fputws(const wchar_t *__restrict, struct _IO_FILE *__restrict)

binder: unsigned int ungetwc(unsigned int, struct _IO_FILE *)

binder: unsigned int getwc_unlocked(struct _IO_FILE *)

binder: unsigned int getwchar_unlocked()

binder: unsigned int fgetwc_unlocked(struct _IO_FILE *)

binder: unsigned int fputwc_unlocked(wchar_t, struct _IO_FILE *)

binder: unsigned int putwc_unlocked(wchar_t, struct _IO_FILE *)

binder: unsigned int putwchar_unlocked(wchar_t)

binder: wchar_t * fgetws_unlocked(wchar_t *__restrict, int, struct _IO_FILE *__restrict)

binder: int fputws_unlocked(const wchar_t *__restrict, struct _IO_FILE *__restrict)

binder: unsigned long wcsftime(wchar_t *__restrict, unsigned long, const wchar_t *__restrict, const struct tm *__restrict)

binder: unsigned long wcsftime_l(wchar_t *__restrict, unsigned long, const wchar_t *__restrict, const struct tm *__restrict, struct __locale_struct *)

binder: wchar_t * std::wcschr(wchar_t *, wchar_t)

binder: wchar_t * std::wcspbrk(wchar_t *, const wchar_t *)

binder: wchar_t * std::wcsrchr(wchar_t *, wchar_t)

binder: wchar_t * std::wcsstr(wchar_t *, const wchar_t *)

binder: wchar_t * std::wmemchr(wchar_t *, wchar_t, unsigned long)

binder: std::char_traits<char>

binder: std::char_traits<wchar_t>

binder: std::char_traits<char16_t>

binder: std::char_traits<char32_t>

binder: lconv

binder: char * setlocale(int, const char *)

binder: struct lconv * localeconv()

binder: struct __locale_struct * newlocale(int, const char *, struct __locale_struct *)

binder: struct __locale_struct * duplocale(struct __locale_struct *)

binder: void freelocale(struct __locale_struct *)

binder: struct __locale_struct * uselocale(struct __locale_struct *)

binder: struct __locale_struct * __uselocale(struct __locale_struct *)

binder: int isalnum(int)

binder: int isalpha(int)

binder: int iscntrl(int)

binder: int isdigit(int)

binder: int islower(int)

binder: int isgraph(int)

binder: int isprint(int)

binder: int ispunct(int)

binder: int isspace(int)

binder: int isupper(int)

binder: int isxdigit(int)

binder: int tolower(int)

binder: int toupper(int)

binder: int isblank(int)

binder: int isctype(int, int)

binder: int isascii(int)

binder: int toascii(int)

binder: int _toupper(int)

binder: int _tolower(int)

binder: int isalnum_l(int, struct __locale_struct *)

binder: int isalpha_l(int, struct __locale_struct *)

binder: int iscntrl_l(int, struct __locale_struct *)

binder: int isdigit_l(int, struct __locale_struct *)

binder: int islower_l(int, struct __locale_struct *)

binder: int isgraph_l(int, struct __locale_struct *)

binder: int isprint_l(int, struct __locale_struct *)

binder: int ispunct_l(int, struct __locale_struct *)

binder: int isspace_l(int, struct __locale_struct *)

binder: int isupper_l(int, struct __locale_struct *)

binder: int isxdigit_l(int, struct __locale_struct *)

binder: int isblank_l(int, struct __locale_struct *)

binder: int __tolower_l(int, struct __locale_struct *)

binder: int tolower_l(int, struct __locale_struct *)

binder: int __toupper_l(int, struct __locale_struct *)

binder: int toupper_l(int, struct __locale_struct *)

binder: bool std::has_facet<std::collate<char>>(const class std::locale &)

binder: bool std::has_facet<std::collate<wchar_t>>(const class std::locale &)

binder: bool std::has_facet<std::ctype<char>>(const class std::locale &)

binder: bool std::has_facet<std::numpunct<char>>(const class std::locale &)

binder: bool std::has_facet<std::num_put<char>>(const class std::locale &)

binder: bool std::has_facet<std::num_get<char>>(const class std::locale &)

binder: bool std::has_facet<std::ctype<wchar_t>>(const class std::locale &)

binder: bool std::has_facet<std::numpunct<wchar_t>>(const class std::locale &)

binder: bool std::has_facet<std::num_put<wchar_t>>(const class std::locale &)

binder: bool std::has_facet<std::num_get<wchar_t>>(const class std::locale &)

binder: bool std::has_facet<std::codecvt<char, char, mbstate_t>>(const class std::locale &)

binder: bool std::has_facet<std::codecvt<wchar_t, char, mbstate_t>>(const class std::locale &)

binder: bool std::has_facet<std::moneypunct<char, false>>(const class std::locale &)

binder: bool std::has_facet<std::money_put<char>>(const class std::locale &)

binder: bool std::has_facet<std::money_get<char>>(const class std::locale &)

binder: bool std::has_facet<std::__timepunct<char>>(const class std::locale &)

binder: bool std::has_facet<std::time_put<char>>(const class std::locale &)

binder: bool std::has_facet<std::time_get<char>>(const class std::locale &)

binder: bool std::has_facet<std::messages<char>>(const class std::locale &)

binder: bool std::has_facet<std::moneypunct<wchar_t, false>>(const class std::locale &)

binder: bool std::has_facet<std::money_put<wchar_t>>(const class std::locale &)

binder: bool std::has_facet<std::money_get<wchar_t>>(const class std::locale &)

binder: bool std::has_facet<std::__timepunct<wchar_t>>(const class std::locale &)

binder: bool std::has_facet<std::time_put<wchar_t>>(const class std::locale &)

binder: bool std::has_facet<std::time_get<wchar_t>>(const class std::locale &)

binder: bool std::has_facet<std::messages<wchar_t>>(const class std::locale &)

binder: const class std::__cxx11::collate<char> & std::use_facet<std::collate<char>>(const class std::locale &)

binder: const class std::__cxx11::collate<wchar_t> & std::use_facet<std::collate<wchar_t>>(const class std::locale &)

binder: const class std::ctype<char> & std::use_facet<std::ctype<char>>(const class std::locale &)

binder: const class std::__cxx11::numpunct<char> & std::use_facet<std::numpunct<char>>(const class std::locale &)

binder: const class std::num_put<char> & std::use_facet<std::num_put<char>>(const class std::locale &)

binder: const class std::num_get<char> & std::use_facet<std::num_get<char>>(const class std::locale &)

binder: const class std::ctype<wchar_t> & std::use_facet<std::ctype<wchar_t>>(const class std::locale &)

binder: const class std::__cxx11::numpunct<wchar_t> & std::use_facet<std::numpunct<wchar_t>>(const class std::locale &)

binder: const class std::num_put<wchar_t> & std::use_facet<std::num_put<wchar_t>>(const class std::locale &)

binder: const class std::num_get<wchar_t> & std::use_facet<std::num_get<wchar_t>>(const class std::locale &)

binder: const class std::codecvt<char, char, mbstate_t> & std::use_facet<std::codecvt<char, char, mbstate_t>>(const class std::locale &)

binder: const class std::codecvt<wchar_t, char, mbstate_t> & std::use_facet<std::codecvt<wchar_t, char, mbstate_t>>(const class std::locale &)

binder: const class std::__cxx11::moneypunct<char, true> & std::use_facet<std::moneypunct<char, true>>(const class std::locale &)

binder: const class std::__cxx11::moneypunct<char, false> & std::use_facet<std::moneypunct<char, false>>(const class std::locale &)

binder: const class std::__cxx11::money_put<char> & std::use_facet<std::money_put<char>>(const class std::locale &)

binder: const class std::__cxx11::money_get<char> & std::use_facet<std::money_get<char>>(const class std::locale &)

binder: const class std::time_put<char> & std::use_facet<std::time_put<char>>(const class std::locale &)

binder: const class std::__cxx11::time_get<char> & std::use_facet<std::time_get<char>>(const class std::locale &)

binder: const class std::__cxx11::messages<char> & std::use_facet<std::messages<char>>(const class std::locale &)

binder: const class std::__cxx11::moneypunct<wchar_t, true> & std::use_facet<std::moneypunct<wchar_t, true>>(const class std::locale &)

binder: const class std::__cxx11::moneypunct<wchar_t, false> & std::use_facet<std::moneypunct<wchar_t, false>>(const class std::locale &)

binder: const class std::__cxx11::money_put<wchar_t> & std::use_facet<std::money_put<wchar_t>>(const class std::locale &)

binder: const class std::__cxx11::money_get<wchar_t> & std::use_facet<std::money_get<wchar_t>>(const class std::locale &)

binder: const class std::time_put<wchar_t> & std::use_facet<std::time_put<wchar_t>>(const class std::locale &)

binder: const class std::__cxx11::time_get<wchar_t> & std::use_facet<std::time_get<wchar_t>>(const class std::locale &)

binder: const class std::__cxx11::messages<wchar_t> & std::use_facet<std::messages<wchar_t>>(const class std::locale &)

binder: sched_param

binder: int unshare(int)

binder: int sched_getcpu()

binder: int setns(int, int)

binder: int sched_setparam(int, const struct sched_param *)

binder: int sched_getparam(int, struct sched_param *)

binder: int sched_setscheduler(int, int, const struct sched_param *)

binder: int sched_getscheduler(int)

binder: int sched_yield()

binder: int sched_get_priority_max(int)

binder: int sched_get_priority_min(int)

binder: int sched_rr_get_interval(int, struct timespec *)

binder: timex

binder: int clock_adjtime(int, struct timex *)

binder: tm

binder: itimerspec

binder: long clock()

binder: long time(long *)

binder: double difftime(long, long)

binder: long mktime(struct tm *)

binder: unsigned long strftime(char *__restrict, unsigned long, const char *__restrict, const struct tm *__restrict)

binder: char * strptime(const char *__restrict, const char *__restrict, struct tm *)

binder: unsigned long strftime_l(char *__restrict, unsigned long, const char *__restrict, const struct tm *__restrict, struct __locale_struct *)

binder: char * strptime_l(const char *__restrict, const char *__restrict, struct tm *, struct __locale_struct *)

binder: struct tm * gmtime(const long *)

binder: struct tm * localtime(const long *)

binder: struct tm * gmtime_r(const long *__restrict, struct tm *__restrict)

binder: struct tm * localtime_r(const long *__restrict, struct tm *__restrict)

binder: char * asctime(const struct tm *)

binder: char * ctime(const long *)

binder: char * asctime_r(const struct tm *__restrict, char *__restrict)

binder: char * ctime_r(const long *__restrict, char *__restrict)

binder: void tzset()

binder: int stime(const long *)

binder: long timegm(struct tm *)

binder: long timelocal(struct tm *)

binder: int dysize(int)

binder: int nanosleep(const struct timespec *, struct timespec *)

binder: int clock_getres(int, struct timespec *)

binder: int clock_gettime(int, struct timespec *)

binder: int clock_settime(int, const struct timespec *)

binder: int clock_nanosleep(int, int, const struct timespec *, struct timespec *)

binder: int clock_getcpuclockid(int, int *)

binder: int timer_delete(void *)

binder: int timer_settime(void *, int, const struct itimerspec *__restrict, struct itimerspec *__restrict)

binder: int timer_gettime(void *, struct itimerspec *)

binder: int timer_getoverrun(void *)

binder: int timespec_get(struct timespec *, int)

binder: struct tm * getdate(const char *)

binder: int getdate_r(const char *__restrict, struct tm *__restrict)

binder: _pthread_cleanup_buffer

binder: void pthread_exit(void *)

binder: int pthread_detach(unsigned long)

binder: unsigned long pthread_self()

binder: int pthread_equal(unsigned long, unsigned long)

binder: int pthread_attr_init(union pthread_attr_t *)

binder: int pthread_attr_destroy(union pthread_attr_t *)

binder: int pthread_attr_getdetachstate(const union pthread_attr_t *, int *)

binder: int pthread_attr_setdetachstate(union pthread_attr_t *, int)

binder: int pthread_attr_getguardsize(const union pthread_attr_t *, unsigned long *)

binder: int pthread_attr_setguardsize(union pthread_attr_t *, unsigned long)

binder: int pthread_attr_getschedparam(const union pthread_attr_t *__restrict, struct sched_param *__restrict)

binder: int pthread_attr_setschedparam(union pthread_attr_t *__restrict, const struct sched_param *__restrict)

binder: int pthread_attr_getschedpolicy(const union pthread_attr_t *__restrict, int *__restrict)

binder: int pthread_attr_setschedpolicy(union pthread_attr_t *, int)

binder: int pthread_attr_getinheritsched(const union pthread_attr_t *__restrict, int *__restrict)

binder: int pthread_attr_setinheritsched(union pthread_attr_t *, int)

binder: int pthread_attr_getscope(const union pthread_attr_t *__restrict, int *__restrict)

binder: int pthread_attr_setscope(union pthread_attr_t *, int)

binder: int pthread_attr_setstackaddr(union pthread_attr_t *, void *)

binder: int pthread_attr_getstacksize(const union pthread_attr_t *__restrict, unsigned long *__restrict)

binder: int pthread_attr_setstacksize(union pthread_attr_t *, unsigned long)

binder: int pthread_attr_setstack(union pthread_attr_t *, void *, unsigned long)

binder: int pthread_getattr_default_np(union pthread_attr_t *)

binder: int pthread_setattr_default_np(const union pthread_attr_t *)

binder: int pthread_getattr_np(unsigned long, union pthread_attr_t *)

binder: int pthread_setschedparam(unsigned long, int, const struct sched_param *)

binder: int pthread_getschedparam(unsigned long, int *__restrict, struct sched_param *__restrict)

binder: int pthread_setschedprio(unsigned long, int)

binder: int pthread_getname_np(unsigned long, char *, unsigned long)

binder: int pthread_setname_np(unsigned long, const char *)

binder: int pthread_getconcurrency()

binder: int pthread_setconcurrency(int)

binder: int pthread_yield()

binder: int pthread_setcancelstate(int, int *)

binder: int pthread_setcanceltype(int, int *)

binder: int pthread_cancel(unsigned long)

binder: void pthread_testcancel()

binder: __pthread_cleanup_frame

binder: __pthread_cleanup_class

binder: int pthread_spin_init(volatile int *, int)

binder: int pthread_spin_destroy(volatile int *)

binder: int pthread_spin_lock(volatile int *)

binder: int pthread_spin_trylock(volatile int *)

binder: int pthread_spin_unlock(volatile int *)

binder: int pthread_key_delete(unsigned int)

binder: void * pthread_getspecific(unsigned int)

binder: int pthread_setspecific(unsigned int, const void *)

binder: int pthread_getcpuclockid(unsigned long, int *)

binder: void * __gthrw_pthread_getspecific(unsigned int)

binder: int __gthrw_pthread_setspecific(unsigned int, const void *)

binder: int __gthrw_pthread_equal(unsigned long, unsigned long)

binder: unsigned long __gthrw_pthread_self()

binder: int __gthrw_pthread_detach(unsigned long)

binder: int __gthrw_pthread_cancel(unsigned long)

binder: int __gthrw_sched_yield()

binder: int __gthrw_pthread_key_delete(unsigned int)

binder: int __gthread_active_p()

binder: int __gthread_detach(unsigned long)

binder: int __gthread_equal(unsigned long, unsigned long)

binder: unsigned long __gthread_self()

binder: int __gthread_yield()

binder: int __gthread_key_delete(unsigned int)

binder: void * __gthread_getspecific(unsigned int)

binder: int __gthread_setspecific(unsigned int, const void *)

binder: int __gnu_cxx::__exchange_and_add(volatile int *, int)

binder: void __gnu_cxx::__atomic_add(volatile int *, int)

binder: int __gnu_cxx::__exchange_and_add_single(int *, int)

binder: void __gnu_cxx::__atomic_add_single(int *, int)

binder: int __gnu_cxx::__exchange_and_add_dispatch(int *, int)

binder: void __gnu_cxx::__atomic_add_dispatch(int *, int)

binder: __gnu_cxx::new_allocator<char>

binder: __gnu_cxx::new_allocator<wchar_t>

binder: __gnu_cxx::new_allocator<char16_t>

binder: __gnu_cxx::new_allocator<char32_t>

binder: std::allocator<char>

binder: std::allocator<wchar_t>

binder: __cxxabiv1::__forced_unwind

binder: std::binary_function<const std::_V2::error_category *,const std::_V2::error_category *,bool>

binder: std::less<const std::_V2::error_category *>

binder: class std::basic_istream<char> & std::getline<char,std::char_traits<char>,std::allocator<char>>(class std::basic_istream<char> &, std::string &)

binder: class std::basic_istream<wchar_t> & std::getline<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(class std::basic_istream<wchar_t> &, class std::basic_string<wchar_t> &)

binder: class std::basic_istream<char> & std::getline<char,std::char_traits<char>,std::allocator<char>>(class std::basic_istream<char> &, std::string &, char)

binder: class std::basic_istream<wchar_t> & std::getline<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(class std::basic_istream<wchar_t> &, class std::basic_string<wchar_t> &, wchar_t)

binder: _IO_marker

binder: __codecvt_result

binder: _IO_FILE

binder: int __underflow(struct _IO_FILE *)

binder: int __uflow(struct _IO_FILE *)

binder: int __overflow(struct _IO_FILE *, int)

binder: int _IO_getc(struct _IO_FILE *)

binder: int _IO_putc(int, struct _IO_FILE *)

binder: int _IO_feof(struct _IO_FILE *)

binder: int _IO_ferror(struct _IO_FILE *)

binder: int _IO_peekc_locked(struct _IO_FILE *)

binder: void _IO_flockfile(struct _IO_FILE *)

binder: void _IO_funlockfile(struct _IO_FILE *)

binder: int _IO_ftrylockfile(struct _IO_FILE *)

binder: long _IO_padn(struct _IO_FILE *, int, long)

binder: unsigned long _IO_sgetn(struct _IO_FILE *, void *, unsigned long)

binder: long _IO_seekoff(struct _IO_FILE *, long, int, int)

binder: long _IO_seekpos(struct _IO_FILE *, long, int)

binder: void _IO_free_backup_area(struct _IO_FILE *)

binder: int remove(const char *)

binder: int rename(const char *, const char *)

binder: int renameat(int, const char *, int, const char *)

binder: struct _IO_FILE * tmpfile()

binder: struct _IO_FILE * tmpfile64()

binder: char * tmpnam(char *)

binder: char * tmpnam_r(char *)

binder: char * tempnam(const char *, const char *)

binder: int fclose(struct _IO_FILE *)

binder: int fflush(struct _IO_FILE *)

binder: int fflush_unlocked(struct _IO_FILE *)

binder: int fcloseall()

binder: struct _IO_FILE * fopen(const char *__restrict, const char *__restrict)

binder: struct _IO_FILE * freopen(const char *__restrict, const char *__restrict, struct _IO_FILE *__restrict)

binder: struct _IO_FILE * fopen64(const char *__restrict, const char *__restrict)

binder: struct _IO_FILE * freopen64(const char *__restrict, const char *__restrict, struct _IO_FILE *__restrict)

binder: struct _IO_FILE * fdopen(int, const char *)

binder: struct _IO_FILE * fmemopen(void *, unsigned long, const char *)

binder: void setbuf(struct _IO_FILE *__restrict, char *__restrict)

binder: int setvbuf(struct _IO_FILE *__restrict, char *__restrict, int, unsigned long)

binder: void setbuffer(struct _IO_FILE *__restrict, char *__restrict, unsigned long)

binder: void setlinebuf(struct _IO_FILE *)

binder: int fprintf(struct _IO_FILE *__restrict, const char *__restrict)

binder: int printf(const char *__restrict)

binder: int sprintf(char *__restrict, const char *__restrict)

binder: int snprintf(char *__restrict, unsigned long, const char *__restrict)

binder: int dprintf(int, const char *__restrict)

binder: int fscanf(struct _IO_FILE *__restrict, const char *__restrict)

binder: int scanf(const char *__restrict)

binder: int sscanf(const char *__restrict, const char *__restrict)

binder: int fgetc(struct _IO_FILE *)

binder: int getc(struct _IO_FILE *)

binder: int getchar()

binder: int getc_unlocked(struct _IO_FILE *)

binder: int getchar_unlocked()

binder: int fgetc_unlocked(struct _IO_FILE *)

binder: int fputc(int, struct _IO_FILE *)

binder: int putc(int, struct _IO_FILE *)

binder: int putchar(int)

binder: int fputc_unlocked(int, struct _IO_FILE *)

binder: int putc_unlocked(int, struct _IO_FILE *)

binder: int putchar_unlocked(int)

binder: int getw(struct _IO_FILE *)

binder: int putw(int, struct _IO_FILE *)

binder: char * fgets(char *__restrict, int, struct _IO_FILE *__restrict)

binder: char * gets(char *)

binder: char * fgets_unlocked(char *__restrict, int, struct _IO_FILE *__restrict)

binder: int fputs(const char *__restrict, struct _IO_FILE *__restrict)

binder: int puts(const char *)

binder: int ungetc(int, struct _IO_FILE *)

binder: unsigned long fread(void *__restrict, unsigned long, unsigned long, struct _IO_FILE *__restrict)

binder: unsigned long fwrite(const void *__restrict, unsigned long, unsigned long, struct _IO_FILE *__restrict)

binder: int fputs_unlocked(const char *__restrict, struct _IO_FILE *__restrict)

binder: unsigned long fread_unlocked(void *__restrict, unsigned long, unsigned long, struct _IO_FILE *__restrict)

binder: unsigned long fwrite_unlocked(const void *__restrict, unsigned long, unsigned long, struct _IO_FILE *__restrict)

binder: int fseek(struct _IO_FILE *, long, int)

binder: long ftell(struct _IO_FILE *)

binder: void rewind(struct _IO_FILE *)

binder: int fseeko(struct _IO_FILE *, long, int)

binder: long ftello(struct _IO_FILE *)

binder: int fseeko64(struct _IO_FILE *, long, int)

binder: long ftello64(struct _IO_FILE *)

binder: void clearerr(struct _IO_FILE *)

binder: int feof(struct _IO_FILE *)

binder: int ferror(struct _IO_FILE *)

binder: void clearerr_unlocked(struct _IO_FILE *)

binder: int feof_unlocked(struct _IO_FILE *)

binder: int ferror_unlocked(struct _IO_FILE *)

binder: void perror(const char *)

binder: int fileno(struct _IO_FILE *)

binder: int fileno_unlocked(struct _IO_FILE *)

binder: struct _IO_FILE * popen(const char *, const char *)

binder: int pclose(struct _IO_FILE *)

binder: char * ctermid(char *)

binder: char * cuserid(char *)

binder: void flockfile(struct _IO_FILE *)

binder: int ftrylockfile(struct _IO_FILE *)

binder: void funlockfile(struct _IO_FILE *)

binder: int * __errno_location()

binder: int std::stoi(const std::string &, unsigned long *, int)

binder: long std::stol(const std::string &, unsigned long *, int)

binder: unsigned long std::stoul(const std::string &, unsigned long *, int)

binder: long long std::stoll(const std::string &, unsigned long *, int)

binder: unsigned long long std::stoull(const std::string &, unsigned long *, int)

binder: float std::stof(const std::string &, unsigned long *)

binder: double std::stod(const std::string &, unsigned long *)

binder: long double std::stold(const std::string &, unsigned long *)

binder: class std::__cxx11::basic_string<char> std::to_string(int)

binder: class std::__cxx11::basic_string<char> std::to_string(unsigned int)

binder: class std::__cxx11::basic_string<char> std::to_string(long)

binder: class std::__cxx11::basic_string<char> std::to_string(unsigned long)

binder: class std::__cxx11::basic_string<char> std::to_string(long long)

binder: class std::__cxx11::basic_string<char> std::to_string(unsigned long long)

binder: class std::__cxx11::basic_string<char> std::to_string(float)

binder: class std::__cxx11::basic_string<char> std::to_string(double)

binder: class std::__cxx11::basic_string<char> std::to_string(long double)

binder: int std::stoi(const class std::basic_string<wchar_t> &, unsigned long *, int)

binder: long std::stol(const class std::basic_string<wchar_t> &, unsigned long *, int)

binder: unsigned long std::stoul(const class std::basic_string<wchar_t> &, unsigned long *, int)

binder: long long std::stoll(const class std::basic_string<wchar_t> &, unsigned long *, int)

binder: unsigned long long std::stoull(const class std::basic_string<wchar_t> &, unsigned long *, int)

binder: float std::stof(const class std::basic_string<wchar_t> &, unsigned long *)

binder: double std::stod(const class std::basic_string<wchar_t> &, unsigned long *)

binder: long double std::stold(const class std::basic_string<wchar_t> &, unsigned long *)

binder: class std::__cxx11::basic_string<wchar_t> std::to_wstring(int)

binder: class std::__cxx11::basic_string<wchar_t> std::to_wstring(unsigned int)

binder: class std::__cxx11::basic_string<wchar_t> std::to_wstring(long)

binder: class std::__cxx11::basic_string<wchar_t> std::to_wstring(unsigned long)

binder: class std::__cxx11::basic_string<wchar_t> std::to_wstring(long long)

binder: class std::__cxx11::basic_string<wchar_t> std::to_wstring(unsigned long long)

binder: class std::__cxx11::basic_string<wchar_t> std::to_wstring(float)

binder: class std::__cxx11::basic_string<wchar_t> std::to_wstring(double)

binder: class std::__cxx11::basic_string<wchar_t> std::to_wstring(long double)

binder: std::hash<bool>

binder: std::hash<char>

binder: std::hash<signed char>

binder: std::hash<unsigned char>

binder: std::hash<wchar_t>

binder: std::hash<char16_t>

binder: std::hash<char32_t>

binder: std::hash<short>

binder: std::hash<int>

binder: std::hash<long>

binder: std::hash<long long>

binder: std::hash<unsigned short>

binder: std::hash<unsigned int>

binder: std::hash<unsigned long>

binder: std::hash<unsigned long long>

binder: std::hash<float>

binder: std::hash<double>

binder: std::hash<long double>

binder: std::hash<std::string>

binder: std::hash<std::basic_string<wchar_t>>

binder: std::hash<std::basic_string<char16_t, std::char_traits<char16_t>, std::allocator<char16_t> >>

binder: std::hash<std::basic_string<char32_t, std::char_traits<char32_t>, std::allocator<char32_t> >>

binder: std::basic_string<char,std::char_traits<char>,std::allocator<char>>

binder: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>

binder: std::locale

binder: std::collate<char>

binder: std::collate_byname<char>

binder: std::collate<wchar_t>

binder: std::collate_byname<wchar_t>

binder: std::errc

binder: std::logic_error

binder: std::domain_error

binder: std::invalid_argument

binder: std::length_error

binder: std::out_of_range

binder: std::runtime_error
	{ // std::runtime_error file:stdexcept line:197
		pybind11::class_<std::runtime_error, std::shared_ptr<std::runtime_error>, PyCallBack_std_runtime_error, std::exception> cl(M("std"), "runtime_error", "");
		pybind11::handle cl_type = cl;

		cl.def( pybind11::init<const std::string &>(), pybind11::arg("__arg") );

		cl.def( pybind11::init<const char *>(), pybind11::arg("") );

		cl.def( pybind11::init( [](PyCallBack_std_runtime_error const &o){ return new PyCallBack_std_runtime_error(o); } ) );
		cl.def( pybind11::init( [](std::runtime_error const &o){ return new std::runtime_error(o); } ) );
		cl.def("assign", (class std::runtime_error & (std::runtime_error::*)(const class std::runtime_error &)) &std::runtime_error::operator=, "C++: std::runtime_error::operator=(const class std::runtime_error &) --> class std::runtime_error &", pybind11::return_value_policy::automatic, pybind11::arg(""));
		cl.def("what", (const char * (std::runtime_error::*)() const) &std::runtime_error::what, "C++: std::runtime_error::what() const --> const char *", pybind11::return_value_policy::automatic);
	}

binder: int iswalnum(unsigned int)

binder: int iswalpha(unsigned int)

binder: int iswcntrl(unsigned int)

binder: int iswdigit(unsigned int)

binder: int iswgraph(unsigned int)

binder: int iswlower(unsigned int)

binder: int iswprint(unsigned int)

binder: int iswpunct(unsigned int)

binder: int iswspace(unsigned int)

binder: int iswupper(unsigned int)

binder: int iswxdigit(unsigned int)

binder: int iswblank(unsigned int)

binder: unsigned long wctype(const char *)

binder: int iswctype(unsigned int, unsigned long)

binder: unsigned int towlower(unsigned int)

binder: unsigned int towupper(unsigned int)

binder: const int * wctrans(const char *)

binder: unsigned int towctrans(unsigned int, const int *)

binder: int iswalnum_l(unsigned int, struct __locale_struct *)

binder: int iswalpha_l(unsigned int, struct __locale_struct *)

binder: int iswcntrl_l(unsigned int, struct __locale_struct *)

binder: int iswdigit_l(unsigned int, struct __locale_struct *)

binder: int iswgraph_l(unsigned int, struct __locale_struct *)

binder: int iswlower_l(unsigned int, struct __locale_struct *)

binder: int iswprint_l(unsigned int, struct __locale_struct *)

binder: int iswpunct_l(unsigned int, struct __locale_struct *)

binder: int iswspace_l(unsigned int, struct __locale_struct *)

binder: int iswupper_l(unsigned int, struct __locale_struct *)

binder: int iswxdigit_l(unsigned int, struct __locale_struct *)

binder: int iswblank_l(unsigned int, struct __locale_struct *)

binder: unsigned long wctype_l(const char *, struct __locale_struct *)

binder: int iswctype_l(unsigned int, unsigned long, struct __locale_struct *)

binder: unsigned int towlower_l(unsigned int, struct __locale_struct *)

binder: unsigned int towupper_l(unsigned int, struct __locale_struct *)

binder: const int * wctrans_l(const char *, struct __locale_struct *)

binder: unsigned int towctrans_l(unsigned int, const int *, struct __locale_struct *)

binder: std::ctype_base

binder: std::ctype<char>

binder: std::ctype<wchar_t>

binder: std::ctype_byname<char>

binder: std::ctype_byname<wchar_t>

binder: std::numpunct<char>

binder: std::numpunct_byname<char>

binder: std::num_get<char,std::istreambuf_iterator<char, std::char_traits<char> >>

binder: std::num_put<char,std::ostreambuf_iterator<char, std::char_traits<char> >>

binder: std::numpunct<wchar_t>

binder: std::numpunct_byname<wchar_t>

binder: std::num_get<wchar_t,std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >>

binder: std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >>

binder: std::basic_ios<char,std::char_traits<char>>

binder: std::basic_ios<wchar_t,std::char_traits<wchar_t>>

binder: class std::basic_ostream<char> & std::endl<char,std::char_traits<char>>(std::ostream &)

binder: class std::basic_ostream<wchar_t> & std::endl<wchar_t,std::char_traits<wchar_t>>(class std::basic_ostream<wchar_t> &)

binder: class std::basic_ostream<char> & std::ends<char,std::char_traits<char>>(std::ostream &)

binder: class std::basic_ostream<wchar_t> & std::ends<wchar_t,std::char_traits<wchar_t>>(class std::basic_ostream<wchar_t> &)

binder: class std::basic_ostream<char> & std::flush<char,std::char_traits<char>>(std::ostream &)

binder: class std::basic_ostream<wchar_t> & std::flush<wchar_t,std::char_traits<wchar_t>>(class std::basic_ostream<wchar_t> &)

binder: std::ostream

binder: std::wostream

binder: class std::basic_istream<char> & std::ws<char,std::char_traits<char>>(class std::basic_istream<char> &)

binder: class std::basic_istream<wchar_t> & std::ws<wchar_t,std::char_traits<wchar_t>>(class std::basic_istream<wchar_t> &)

binder: std::istream

binder: std::iostream

binder: std::wistream

binder: std::basic_iostream<wchar_t,std::char_traits<wchar_t>>

binder: std::codecvt_base

binder: std::codecvt<char,char,__mbstate_t>

binder: std::codecvt<wchar_t,char,__mbstate_t>

binder: std::codecvt<char16_t,char,__mbstate_t>

binder: std::codecvt<char32_t,char,__mbstate_t>

binder: std::codecvt_byname<char16_t,char,__mbstate_t>

binder: std::codecvt_byname<char32_t,char,__mbstate_t>

binder: std::codecvt_byname<char,char,__mbstate_t>

binder: std::codecvt_byname<wchar_t,char,__mbstate_t>

binder: std::filebuf

binder: std::ifstream

binder: std::ofstream

binder: std::basic_fstream<char,std::char_traits<char>>

binder: std::basic_filebuf<wchar_t,std::char_traits<wchar_t>>

binder: std::basic_ifstream<wchar_t,std::char_traits<wchar_t>>

binder: std::basic_ofstream<wchar_t,std::char_traits<wchar_t>>

binder: std::basic_fstream<wchar_t,std::char_traits<wchar_t>>

binder: std::allocator_arg_t

binder: std::tuple<<>>

binder: std::bad_function_call

binder: std::_Manager_operation

binder: std::time_base

binder: std::money_base

binder: std::messages_base

binder: char * gettext(const char *)

binder: char * dgettext(const char *, const char *)

binder: char * __dgettext(const char *, const char *)

binder: char * dcgettext(const char *, const char *, int)

binder: char * __dcgettext(const char *, const char *, int)

binder: char * ngettext(const char *, const char *, unsigned long)

binder: char * dngettext(const char *, const char *, const char *, unsigned long)

binder: char * dcngettext(const char *, const char *, const char *, unsigned long, int)

binder: char * textdomain(const char *)

binder: char * bindtextdomain(const char *, const char *)

binder: char * bind_textdomain_codeset(const char *, const char *)

binder: std::moneypunct<char,false>

binder: std::moneypunct<char,true>

binder: std::moneypunct_byname<char,false>

binder: std::moneypunct_byname<char,true>

binder: std::money_get<char,std::istreambuf_iterator<char, std::char_traits<char> >>

binder: std::money_put<char,std::ostreambuf_iterator<char, std::char_traits<char> >>

binder: std::time_put<char,std::ostreambuf_iterator<char, std::char_traits<char> >>

binder: std::time_put_byname<char,std::ostreambuf_iterator<char, std::char_traits<char> >>

binder: std::time_get<char,std::istreambuf_iterator<char, std::char_traits<char> >>

binder: std::time_get_byname<char,std::istreambuf_iterator<char, std::char_traits<char> >>

binder: std::messages<char>

binder: std::messages_byname<char>

binder: std::moneypunct<wchar_t,false>

binder: std::moneypunct<wchar_t,true>

binder: std::moneypunct_byname<wchar_t,false>

binder: std::moneypunct_byname<wchar_t,true>

binder: std::money_get<wchar_t,std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >>

binder: std::money_put<wchar_t,std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >>

binder: std::time_put<wchar_t,std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >>

binder: std::time_put_byname<wchar_t,std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >>

binder: std::time_get<wchar_t,std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >>

binder: std::time_get_byname<wchar_t,std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >>

binder: std::messages<wchar_t>

binder: std::messages_byname<wchar_t>

binder: std::unique_ptr<char,void (*)(void *)>

binder: std::_Rb_tree_color

binder: int __fpclassify(double)

binder: int __signbit(double)

binder: int __isinf(double)

binder: int __finite(double)

binder: int __isnan(double)

binder: int __iseqsig(double, double)

binder: int __issignaling(double)

binder: double acos(double)

binder: double __acos(double)

binder: double asin(double)

binder: double __asin(double)

binder: double atan(double)

binder: double __atan(double)

binder: double atan2(double, double)

binder: double __atan2(double, double)

binder: double cos(double)

binder: double __cos(double)

binder: double sin(double)

binder: double __sin(double)

binder: double tan(double)

binder: double __tan(double)

binder: double cosh(double)

binder: double __cosh(double)

binder: double sinh(double)

binder: double __sinh(double)

binder: double tanh(double)

binder: double __tanh(double)

binder: void sincos(double, double *, double *)

binder: void __sincos(double, double *, double *)

binder: double acosh(double)

binder: double __acosh(double)

binder: double asinh(double)

binder: double __asinh(double)

binder: double atanh(double)

binder: double __atanh(double)

binder: double exp(double)

binder: double __exp(double)

binder: double frexp(double, int *)

binder: double __frexp(double, int *)

binder: double ldexp(double, int)

binder: double __ldexp(double, int)

binder: double log(double)

binder: double __log(double)

binder: double log10(double)

binder: double __log10(double)

binder: double modf(double, double *)

binder: double __modf(double, double *)

binder: double exp10(double)

binder: double __exp10(double)

binder: double expm1(double)

binder: double __expm1(double)

binder: double log1p(double)

binder: double __log1p(double)

binder: double logb(double)

binder: double __logb(double)

binder: double exp2(double)

binder: double __exp2(double)

binder: double log2(double)

binder: double __log2(double)

binder: double pow(double, double)

binder: double __pow(double, double)

binder: double sqrt(double)

binder: double __sqrt(double)

binder: double hypot(double, double)

binder: double __hypot(double, double)

binder: double cbrt(double)

binder: double __cbrt(double)

binder: double ceil(double)

binder: double __ceil(double)

binder: double fabs(double)

binder: double __fabs(double)

binder: double floor(double)

binder: double __floor(double)

binder: double fmod(double, double)

binder: double __fmod(double, double)

binder: int finite(double)

binder: double drem(double, double)

binder: double __drem(double, double)

binder: double significand(double)

binder: double __significand(double)

binder: double copysign(double, double)

binder: double __copysign(double, double)

binder: double nan(const char *)

binder: double __nan(const char *)

binder: double j0(double)

binder: double __j0(double)

binder: double j1(double)

binder: double __j1(double)

binder: double jn(int, double)

binder: double __jn(int, double)

binder: double y0(double)

binder: double __y0(double)

binder: double y1(double)

binder: double __y1(double)

binder: double yn(int, double)

binder: double __yn(int, double)

binder: double erf(double)

binder: double __erf(double)

binder: double erfc(double)

binder: double __erfc(double)

binder: double lgamma(double)

binder: double __lgamma(double)

binder: double tgamma(double)

binder: double __tgamma(double)

binder: double gamma(double)

binder: double __gamma(double)

binder: double lgamma_r(double, int *)

binder: double __lgamma_r(double, int *)

binder: double rint(double)

binder: double __rint(double)

binder: double nextafter(double, double)

binder: double __nextafter(double, double)

binder: double nexttoward(double, long double)

binder: double __nexttoward(double, long double)

binder: double nextdown(double)

binder: double __nextdown(double)

binder: double nextup(double)

binder: double __nextup(double)

binder: double remainder(double, double)

binder: double __remainder(double, double)

binder: double scalbn(double, int)

binder: double __scalbn(double, int)

binder: int ilogb(double)

binder: int __ilogb(double)

binder: long llogb(double)

binder: long __llogb(double)

binder: double scalbln(double, long)

binder: double __scalbln(double, long)

binder: double nearbyint(double)

binder: double __nearbyint(double)

binder: double round(double)

binder: double __round(double)

binder: double trunc(double)

binder: double __trunc(double)

binder: double remquo(double, double, int *)

binder: double __remquo(double, double, int *)

binder: long lrint(double)

binder: long __lrint(double)

binder: long long llrint(double)

binder: long long __llrint(double)

binder: long lround(double)

binder: long __lround(double)

binder: long long llround(double)

binder: long long __llround(double)

binder: double fdim(double, double)

binder: double __fdim(double, double)

binder: double fmax(double, double)

binder: double __fmax(double, double)

binder: double fmin(double, double)

binder: double __fmin(double, double)

binder: double fma(double, double, double)

binder: double __fma(double, double, double)

binder: double roundeven(double)

binder: double __roundeven(double)

binder: long fromfp(double, int, unsigned int)

binder: long __fromfp(double, int, unsigned int)

binder: unsigned long ufromfp(double, int, unsigned int)

binder: unsigned long __ufromfp(double, int, unsigned int)

binder: long fromfpx(double, int, unsigned int)

binder: long __fromfpx(double, int, unsigned int)

binder: unsigned long ufromfpx(double, int, unsigned int)

binder: unsigned long __ufromfpx(double, int, unsigned int)

binder: double fmaxmag(double, double)

binder: double __fmaxmag(double, double)

binder: double fminmag(double, double)

binder: double __fminmag(double, double)

binder: int totalorder(double, double)

binder: int totalordermag(double, double)

binder: int canonicalize(double *, const double *)

binder: double getpayload(const double *)

binder: double __getpayload(const double *)

binder: int setpayload(double *, double)

binder: int setpayloadsig(double *, double)

binder: double scalb(double, double)

binder: double __scalb(double, double)

binder: int __fpclassifyf(float)

binder: int __signbitf(float)

binder: int __isinff(float)

binder: int __finitef(float)

binder: int __isnanf(float)

binder: int __iseqsigf(float, float)

binder: int __issignalingf(float)

binder: float acosf(float)

binder: float __acosf(float)

binder: float asinf(float)

binder: float __asinf(float)

binder: float atanf(float)

binder: float __atanf(float)

binder: float atan2f(float, float)

binder: float __atan2f(float, float)

binder: float cosf(float)

binder: float __cosf(float)

binder: float sinf(float)

binder: float __sinf(float)

binder: float tanf(float)

binder: float __tanf(float)

binder: float coshf(float)

binder: float __coshf(float)

binder: float sinhf(float)

binder: float __sinhf(float)

binder: float tanhf(float)

binder: float __tanhf(float)

binder: void sincosf(float, float *, float *)

binder: void __sincosf(float, float *, float *)

binder: float acoshf(float)

binder: float __acoshf(float)

binder: float asinhf(float)

binder: float __asinhf(float)

binder: float atanhf(float)

binder: float __atanhf(float)

binder: float expf(float)

binder: float __expf(float)

binder: float frexpf(float, int *)

binder: float __frexpf(float, int *)

binder: float ldexpf(float, int)

binder: float __ldexpf(float, int)

binder: float logf(float)

binder: float __logf(float)

binder: float log10f(float)

binder: float __log10f(float)

binder: float modff(float, float *)

binder: float __modff(float, float *)

binder: float exp10f(float)

binder: float __exp10f(float)

binder: float expm1f(float)

binder: float __expm1f(float)

binder: float log1pf(float)

binder: float __log1pf(float)

binder: float logbf(float)

binder: float __logbf(float)

binder: float exp2f(float)

binder: float __exp2f(float)

binder: float log2f(float)

binder: float __log2f(float)

binder: float powf(float, float)

binder: float __powf(float, float)

binder: float sqrtf(float)

binder: float __sqrtf(float)

binder: float hypotf(float, float)

binder: float __hypotf(float, float)

binder: float cbrtf(float)

binder: float __cbrtf(float)

binder: float ceilf(float)

binder: float __ceilf(float)

binder: float fabsf(float)

binder: float __fabsf(float)

binder: float floorf(float)

binder: float __floorf(float)

binder: float fmodf(float, float)

binder: float __fmodf(float, float)

binder: int isinff(float)

binder: int finitef(float)

binder: float dremf(float, float)

binder: float __dremf(float, float)

binder: float significandf(float)

binder: float __significandf(float)

binder: float copysignf(float, float)

binder: float __copysignf(float, float)

binder: float nanf(const char *)

binder: float __nanf(const char *)

binder: int isnanf(float)

binder: float j0f(float)

binder: float __j0f(float)

binder: float j1f(float)

binder: float __j1f(float)

binder: float jnf(int, float)

binder: float __jnf(int, float)

binder: float y0f(float)

binder: float __y0f(float)

binder: float y1f(float)

binder: float __y1f(float)

binder: float ynf(int, float)

binder: float __ynf(int, float)

binder: float erff(float)

binder: float __erff(float)

binder: float erfcf(float)

binder: float __erfcf(float)

binder: float lgammaf(float)

binder: float __lgammaf(float)

binder: float tgammaf(float)

binder: float __tgammaf(float)

binder: float gammaf(float)

binder: float __gammaf(float)

binder: float lgammaf_r(float, int *)

binder: float __lgammaf_r(float, int *)

binder: float rintf(float)

binder: float __rintf(float)

binder: float nextafterf(float, float)

binder: float __nextafterf(float, float)

binder: float nexttowardf(float, long double)

binder: float __nexttowardf(float, long double)

binder: float nextdownf(float)

binder: float __nextdownf(float)

binder: float nextupf(float)

binder: float __nextupf(float)

binder: float remainderf(float, float)

binder: float __remainderf(float, float)

binder: float scalbnf(float, int)

binder: float __scalbnf(float, int)

binder: int ilogbf(float)

binder: int __ilogbf(float)

binder: long llogbf(float)

binder: long __llogbf(float)

binder: float scalblnf(float, long)

binder: float __scalblnf(float, long)

binder: float nearbyintf(float)

binder: float __nearbyintf(float)

binder: float roundf(float)

binder: float __roundf(float)

binder: float truncf(float)

binder: float __truncf(float)

binder: float remquof(float, float, int *)

binder: float __remquof(float, float, int *)

binder: long lrintf(float)

binder: long __lrintf(float)

binder: long long llrintf(float)

binder: long long __llrintf(float)

binder: long lroundf(float)

binder: long __lroundf(float)

binder: long long llroundf(float)

binder: long long __llroundf(float)

binder: float fdimf(float, float)

binder: float __fdimf(float, float)

binder: float fmaxf(float, float)

binder: float __fmaxf(float, float)

binder: float fminf(float, float)

binder: float __fminf(float, float)

binder: float fmaf(float, float, float)

binder: float __fmaf(float, float, float)

binder: float roundevenf(float)

binder: float __roundevenf(float)

binder: long fromfpf(float, int, unsigned int)

binder: long __fromfpf(float, int, unsigned int)

binder: unsigned long ufromfpf(float, int, unsigned int)

binder: unsigned long __ufromfpf(float, int, unsigned int)

binder: long fromfpxf(float, int, unsigned int)

binder: long __fromfpxf(float, int, unsigned int)

binder: unsigned long ufromfpxf(float, int, unsigned int)

binder: unsigned long __ufromfpxf(float, int, unsigned int)

binder: float fmaxmagf(float, float)

binder: float __fmaxmagf(float, float)

binder: float fminmagf(float, float)

binder: float __fminmagf(float, float)

binder: int totalorderf(float, float)

binder: int totalordermagf(float, float)

binder: int canonicalizef(float *, const float *)

binder: float getpayloadf(const float *)

binder: float __getpayloadf(const float *)

binder: int setpayloadf(float *, float)

binder: int setpayloadsigf(float *, float)

binder: float scalbf(float, float)

binder: float __scalbf(float, float)

binder: int __fpclassifyl(long double)

binder: int __signbitl(long double)

binder: int __isinfl(long double)

binder: int __finitel(long double)

binder: int __isnanl(long double)

binder: int __iseqsigl(long double, long double)

binder: int __issignalingl(long double)

binder: long double acosl(long double)

binder: long double __acosl(long double)

binder: long double asinl(long double)

binder: long double __asinl(long double)

binder: long double atanl(long double)

binder: long double __atanl(long double)

binder: long double atan2l(long double, long double)

binder: long double __atan2l(long double, long double)

binder: long double cosl(long double)

binder: long double __cosl(long double)

binder: long double sinl(long double)

binder: long double __sinl(long double)

binder: long double tanl(long double)

binder: long double __tanl(long double)

binder: long double coshl(long double)

binder: long double __coshl(long double)

binder: long double sinhl(long double)

binder: long double __sinhl(long double)

binder: long double tanhl(long double)

binder: long double __tanhl(long double)

binder: void sincosl(long double, long double *, long double *)

binder: void __sincosl(long double, long double *, long double *)

binder: long double acoshl(long double)

binder: long double __acoshl(long double)

binder: long double asinhl(long double)

binder: long double __asinhl(long double)

binder: long double atanhl(long double)

binder: long double __atanhl(long double)

binder: long double expl(long double)

binder: long double __expl(long double)

binder: long double frexpl(long double, int *)

binder: long double __frexpl(long double, int *)

binder: long double ldexpl(long double, int)

binder: long double __ldexpl(long double, int)

binder: long double logl(long double)

binder: long double __logl(long double)

binder: long double log10l(long double)

binder: long double __log10l(long double)

binder: long double modfl(long double, long double *)

binder: long double __modfl(long double, long double *)

binder: long double exp10l(long double)

binder: long double __exp10l(long double)

binder: long double expm1l(long double)

binder: long double __expm1l(long double)

binder: long double log1pl(long double)

binder: long double __log1pl(long double)

binder: long double logbl(long double)

binder: long double __logbl(long double)

binder: long double exp2l(long double)

binder: long double __exp2l(long double)

binder: long double log2l(long double)

binder: long double __log2l(long double)

binder: long double powl(long double, long double)

binder: long double __powl(long double, long double)

binder: long double sqrtl(long double)

binder: long double __sqrtl(long double)

binder: long double hypotl(long double, long double)

binder: long double __hypotl(long double, long double)

binder: long double cbrtl(long double)

binder: long double __cbrtl(long double)

binder: long double ceill(long double)

binder: long double __ceill(long double)

binder: long double fabsl(long double)

binder: long double __fabsl(long double)

binder: long double floorl(long double)

binder: long double __floorl(long double)

binder: long double fmodl(long double, long double)

binder: long double __fmodl(long double, long double)

binder: int isinfl(long double)

binder: int finitel(long double)

binder: long double dreml(long double, long double)

binder: long double __dreml(long double, long double)

binder: long double significandl(long double)

binder: long double __significandl(long double)

binder: long double copysignl(long double, long double)

binder: long double __copysignl(long double, long double)

binder: long double nanl(const char *)

binder: long double __nanl(const char *)

binder: int isnanl(long double)

binder: long double j0l(long double)

binder: long double __j0l(long double)

binder: long double j1l(long double)

binder: long double __j1l(long double)

binder: long double jnl(int, long double)

binder: long double __jnl(int, long double)

binder: long double y0l(long double)

binder: long double __y0l(long double)

binder: long double y1l(long double)

binder: long double __y1l(long double)

binder: long double ynl(int, long double)

binder: long double __ynl(int, long double)

binder: long double erfl(long double)

binder: long double __erfl(long double)

binder: long double erfcl(long double)

binder: long double __erfcl(long double)

binder: long double lgammal(long double)

binder: long double __lgammal(long double)

binder: long double tgammal(long double)

binder: long double __tgammal(long double)

binder: long double gammal(long double)

binder: long double __gammal(long double)

binder: long double lgammal_r(long double, int *)

binder: long double __lgammal_r(long double, int *)

binder: long double rintl(long double)

binder: long double __rintl(long double)

binder: long double nextafterl(long double, long double)

binder: long double __nextafterl(long double, long double)

binder: long double nexttowardl(long double, long double)

binder: long double __nexttowardl(long double, long double)

binder: long double nextdownl(long double)

binder: long double __nextdownl(long double)

binder: long double nextupl(long double)

binder: long double __nextupl(long double)

binder: long double remainderl(long double, long double)

binder: long double __remainderl(long double, long double)

binder: long double scalbnl(long double, int)

binder: long double __scalbnl(long double, int)

binder: int ilogbl(long double)

binder: int __ilogbl(long double)

binder: long llogbl(long double)

binder: long __llogbl(long double)

binder: long double scalblnl(long double, long)

binder: long double __scalblnl(long double, long)

binder: long double nearbyintl(long double)

binder: long double __nearbyintl(long double)

binder: long double roundl(long double)

binder: long double __roundl(long double)

binder: long double truncl(long double)

binder: long double __truncl(long double)

binder: long double remquol(long double, long double, int *)

binder: long double __remquol(long double, long double, int *)

binder: long lrintl(long double)

binder: long __lrintl(long double)

binder: long long llrintl(long double)

binder: long long __llrintl(long double)

binder: long lroundl(long double)

binder: long __lroundl(long double)

binder: long long llroundl(long double)

binder: long long __llroundl(long double)

binder: long double fdiml(long double, long double)

binder: long double __fdiml(long double, long double)

binder: long double fmaxl(long double, long double)

binder: long double __fmaxl(long double, long double)

binder: long double fminl(long double, long double)

binder: long double __fminl(long double, long double)

binder: long double fmal(long double, long double, long double)

binder: long double __fmal(long double, long double, long double)

binder: long double roundevenl(long double)

binder: long double __roundevenl(long double)

binder: long fromfpl(long double, int, unsigned int)

binder: long __fromfpl(long double, int, unsigned int)

binder: unsigned long ufromfpl(long double, int, unsigned int)

binder: unsigned long __ufromfpl(long double, int, unsigned int)

binder: long fromfpxl(long double, int, unsigned int)

binder: long __fromfpxl(long double, int, unsigned int)

binder: unsigned long ufromfpxl(long double, int, unsigned int)

binder: unsigned long __ufromfpxl(long double, int, unsigned int)

binder: long double fmaxmagl(long double, long double)

binder: long double __fmaxmagl(long double, long double)

binder: long double fminmagl(long double, long double)

binder: long double __fminmagl(long double, long double)

binder: int totalorderl(long double, long double)

binder: int totalordermagl(long double, long double)

binder: int canonicalizel(long double *, const long double *)

binder: long double getpayloadl(const long double *)

binder: long double __getpayloadl(const long double *)

binder: int setpayloadl(long double *, long double)

binder: int setpayloadsigl(long double *, long double)

binder: long double scalbl(long double, long double)

binder: long double __scalbl(long double, long double)

binder: float acosf32(float)

binder: float __acosf32(float)

binder: float asinf32(float)

binder: float __asinf32(float)

binder: float atanf32(float)

binder: float __atanf32(float)

binder: float atan2f32(float, float)

binder: float __atan2f32(float, float)

binder: float cosf32(float)

binder: float __cosf32(float)

binder: float sinf32(float)

binder: float __sinf32(float)

binder: float tanf32(float)

binder: float __tanf32(float)

binder: float coshf32(float)

binder: float __coshf32(float)

binder: float sinhf32(float)

binder: float __sinhf32(float)

binder: float tanhf32(float)

binder: float __tanhf32(float)

binder: void sincosf32(float, float *, float *)

binder: void __sincosf32(float, float *, float *)

binder: float acoshf32(float)

binder: float __acoshf32(float)

binder: float asinhf32(float)

binder: float __asinhf32(float)

binder: float atanhf32(float)

binder: float __atanhf32(float)

binder: float expf32(float)

binder: float __expf32(float)

binder: float frexpf32(float, int *)

binder: float __frexpf32(float, int *)

binder: float ldexpf32(float, int)

binder: float __ldexpf32(float, int)

binder: float logf32(float)

binder: float __logf32(float)

binder: float log10f32(float)

binder: float __log10f32(float)

binder: float modff32(float, float *)

binder: float __modff32(float, float *)

binder: float exp10f32(float)

binder: float __exp10f32(float)

binder: float expm1f32(float)

binder: float __expm1f32(float)

binder: float log1pf32(float)

binder: float __log1pf32(float)

binder: float logbf32(float)

binder: float __logbf32(float)

binder: float exp2f32(float)

binder: float __exp2f32(float)

binder: float log2f32(float)

binder: float __log2f32(float)

binder: float powf32(float, float)

binder: float __powf32(float, float)

binder: float sqrtf32(float)

binder: float __sqrtf32(float)

binder: float hypotf32(float, float)

binder: float __hypotf32(float, float)

binder: float cbrtf32(float)

binder: float __cbrtf32(float)

binder: float ceilf32(float)

binder: float __ceilf32(float)

binder: float fabsf32(float)

binder: float __fabsf32(float)

binder: float floorf32(float)

binder: float __floorf32(float)

binder: float fmodf32(float, float)

binder: float __fmodf32(float, float)

binder: float copysignf32(float, float)

binder: float __copysignf32(float, float)

binder: float nanf32(const char *)

binder: float __nanf32(const char *)

binder: float j0f32(float)

binder: float __j0f32(float)

binder: float j1f32(float)

binder: float __j1f32(float)

binder: float jnf32(int, float)

binder: float __jnf32(int, float)

binder: float y0f32(float)

binder: float __y0f32(float)

binder: float y1f32(float)

binder: float __y1f32(float)

binder: float ynf32(int, float)

binder: float __ynf32(int, float)

binder: float erff32(float)

binder: float __erff32(float)

binder: float erfcf32(float)

binder: float __erfcf32(float)

binder: float lgammaf32(float)

binder: float __lgammaf32(float)

binder: float tgammaf32(float)

binder: float __tgammaf32(float)

binder: float lgammaf32_r(float, int *)

binder: float __lgammaf32_r(float, int *)

binder: float rintf32(float)

binder: float __rintf32(float)

binder: float nextafterf32(float, float)

binder: float __nextafterf32(float, float)

binder: float nextdownf32(float)

binder: float __nextdownf32(float)

binder: float nextupf32(float)

binder: float __nextupf32(float)

binder: float remainderf32(float, float)

binder: float __remainderf32(float, float)

binder: float scalbnf32(float, int)

binder: float __scalbnf32(float, int)

binder: int ilogbf32(float)

binder: int __ilogbf32(float)

binder: long llogbf32(float)

binder: long __llogbf32(float)

binder: float scalblnf32(float, long)

binder: float __scalblnf32(float, long)

binder: float nearbyintf32(float)

binder: float __nearbyintf32(float)

binder: float roundf32(float)

binder: float __roundf32(float)

binder: float truncf32(float)

binder: float __truncf32(float)

binder: float remquof32(float, float, int *)

binder: float __remquof32(float, float, int *)

binder: long lrintf32(float)

binder: long __lrintf32(float)

binder: long long llrintf32(float)

binder: long long __llrintf32(float)

binder: long lroundf32(float)

binder: long __lroundf32(float)

binder: long long llroundf32(float)

binder: long long __llroundf32(float)

binder: float fdimf32(float, float)

binder: float __fdimf32(float, float)

binder: float fmaxf32(float, float)

binder: float __fmaxf32(float, float)

binder: float fminf32(float, float)

binder: float __fminf32(float, float)

binder: float fmaf32(float, float, float)

binder: float __fmaf32(float, float, float)

binder: float roundevenf32(float)

binder: float __roundevenf32(float)

binder: long fromfpf32(float, int, unsigned int)

binder: long __fromfpf32(float, int, unsigned int)

binder: unsigned long ufromfpf32(float, int, unsigned int)

binder: unsigned long __ufromfpf32(float, int, unsigned int)

binder: long fromfpxf32(float, int, unsigned int)

binder: long __fromfpxf32(float, int, unsigned int)

binder: unsigned long ufromfpxf32(float, int, unsigned int)

binder: unsigned long __ufromfpxf32(float, int, unsigned int)

binder: float fmaxmagf32(float, float)

binder: float __fmaxmagf32(float, float)

binder: float fminmagf32(float, float)

binder: float __fminmagf32(float, float)

binder: int totalorderf32(float, float)

binder: int totalordermagf32(float, float)

binder: int canonicalizef32(float *, const float *)

binder: float getpayloadf32(const float *)

binder: float __getpayloadf32(const float *)

binder: int setpayloadf32(float *, float)

binder: int setpayloadsigf32(float *, float)

binder: double acosf64(double)

binder: double __acosf64(double)

binder: double asinf64(double)

binder: double __asinf64(double)

binder: double atanf64(double)

binder: double __atanf64(double)

binder: double atan2f64(double, double)

binder: double __atan2f64(double, double)

binder: double cosf64(double)

binder: double __cosf64(double)

binder: double sinf64(double)

binder: double __sinf64(double)

binder: double tanf64(double)

binder: double __tanf64(double)

binder: double coshf64(double)

binder: double __coshf64(double)

binder: double sinhf64(double)

binder: double __sinhf64(double)

binder: double tanhf64(double)

binder: double __tanhf64(double)

binder: void sincosf64(double, double *, double *)

binder: void __sincosf64(double, double *, double *)

binder: double acoshf64(double)

binder: double __acoshf64(double)

binder: double asinhf64(double)

binder: double __asinhf64(double)

binder: double atanhf64(double)

binder: double __atanhf64(double)

binder: double expf64(double)

binder: double __expf64(double)

binder: double frexpf64(double, int *)

binder: double __frexpf64(double, int *)

binder: double ldexpf64(double, int)

binder: double __ldexpf64(double, int)

binder: double logf64(double)

binder: double __logf64(double)

binder: double log10f64(double)

binder: double __log10f64(double)

binder: double modff64(double, double *)

binder: double __modff64(double, double *)

binder: double exp10f64(double)

binder: double __exp10f64(double)

binder: double expm1f64(double)

binder: double __expm1f64(double)

binder: double log1pf64(double)

binder: double __log1pf64(double)

binder: double logbf64(double)

binder: double __logbf64(double)

binder: double exp2f64(double)

binder: double __exp2f64(double)

binder: double log2f64(double)

binder: double __log2f64(double)

binder: double powf64(double, double)

binder: double __powf64(double, double)

binder: double sqrtf64(double)

binder: double __sqrtf64(double)

binder: double hypotf64(double, double)

binder: double __hypotf64(double, double)

binder: double cbrtf64(double)

binder: double __cbrtf64(double)

binder: double ceilf64(double)

binder: double __ceilf64(double)

binder: double fabsf64(double)

binder: double __fabsf64(double)

binder: double floorf64(double)

binder: double __floorf64(double)

binder: double fmodf64(double, double)

binder: double __fmodf64(double, double)

binder: double copysignf64(double, double)

binder: double __copysignf64(double, double)

binder: double nanf64(const char *)

binder: double __nanf64(const char *)

binder: double j0f64(double)

binder: double __j0f64(double)

binder: double j1f64(double)

binder: double __j1f64(double)

binder: double jnf64(int, double)

binder: double __jnf64(int, double)

binder: double y0f64(double)

binder: double __y0f64(double)

binder: double y1f64(double)

binder: double __y1f64(double)

binder: double ynf64(int, double)

binder: double __ynf64(int, double)

binder: double erff64(double)

binder: double __erff64(double)

binder: double erfcf64(double)

binder: double __erfcf64(double)

binder: double lgammaf64(double)

binder: double __lgammaf64(double)

binder: double tgammaf64(double)

binder: double __tgammaf64(double)

binder: double lgammaf64_r(double, int *)

binder: double __lgammaf64_r(double, int *)

binder: double rintf64(double)

binder: double __rintf64(double)

binder: double nextafterf64(double, double)

binder: double __nextafterf64(double, double)

binder: double nextdownf64(double)

binder: double __nextdownf64(double)

binder: double nextupf64(double)

binder: double __nextupf64(double)

binder: double remainderf64(double, double)

binder: double __remainderf64(double, double)

binder: double scalbnf64(double, int)

binder: double __scalbnf64(double, int)

binder: int ilogbf64(double)

binder: int __ilogbf64(double)

binder: long llogbf64(double)

binder: long __llogbf64(double)

binder: double scalblnf64(double, long)

binder: double __scalblnf64(double, long)

binder: double nearbyintf64(double)

binder: double __nearbyintf64(double)

binder: double roundf64(double)

binder: double __roundf64(double)

binder: double truncf64(double)

binder: double __truncf64(double)

binder: double remquof64(double, double, int *)

binder: double __remquof64(double, double, int *)

binder: long lrintf64(double)

binder: long __lrintf64(double)

binder: long long llrintf64(double)

binder: long long __llrintf64(double)

binder: long lroundf64(double)

binder: long __lroundf64(double)

binder: long long llroundf64(double)

binder: long long __llroundf64(double)

binder: double fdimf64(double, double)

binder: double __fdimf64(double, double)

binder: double fmaxf64(double, double)

binder: double __fmaxf64(double, double)

binder: double fminf64(double, double)

binder: double __fminf64(double, double)

binder: double fmaf64(double, double, double)

binder: double __fmaf64(double, double, double)

binder: double roundevenf64(double)

binder: double __roundevenf64(double)

binder: long fromfpf64(double, int, unsigned int)

binder: long __fromfpf64(double, int, unsigned int)

binder: unsigned long ufromfpf64(double, int, unsigned int)

binder: unsigned long __ufromfpf64(double, int, unsigned int)

binder: long fromfpxf64(double, int, unsigned int)

binder: long __fromfpxf64(double, int, unsigned int)

binder: unsigned long ufromfpxf64(double, int, unsigned int)

binder: unsigned long __ufromfpxf64(double, int, unsigned int)

binder: double fmaxmagf64(double, double)

binder: double __fmaxmagf64(double, double)

binder: double fminmagf64(double, double)

binder: double __fminmagf64(double, double)

binder: int totalorderf64(double, double)

binder: int totalordermagf64(double, double)

binder: int canonicalizef64(double *, const double *)

binder: double getpayloadf64(const double *)

binder: double __getpayloadf64(const double *)

binder: int setpayloadf64(double *, double)

binder: int setpayloadsigf64(double *, double)

binder: double acosf32x(double)

binder: double __acosf32x(double)

binder: double asinf32x(double)

binder: double __asinf32x(double)

binder: double atanf32x(double)

binder: double __atanf32x(double)

binder: double atan2f32x(double, double)

binder: double __atan2f32x(double, double)

binder: double cosf32x(double)

binder: double __cosf32x(double)

binder: double sinf32x(double)

binder: double __sinf32x(double)

binder: double tanf32x(double)

binder: double __tanf32x(double)

binder: double coshf32x(double)

binder: double __coshf32x(double)

binder: double sinhf32x(double)

binder: double __sinhf32x(double)

binder: double tanhf32x(double)

binder: double __tanhf32x(double)

binder: void sincosf32x(double, double *, double *)

binder: void __sincosf32x(double, double *, double *)

binder: double acoshf32x(double)

binder: double __acoshf32x(double)

binder: double asinhf32x(double)

binder: double __asinhf32x(double)

binder: double atanhf32x(double)

binder: double __atanhf32x(double)

binder: double expf32x(double)

binder: double __expf32x(double)

binder: double frexpf32x(double, int *)

binder: double __frexpf32x(double, int *)

binder: double ldexpf32x(double, int)

binder: double __ldexpf32x(double, int)

binder: double logf32x(double)

binder: double __logf32x(double)

binder: double log10f32x(double)

binder: double __log10f32x(double)

binder: double modff32x(double, double *)

binder: double __modff32x(double, double *)

binder: double exp10f32x(double)

binder: double __exp10f32x(double)

binder: double expm1f32x(double)

binder: double __expm1f32x(double)

binder: double log1pf32x(double)

binder: double __log1pf32x(double)

binder: double logbf32x(double)

binder: double __logbf32x(double)

binder: double exp2f32x(double)

binder: double __exp2f32x(double)

binder: double log2f32x(double)

binder: double __log2f32x(double)

binder: double powf32x(double, double)

binder: double __powf32x(double, double)

binder: double sqrtf32x(double)

binder: double __sqrtf32x(double)

binder: double hypotf32x(double, double)

binder: double __hypotf32x(double, double)

binder: double cbrtf32x(double)

binder: double __cbrtf32x(double)

binder: double ceilf32x(double)

binder: double __ceilf32x(double)

binder: double fabsf32x(double)

binder: double __fabsf32x(double)

binder: double floorf32x(double)

binder: double __floorf32x(double)

binder: double fmodf32x(double, double)

binder: double __fmodf32x(double, double)

binder: double copysignf32x(double, double)

binder: double __copysignf32x(double, double)

binder: double nanf32x(const char *)

binder: double __nanf32x(const char *)

binder: double j0f32x(double)

binder: double __j0f32x(double)

binder: double j1f32x(double)

binder: double __j1f32x(double)

binder: double jnf32x(int, double)

binder: double __jnf32x(int, double)

binder: double y0f32x(double)

binder: double __y0f32x(double)

binder: double y1f32x(double)

binder: double __y1f32x(double)

binder: double ynf32x(int, double)

binder: double __ynf32x(int, double)

binder: double erff32x(double)

binder: double __erff32x(double)

binder: double erfcf32x(double)

binder: double __erfcf32x(double)

binder: double lgammaf32x(double)

binder: double __lgammaf32x(double)

binder: double tgammaf32x(double)

binder: double __tgammaf32x(double)

binder: double lgammaf32x_r(double, int *)

binder: double __lgammaf32x_r(double, int *)

binder: double rintf32x(double)

binder: double __rintf32x(double)

binder: double nextafterf32x(double, double)

binder: double __nextafterf32x(double, double)

binder: double nextdownf32x(double)

binder: double __nextdownf32x(double)

binder: double nextupf32x(double)

binder: double __nextupf32x(double)

binder: double remainderf32x(double, double)

binder: double __remainderf32x(double, double)

binder: double scalbnf32x(double, int)

binder: double __scalbnf32x(double, int)

binder: int ilogbf32x(double)

binder: int __ilogbf32x(double)

binder: long llogbf32x(double)

binder: long __llogbf32x(double)

binder: double scalblnf32x(double, long)

binder: double __scalblnf32x(double, long)

binder: double nearbyintf32x(double)

binder: double __nearbyintf32x(double)

binder: double roundf32x(double)

binder: double __roundf32x(double)

binder: double truncf32x(double)

binder: double __truncf32x(double)

binder: double remquof32x(double, double, int *)

binder: double __remquof32x(double, double, int *)

binder: long lrintf32x(double)

binder: long __lrintf32x(double)

binder: long long llrintf32x(double)

binder: long long __llrintf32x(double)

binder: long lroundf32x(double)

binder: long __lroundf32x(double)

binder: long long llroundf32x(double)

binder: long long __llroundf32x(double)

binder: double fdimf32x(double, double)

binder: double __fdimf32x(double, double)

binder: double fmaxf32x(double, double)

binder: double __fmaxf32x(double, double)

binder: double fminf32x(double, double)

binder: double __fminf32x(double, double)

binder: double fmaf32x(double, double, double)

binder: double __fmaf32x(double, double, double)

binder: double roundevenf32x(double)

binder: double __roundevenf32x(double)

binder: long fromfpf32x(double, int, unsigned int)

binder: long __fromfpf32x(double, int, unsigned int)

binder: unsigned long ufromfpf32x(double, int, unsigned int)

binder: unsigned long __ufromfpf32x(double, int, unsigned int)

binder: long fromfpxf32x(double, int, unsigned int)

binder: long __fromfpxf32x(double, int, unsigned int)

binder: unsigned long ufromfpxf32x(double, int, unsigned int)

binder: unsigned long __ufromfpxf32x(double, int, unsigned int)

binder: double fmaxmagf32x(double, double)

binder: double __fmaxmagf32x(double, double)

binder: double fminmagf32x(double, double)

binder: double __fminmagf32x(double, double)

binder: int totalorderf32x(double, double)

binder: int totalordermagf32x(double, double)

binder: int canonicalizef32x(double *, const double *)

binder: double getpayloadf32x(const double *)

binder: double __getpayloadf32x(const double *)

binder: int setpayloadf32x(double *, double)

binder: int setpayloadsigf32x(double *, double)

binder: long double acosf64x(long double)

binder: long double __acosf64x(long double)

binder: long double asinf64x(long double)

binder: long double __asinf64x(long double)

binder: long double atanf64x(long double)

binder: long double __atanf64x(long double)

binder: long double atan2f64x(long double, long double)

binder: long double __atan2f64x(long double, long double)

binder: long double cosf64x(long double)

binder: long double __cosf64x(long double)

binder: long double sinf64x(long double)

binder: long double __sinf64x(long double)

binder: long double tanf64x(long double)

binder: long double __tanf64x(long double)

binder: long double coshf64x(long double)

binder: long double __coshf64x(long double)

binder: long double sinhf64x(long double)

binder: long double __sinhf64x(long double)

binder: long double tanhf64x(long double)

binder: long double __tanhf64x(long double)

binder: void sincosf64x(long double, long double *, long double *)

binder: void __sincosf64x(long double, long double *, long double *)

binder: long double acoshf64x(long double)

binder: long double __acoshf64x(long double)

binder: long double asinhf64x(long double)

binder: long double __asinhf64x(long double)

binder: long double atanhf64x(long double)

binder: long double __atanhf64x(long double)

binder: long double expf64x(long double)

binder: long double __expf64x(long double)

binder: long double frexpf64x(long double, int *)

binder: long double __frexpf64x(long double, int *)

binder: long double ldexpf64x(long double, int)

binder: long double __ldexpf64x(long double, int)

binder: long double logf64x(long double)

binder: long double __logf64x(long double)

binder: long double log10f64x(long double)

binder: long double __log10f64x(long double)

binder: long double modff64x(long double, long double *)

binder: long double __modff64x(long double, long double *)

binder: long double exp10f64x(long double)

binder: long double __exp10f64x(long double)

binder: long double expm1f64x(long double)

binder: long double __expm1f64x(long double)

binder: long double log1pf64x(long double)

binder: long double __log1pf64x(long double)

binder: long double logbf64x(long double)

binder: long double __logbf64x(long double)

binder: long double exp2f64x(long double)

binder: long double __exp2f64x(long double)

binder: long double log2f64x(long double)

binder: long double __log2f64x(long double)

binder: long double powf64x(long double, long double)

binder: long double __powf64x(long double, long double)

binder: long double sqrtf64x(long double)

binder: long double __sqrtf64x(long double)

binder: long double hypotf64x(long double, long double)

binder: long double __hypotf64x(long double, long double)

binder: long double cbrtf64x(long double)

binder: long double __cbrtf64x(long double)

binder: long double ceilf64x(long double)

binder: long double __ceilf64x(long double)

binder: long double fabsf64x(long double)

binder: long double __fabsf64x(long double)

binder: long double floorf64x(long double)

binder: long double __floorf64x(long double)

binder: long double fmodf64x(long double, long double)

binder: long double __fmodf64x(long double, long double)

binder: long double copysignf64x(long double, long double)

binder: long double __copysignf64x(long double, long double)

binder: long double nanf64x(const char *)

binder: long double __nanf64x(const char *)

binder: long double j0f64x(long double)

binder: long double __j0f64x(long double)

binder: long double j1f64x(long double)

binder: long double __j1f64x(long double)

binder: long double jnf64x(int, long double)

binder: long double __jnf64x(int, long double)

binder: long double y0f64x(long double)

binder: long double __y0f64x(long double)

binder: long double y1f64x(long double)

binder: long double __y1f64x(long double)

binder: long double ynf64x(int, long double)

binder: long double __ynf64x(int, long double)

binder: long double erff64x(long double)

binder: long double __erff64x(long double)

binder: long double erfcf64x(long double)

binder: long double __erfcf64x(long double)

binder: long double lgammaf64x(long double)

binder: long double __lgammaf64x(long double)

binder: long double tgammaf64x(long double)

binder: long double __tgammaf64x(long double)

binder: long double lgammaf64x_r(long double, int *)

binder: long double __lgammaf64x_r(long double, int *)

binder: long double rintf64x(long double)

binder: long double __rintf64x(long double)

binder: long double nextafterf64x(long double, long double)

binder: long double __nextafterf64x(long double, long double)

binder: long double nextdownf64x(long double)

binder: long double __nextdownf64x(long double)

binder: long double nextupf64x(long double)

binder: long double __nextupf64x(long double)

binder: long double remainderf64x(long double, long double)

binder: long double __remainderf64x(long double, long double)

binder: long double scalbnf64x(long double, int)

binder: long double __scalbnf64x(long double, int)

binder: int ilogbf64x(long double)

binder: int __ilogbf64x(long double)

binder: long llogbf64x(long double)

binder: long __llogbf64x(long double)

binder: long double scalblnf64x(long double, long)

binder: long double __scalblnf64x(long double, long)

binder: long double nearbyintf64x(long double)

binder: long double __nearbyintf64x(long double)

binder: long double roundf64x(long double)

binder: long double __roundf64x(long double)

binder: long double truncf64x(long double)

binder: long double __truncf64x(long double)

binder: long double remquof64x(long double, long double, int *)

binder: long double __remquof64x(long double, long double, int *)

binder: long lrintf64x(long double)

binder: long __lrintf64x(long double)

binder: long long llrintf64x(long double)

binder: long long __llrintf64x(long double)

binder: long lroundf64x(long double)

binder: long __lroundf64x(long double)

binder: long long llroundf64x(long double)

binder: long long __llroundf64x(long double)

binder: long double fdimf64x(long double, long double)

binder: long double __fdimf64x(long double, long double)

binder: long double fmaxf64x(long double, long double)

binder: long double __fmaxf64x(long double, long double)

binder: long double fminf64x(long double, long double)

binder: long double __fminf64x(long double, long double)

binder: long double fmaf64x(long double, long double, long double)

binder: long double __fmaf64x(long double, long double, long double)

binder: long double roundevenf64x(long double)

binder: long double __roundevenf64x(long double)

binder: long fromfpf64x(long double, int, unsigned int)

binder: long __fromfpf64x(long double, int, unsigned int)

binder: unsigned long ufromfpf64x(long double, int, unsigned int)

binder: unsigned long __ufromfpf64x(long double, int, unsigned int)

binder: long fromfpxf64x(long double, int, unsigned int)

binder: long __fromfpxf64x(long double, int, unsigned int)

binder: unsigned long ufromfpxf64x(long double, int, unsigned int)

binder: unsigned long __ufromfpxf64x(long double, int, unsigned int)

binder: long double fmaxmagf64x(long double, long double)

binder: long double __fmaxmagf64x(long double, long double)

binder: long double fminmagf64x(long double, long double)

binder: long double __fminmagf64x(long double, long double)

binder: int totalorderf64x(long double, long double)

binder: int totalordermagf64x(long double, long double)

binder: int canonicalizef64x(long double *, const long double *)

binder: long double getpayloadf64x(const long double *)

binder: long double __getpayloadf64x(const long double *)

binder: int setpayloadf64x(long double *, long double)

binder: int setpayloadsigf64x(long double *, long double)

binder: int __iscanonicall(long double)

binder: int iscanonical(float)

binder: int iscanonical(double)

binder: int iscanonical(long double)

binder: int issignaling(float)

binder: int issignaling(double)

binder: int issignaling(long double)

binder: __iseqsig_type<float>

binder: __iseqsig_type<double>

binder: __iseqsig_type<long double>

binder: float std::acos(float)

binder: long double std::acos(long double)

binder: float std::asin(float)

binder: long double std::asin(long double)

binder: float std::atan(float)

binder: long double std::atan(long double)

binder: float std::atan2(float, float)

binder: long double std::atan2(long double, long double)

binder: float std::ceil(float)

binder: long double std::ceil(long double)

binder: float std::cos(float)

binder: long double std::cos(long double)

binder: float std::cosh(float)

binder: long double std::cosh(long double)

binder: float std::exp(float)

binder: long double std::exp(long double)

binder: float std::fabs(float)

binder: long double std::fabs(long double)

binder: float std::floor(float)

binder: long double std::floor(long double)

binder: float std::fmod(float, float)

binder: long double std::fmod(long double, long double)

binder: float std::frexp(float, int *)

binder: long double std::frexp(long double, int *)

binder: float std::ldexp(float, int)

binder: long double std::ldexp(long double, int)

binder: float std::log(float)

binder: long double std::log(long double)

binder: float std::log10(float)

binder: long double std::log10(long double)

binder: float std::modf(float, float *)

binder: long double std::modf(long double, long double *)

binder: float std::pow(float, float)

binder: long double std::pow(long double, long double)

binder: float std::sin(float)

binder: long double std::sin(long double)

binder: float std::sinh(float)

binder: long double std::sinh(long double)

binder: float std::sqrt(float)

binder: long double std::sqrt(long double)

binder: float std::tan(float)

binder: long double std::tan(long double)

binder: float std::tanh(float)

binder: long double std::tanh(long double)

binder: int std::fpclassify(float)

binder: int std::fpclassify(double)

binder: int std::fpclassify(long double)

binder: bool std::isfinite(float)

binder: bool std::isfinite(double)

binder: bool std::isfinite(long double)

binder: bool std::isinf(float)

binder: bool std::isinf(double)

binder: bool std::isinf(long double)

binder: bool std::isnan(float)

binder: bool std::isnan(double)

binder: bool std::isnan(long double)

binder: bool std::isnormal(float)

binder: bool std::isnormal(double)

binder: bool std::isnormal(long double)

binder: bool std::signbit(float)

binder: bool std::signbit(double)

binder: bool std::signbit(long double)

binder: bool std::isgreater(float, float)

binder: bool std::isgreater(double, double)

binder: bool std::isgreater(long double, long double)

binder: bool std::isgreaterequal(float, float)

binder: bool std::isgreaterequal(double, double)

binder: bool std::isgreaterequal(long double, long double)

binder: bool std::isless(float, float)

binder: bool std::isless(double, double)

binder: bool std::isless(long double, long double)

binder: bool std::islessequal(float, float)

binder: bool std::islessequal(double, double)

binder: bool std::islessequal(long double, long double)

binder: bool std::islessgreater(float, float)

binder: bool std::islessgreater(double, double)

binder: bool std::islessgreater(long double, long double)

binder: bool std::isunordered(float, float)

binder: bool std::isunordered(double, double)

binder: bool std::isunordered(long double, long double)

binder: float std::acosh(float)

binder: long double std::acosh(long double)

binder: float std::asinh(float)

binder: long double std::asinh(long double)

binder: float std::atanh(float)

binder: long double std::atanh(long double)

binder: float std::cbrt(float)

binder: long double std::cbrt(long double)

binder: float std::copysign(float, float)

binder: long double std::copysign(long double, long double)

binder: float std::erf(float)

binder: long double std::erf(long double)

binder: float std::erfc(float)

binder: long double std::erfc(long double)

binder: float std::exp2(float)

binder: long double std::exp2(long double)

binder: float std::expm1(float)

binder: long double std::expm1(long double)

binder: float std::fdim(float, float)

binder: long double std::fdim(long double, long double)

binder: float std::fma(float, float, float)

binder: long double std::fma(long double, long double, long double)

binder: float std::fmax(float, float)

binder: long double std::fmax(long double, long double)

binder: float std::fmin(float, float)

binder: long double std::fmin(long double, long double)

binder: float std::hypot(float, float)

binder: long double std::hypot(long double, long double)

binder: int std::ilogb(float)

binder: int std::ilogb(long double)

binder: float std::lgamma(float)

binder: long double std::lgamma(long double)

binder: long long std::llrint(float)

binder: long long std::llrint(long double)

binder: long long std::llround(float)

binder: long long std::llround(long double)

binder: float std::log1p(float)

binder: long double std::log1p(long double)

binder: float std::log2(float)

binder: long double std::log2(long double)

binder: float std::logb(float)

binder: long double std::logb(long double)

binder: long std::lrint(float)

binder: long std::lrint(long double)

binder: long std::lround(float)

binder: long std::lround(long double)

binder: float std::nearbyint(float)

binder: long double std::nearbyint(long double)

binder: float std::nextafter(float, float)

binder: long double std::nextafter(long double, long double)

binder: float std::nexttoward(float, long double)

binder: long double std::nexttoward(long double, long double)

binder: float std::remainder(float, float)

binder: long double std::remainder(long double, long double)

binder: float std::remquo(float, float, int *)

binder: long double std::remquo(long double, long double, int *)

binder: float std::rint(float)

binder: long double std::rint(long double)

binder: float std::round(float)

binder: long double std::round(long double)

binder: float std::scalbln(float, long)

binder: long double std::scalbln(long double, long)

binder: float std::scalbn(float, int)

binder: long double std::scalbn(long double, int)

binder: float std::tgamma(float)

binder: long double std::tgamma(long double)

binder: float std::trunc(float)

binder: long double std::trunc(long double)

binder: mmtf::DecodeError
	{ // mmtf::DecodeError file:mmtf/errors.hpp line:23
		pybind11::class_<mmtf::DecodeError, std::shared_ptr<mmtf::DecodeError>, PyCallBack_mmtf_DecodeError, std::runtime_error> cl(M("mmtf"), "DecodeError", "Exception thrown when failing during decoding.");
		pybind11::handle cl_type = cl;

		cl.def( pybind11::init<const std::string &>(), pybind11::arg("m") );

		cl.def( pybind11::init( [](PyCallBack_mmtf_DecodeError const &o){ return new PyCallBack_mmtf_DecodeError(o); } ) );
		cl.def( pybind11::init( [](mmtf::DecodeError const &o){ return new mmtf::DecodeError(o); } ) );
		cl.def("assign", (class mmtf::DecodeError & (mmtf::DecodeError::*)(const class mmtf::DecodeError &)) &mmtf::DecodeError::operator=, "C++: mmtf::DecodeError::operator=(const class mmtf::DecodeError &) --> class mmtf::DecodeError &", pybind11::return_value_policy::automatic, pybind11::arg(""));
	}

binder: std::stringbuf

binder: std::istringstream

binder: std::ostringstream

binder: std::stringstream

binder: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>

binder: std::basic_istringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>

binder: std::basic_ostringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>

binder: std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>

binder: class std::__cxx11::basic_string<char> mmtf::getVersionString()
	// mmtf::getVersionString() file:mmtf/structure_data.hpp line:40
	M("mmtf").def("getVersionString", (std::string (*)()) &mmtf::getVersionString, "Get string representation of MMTF spec version implemented here\n\nC++: mmtf::getVersionString() --> std::string");


binder: int mmtf::encodeToMap(const struct mmtf::StructureData &, int &, int, int, int)
	// mmtf::encodeToMap(const struct mmtf::StructureData &, int &, int, int, int) file:mmtf/encoder.hpp line:64
	M("mmtf").def("encodeToMap", [](const struct mmtf::StructureData & a0, int & a1) -> int { return mmtf::encodeToMap(a0, a1); }, "", pybind11::arg("data"), pybind11::arg("m_zone"));
	M("mmtf").def("encodeToMap", [](const struct mmtf::StructureData & a0, int & a1, int const & a2) -> int { return mmtf::encodeToMap(a0, a1, a2); }, "", pybind11::arg("data"), pybind11::arg("m_zone"), pybind11::arg("coord_divider"));
	M("mmtf").def("encodeToMap", [](const struct mmtf::StructureData & a0, int & a1, int const & a2, int const & a3) -> int { return mmtf::encodeToMap(a0, a1, a2, a3); }, "", pybind11::arg("data"), pybind11::arg("m_zone"), pybind11::arg("coord_divider"), pybind11::arg("occupancy_b_factor_divider"));
	M("mmtf").def("encodeToMap", (int (*)(const struct mmtf::StructureData &, int &, int, int, int)) &mmtf::encodeToMap, "Encode an MMTF data structure into a map of msgpack objects.\n \n\n     MMTF data structure to be stored\n \n\n   msgpack::zone object to use\n \n\n             Object which can be modified and passed to msgpack::pack\n\n Other parameters and behavior are as in ::encodeToFile, but this enables you\n to add additional fields before packing.\n\nC++: mmtf::encodeToMap(const struct mmtf::StructureData &, int &, int, int, int) --> int", pybind11::arg("data"), pybind11::arg("m_zone"), pybind11::arg("coord_divider"), pybind11::arg("occupancy_b_factor_divider"), pybind11::arg("chain_name_max_length"));


binder: int access(const char *, int)

binder: int euidaccess(const char *, int)

binder: int eaccess(const char *, int)

binder: int faccessat(int, const char *, int, int)

binder: long lseek(int, long, int)

binder: long lseek64(int, long, int)

binder: int close(int)

binder: long read(int, void *, unsigned long)

binder: long write(int, const void *, unsigned long)

binder: long pread(int, void *, unsigned long, long)

binder: long pwrite(int, const void *, unsigned long, long)

binder: long pread64(int, void *, unsigned long, long)

binder: long pwrite64(int, const void *, unsigned long, long)

binder: unsigned int alarm(unsigned int)

binder: unsigned int sleep(unsigned int)

binder: unsigned int ualarm(unsigned int, unsigned int)

binder: int usleep(unsigned int)

binder: int pause()

binder: int chown(const char *, unsigned int, unsigned int)

binder: int fchown(int, unsigned int, unsigned int)

binder: int lchown(const char *, unsigned int, unsigned int)

binder: int fchownat(int, const char *, unsigned int, unsigned int, int)

binder: int chdir(const char *)

binder: int fchdir(int)

binder: char * getcwd(char *, unsigned long)

binder: char * get_current_dir_name()

binder: char * getwd(char *)

binder: int dup(int)

binder: int dup2(int, int)

binder: int dup3(int, int, int)

binder: int execle(const char *, const char *)

binder: int execl(const char *, const char *)

binder: int execlp(const char *, const char *)

binder: int nice(int)

binder: void _exit(int)

binder: long pathconf(const char *, int)

binder: long fpathconf(int, int)

binder: long sysconf(int)

binder: unsigned long confstr(int, char *, unsigned long)

binder: int getpid()

binder: int getppid()

binder: int getpgrp()

binder: int __getpgid(int)

binder: int getpgid(int)

binder: int setpgid(int, int)

binder: int setpgrp()

binder: int setsid()

binder: int getsid(int)

binder: unsigned int getuid()

binder: unsigned int geteuid()

binder: unsigned int getgid()

binder: unsigned int getegid()

binder: int group_member(unsigned int)

binder: int setuid(unsigned int)

binder: int setreuid(unsigned int, unsigned int)

binder: int seteuid(unsigned int)

binder: int setgid(unsigned int)

binder: int setregid(unsigned int, unsigned int)

binder: int setegid(unsigned int)

binder: int getresuid(unsigned int *, unsigned int *, unsigned int *)

binder: int getresgid(unsigned int *, unsigned int *, unsigned int *)

binder: int setresuid(unsigned int, unsigned int, unsigned int)

binder: int setresgid(unsigned int, unsigned int, unsigned int)

binder: int fork()

binder: int vfork()

binder: char * ttyname(int)

binder: int ttyname_r(int, char *, unsigned long)

binder: int isatty(int)

binder: int ttyslot()

binder: int link(const char *, const char *)

binder: int linkat(int, const char *, int, const char *, int)

binder: int symlink(const char *, const char *)

binder: long readlink(const char *__restrict, char *__restrict, unsigned long)

binder: int symlinkat(const char *, int, const char *)

binder: long readlinkat(int, const char *__restrict, char *__restrict, unsigned long)

binder: int unlink(const char *)

binder: int unlinkat(int, const char *, int)

binder: int rmdir(const char *)

binder: int tcgetpgrp(int)

binder: int tcsetpgrp(int, int)

binder: char * getlogin()

binder: int getlogin_r(char *, unsigned long)

binder: int setlogin(const char *)

binder: int gethostname(char *, unsigned long)

binder: int sethostname(const char *, unsigned long)

binder: int sethostid(long)

binder: int getdomainname(char *, unsigned long)

binder: int setdomainname(const char *, unsigned long)

binder: int vhangup()

binder: int revoke(const char *)

binder: int profil(unsigned short *, unsigned long, unsigned long, unsigned int)

binder: int acct(const char *)

binder: char * getusershell()

binder: void endusershell()

binder: void setusershell()

binder: int daemon(int, int)

binder: int chroot(const char *)

binder: char * getpass(const char *)

binder: int fsync(int)

binder: int syncfs(int)

binder: long gethostid()

binder: void sync()

binder: int getpagesize()

binder: int getdtablesize()

binder: int truncate(const char *, long)

binder: int truncate64(const char *, long)

binder: int ftruncate(int, long)

binder: int ftruncate64(int, long)

binder: int brk(void *)

binder: void * sbrk(long)

binder: long syscall(long)

binder: int lockf(int, int, long)

binder: int lockf64(int, int, long)

binder: long copy_file_range(int, long *, int, long *, unsigned long, unsigned int)

binder: int fdatasync(int)

binder: char * crypt(const char *, const char *)

binder: void encrypt(char *, int)

binder: void swab(const void *__restrict, void *__restrict, long)

binder: int getentropy(void *, unsigned long)

binder: crypt_data

binder: char * crypt_r(const char *, const char *, struct crypt_data *__restrict)

binder: void setkey_r(const char *, struct crypt_data *__restrict)

binder: void encrypt_r(char *, int, struct crypt_data *__restrict)

binder: long imaxabs(long)

binder: timezone

binder: int gettimeofday(struct timeval *__restrict, struct timezone *__restrict)

binder: int settimeofday(const struct timeval *, const struct timezone *)

binder: int adjtime(const struct timeval *, struct timeval *)

binder: __itimer_which

binder: itimerval

binder: int getitimer(int, struct itimerval *)

binder: int setitimer(int, const struct itimerval *__restrict, struct itimerval *__restrict)

binder: stat

binder: stat64

binder: int stat(const char *__restrict, struct stat *__restrict)

binder: int fstat(int, struct stat *)

binder: int stat64(const char *__restrict, struct stat64 *__restrict)

binder: int fstat64(int, struct stat64 *)

binder: int fstatat(int, const char *__restrict, struct stat *__restrict, int)

binder: int fstatat64(int, const char *__restrict, struct stat64 *__restrict, int)

binder: int lstat(const char *__restrict, struct stat *__restrict)

binder: int lstat64(const char *__restrict, struct stat64 *__restrict)

binder: int chmod(const char *, unsigned int)

binder: int lchmod(const char *, unsigned int)

binder: int fchmod(int, unsigned int)

binder: int fchmodat(int, const char *, unsigned int, int)

binder: unsigned int umask(unsigned int)

binder: unsigned int getumask()

binder: int mkdir(const char *, unsigned int)

binder: int mkdirat(int, const char *, unsigned int)

binder: int mknod(const char *, unsigned int, unsigned long)

binder: int mknodat(int, const char *, unsigned int, unsigned long)

binder: int mkfifo(const char *, unsigned int)

binder: int mkfifoat(int, const char *, unsigned int)

binder: int __fxstat(int, int, struct stat *)

binder: int __xstat(int, const char *, struct stat *)

binder: int __lxstat(int, const char *, struct stat *)

binder: int __fxstatat(int, int, const char *, struct stat *, int)

binder: int __fxstat64(int, int, struct stat64 *)

binder: int __xstat64(int, const char *, struct stat64 *)

binder: int __lxstat64(int, const char *, struct stat64 *)

binder: int __fxstatat64(int, int, const char *, struct stat64 *, int)

binder: int __xmknod(int, const char *, unsigned int, unsigned long *)

binder: int __xmknodat(int, int, const char *, unsigned int, unsigned long *)

binder: unsigned short _Py_get_387controlword()

binder: void _Py_set_387controlword(unsigned short)

binder: _object

binder: _Py_Identifier

binder: bufferinfo

binder: _typeobject

binder: void * PyType_GetSlot(struct _typeobject *, int)

binder: _heaptypeobject

binder: int PyType_IsSubtype(struct _typeobject *, struct _typeobject *)

binder: unsigned long PyType_GetFlags(struct _typeobject *)

binder: int PyType_Ready(struct _typeobject *)

binder: struct _object * PyType_GenericAlloc(struct _typeobject *, long)

binder: struct _object * PyType_GenericNew(struct _typeobject *, struct _object *, struct _object *)

binder: const char * _PyType_Name(struct _typeobject *)

binder: struct _object * _PyType_Lookup(struct _typeobject *, struct _object *)

binder: struct _object * _PyType_LookupId(struct _typeobject *, struct _Py_Identifier *)

binder: struct _object * _PyObject_LookupSpecial(struct _object *, struct _Py_Identifier *)

binder: struct _typeobject * _PyType_CalculateMetaclass(struct _typeobject *, struct _object *)

binder: unsigned int PyType_ClearCache()

binder: void PyType_Modified(struct _typeobject *)

binder: struct _object * _PyType_GetDocFromInternalDoc(const char *, const char *)

binder: struct _object * _PyType_GetTextSignatureFromInternalDoc(const char *, const char *)

binder: int PyObject_Print(struct _object *, struct _IO_FILE *, int)

binder: void _Py_BreakPoint()

binder: void _PyObject_Dump(struct _object *)

binder: struct _object * PyObject_Repr(struct _object *)

binder: struct _object * PyObject_Str(struct _object *)

binder: struct _object * PyObject_ASCII(struct _object *)

binder: struct _object * PyObject_Bytes(struct _object *)

binder: struct _object * PyObject_RichCompare(struct _object *, struct _object *, int)

binder: int PyObject_RichCompareBool(struct _object *, struct _object *, int)

binder: struct _object * PyObject_GetAttrString(struct _object *, const char *)

binder: int PyObject_SetAttrString(struct _object *, const char *, struct _object *)

binder: int PyObject_HasAttrString(struct _object *, const char *)

binder: struct _object * PyObject_GetAttr(struct _object *, struct _object *)

binder: int PyObject_SetAttr(struct _object *, struct _object *, struct _object *)

binder: int PyObject_HasAttr(struct _object *, struct _object *)

binder: int _PyObject_IsAbstract(struct _object *)

binder: struct _object * _PyObject_GetAttrId(struct _object *, struct _Py_Identifier *)

binder: int _PyObject_SetAttrId(struct _object *, struct _Py_Identifier *, struct _object *)

binder: int _PyObject_HasAttrId(struct _object *, struct _Py_Identifier *)

binder: struct _object * PyObject_SelfIter(struct _object *)

binder: struct _object * _PyObject_NextNotImplemented(struct _object *)

binder: struct _object * PyObject_GenericGetAttr(struct _object *, struct _object *)

binder: int PyObject_GenericSetAttr(struct _object *, struct _object *, struct _object *)

binder: int PyObject_GenericSetDict(struct _object *, struct _object *, void *)

binder: long PyObject_Hash(struct _object *)

binder: long PyObject_HashNotImplemented(struct _object *)

binder: int PyObject_IsTrue(struct _object *)

binder: int PyObject_Not(struct _object *)

binder: int PyCallable_Check(struct _object *)

binder: void PyObject_ClearWeakRefs(struct _object *)

binder: void PyObject_CallFinalizer(struct _object *)

binder: int PyObject_CallFinalizerFromDealloc(struct _object *)

binder: struct _object * _PyObject_GenericGetAttrWithDict(struct _object *, struct _object *, struct _object *, int)

binder: int _PyObject_GenericSetAttrWithDict(struct _object *, struct _object *, struct _object *, struct _object *)

binder: struct _object * _PyObject_GetBuiltin(const char *)

binder: struct _object * PyObject_Dir(struct _object *)

binder: int Py_ReprEnter(struct _object *)

binder: void Py_ReprLeave(struct _object *)

binder: void Py_IncRef(struct _object *)

binder: void Py_DecRef(struct _object *)

binder: void _PyTrash_deposit_object(struct _object *)

binder: void _PyTrash_destroy_chain()

binder: void _PyTrash_thread_deposit_object(struct _object *)

binder: void _PyTrash_thread_destroy_chain()

binder: void _PyDebugAllocatorStats(struct _IO_FILE *, const char *, int, unsigned long)

binder: void _PyObject_DebugTypeStats(struct _IO_FILE *)

binder: struct _object * _PyLong_FromTime_t(long)

binder: long _PyLong_AsTime_t(struct _object *)

binder: int _PyTime_ObjectToTime_t(struct _object *, long *, _PyTime_round_t)

binder: int _PyTime_ObjectToTimeval(struct _object *, long *, long *, _PyTime_round_t)

binder: int _PyTime_ObjectToTimespec(struct _object *, long *, long *, _PyTime_round_t)

binder: long _PyTime_FromSeconds(int)

binder: long _PyTime_FromNanoseconds(long)

binder: int _PyTime_FromNanosecondsObject(long *, struct _object *)

binder: int _PyTime_FromSecondsObject(long *, struct _object *, _PyTime_round_t)

binder: int _PyTime_FromMillisecondsObject(long *, struct _object *, _PyTime_round_t)

binder: double _PyTime_AsSecondsDouble(long)

binder: long _PyTime_AsMilliseconds(long, _PyTime_round_t)

binder: long _PyTime_AsMicroseconds(long, _PyTime_round_t)

binder: struct _object * _PyTime_AsNanosecondsObject(long)

binder: int _PyTime_FromTimeval(long *, struct timeval *)

binder: int _PyTime_AsTimeval(long, struct timeval *, _PyTime_round_t)

binder: int _PyTime_AsTimeval_noraise(long, struct timeval *, _PyTime_round_t)

binder: int _PyTime_AsTimevalTime_t(long, long *, int *, _PyTime_round_t)

binder: int _PyTime_FromTimespec(long *, struct timespec *)

binder: int _PyTime_AsTimespec(long, struct timespec *)

binder: long _PyTime_MulDiv(long, long, long)

binder: long _PyTime_GetSystemClock()

binder: long _PyTime_GetMonotonicClock()

binder: int _PyTime_Init()

binder: int _PyTime_localtime(long, struct tm *)

binder: int _PyTime_gmtime(long, struct tm *)

binder: long _PyTime_GetPerfCounter()

binder: void * PyMem_RawMalloc(unsigned long)

binder: void * PyMem_RawCalloc(unsigned long, unsigned long)

binder: void * PyMem_RawRealloc(void *, unsigned long)

binder: void PyMem_RawFree(void *)

binder: int _PyMem_SetupAllocators(const char *)

binder: const char * _PyMem_GetAllocatorsName()

binder: int PyTraceMalloc_Track(unsigned int, unsigned long, unsigned long)

binder: int PyTraceMalloc_Untrack(unsigned int, unsigned long)

binder: struct _object * _PyTraceMalloc_GetTraceback(unsigned int, unsigned long)

binder: void * PyMem_Malloc(unsigned long)

binder: void * PyMem_Calloc(unsigned long, unsigned long)

binder: void * PyMem_Realloc(void *, unsigned long)

binder: void PyMem_Free(void *)

binder: char * _PyMem_RawStrdup(const char *)

binder: char * _PyMem_Strdup(const char *)

binder: wchar_t * _PyMem_RawWcsdup(const wchar_t *)

binder: void PyMem_SetupDebugHooks()

binder: void * PyObject_Malloc(unsigned long)

binder: void * PyObject_Calloc(unsigned long, unsigned long)

binder: void * PyObject_Realloc(void *, unsigned long)

binder: void PyObject_Free(void *)

binder: long _Py_GetAllocatedBlocks()

binder: int _PyObject_DebugMallocStats(struct _IO_FILE *)

binder: struct _object * PyObject_Init(struct _object *, struct _typeobject *)

binder: struct _object * _PyObject_New(struct _typeobject *)

binder: long PyGC_Collect()

binder: long _PyGC_CollectNoFail()

binder: long _PyGC_CollectIfEnabled()

binder: _gc_head

binder: struct _object * _PyObject_GC_Malloc(unsigned long)

binder: struct _object * _PyObject_GC_Calloc(unsigned long)

binder: struct _object * _PyObject_GC_New(struct _typeobject *)

binder: void PyObject_GC_Track(void *)

binder: void PyObject_GC_UnTrack(void *)

binder: void PyObject_GC_Del(void *)

binder: long _Py_HashDouble(double)

binder: long _Py_HashPointer(void *)

binder: long _Py_HashBytes(const void *, long)

binder: struct _object * PyByteArray_FromObject(struct _object *)

binder: struct _object * PyByteArray_Concat(struct _object *, struct _object *)

binder: struct _object * PyByteArray_FromStringAndSize(const char *, long)

binder: long PyByteArray_Size(struct _object *)

binder: char * PyByteArray_AsString(struct _object *)

binder: int PyByteArray_Resize(struct _object *, long)

binder: struct _object * PyBytes_FromStringAndSize(const char *, long)

binder: struct _object * PyBytes_FromString(const char *)

binder: struct _object * PyBytes_FromObject(struct _object *)

binder: struct _object * PyBytes_FromFormat(const char *)

binder: long PyBytes_Size(struct _object *)

binder: char * PyBytes_AsString(struct _object *)

binder: struct _object * PyBytes_Repr(struct _object *, int)

binder: struct _object * _PyBytes_FormatEx(const char *, long, struct _object *, int)

binder: struct _object * _PyBytes_FromHex(struct _object *, int)

binder: struct _object * PyBytes_DecodeEscape(const char *, long, const char *, long, const char *)

binder: struct _object * _PyBytes_Join(struct _object *, struct _object *)

binder: long _PyBytes_InsertThousandsGroupingLocale(char *, long, char *, long, long)

binder: long _PyBytes_InsertThousandsGrouping(char *, long, char *, long, long, const char *, const char *)

binder: PyUnicode_Kind

binder: struct _object * PyUnicode_New(long, unsigned int)

binder: int _PyUnicode_Ready(struct _object *)

binder: struct _object * _PyUnicode_Copy(struct _object *)

binder: long PyUnicode_CopyCharacters(struct _object *, long, struct _object *, long, long)

binder: void _PyUnicode_FastCopyCharacters(struct _object *, long, struct _object *, long, long)

binder: long PyUnicode_Fill(struct _object *, long, long, unsigned int)

binder: void _PyUnicode_FastFill(struct _object *, long, long, unsigned int)

binder: struct _object * PyUnicode_FromUnicode(const wchar_t *, long)

binder: struct _object * PyUnicode_FromStringAndSize(const char *, long)

binder: struct _object * PyUnicode_FromString(const char *)

binder: struct _object * PyUnicode_FromKindAndData(int, const void *, long)

binder: struct _object * _PyUnicode_FromASCII(const char *, long)

binder: struct _object * PyUnicode_Substring(struct _object *, long, long)

binder: unsigned int _PyUnicode_FindMaxChar(struct _object *, long, long)

binder: unsigned int * PyUnicode_AsUCS4(struct _object *, unsigned int *, long, int)

binder: unsigned int * PyUnicode_AsUCS4Copy(struct _object *)

binder: wchar_t * PyUnicode_AsUnicode(struct _object *)

binder: const wchar_t * _PyUnicode_AsUnicode(struct _object *)

binder: wchar_t * PyUnicode_AsUnicodeAndSize(struct _object *, long *)

binder: long PyUnicode_GetLength(struct _object *)

binder: long PyUnicode_GetSize(struct _object *)

binder: unsigned int PyUnicode_ReadChar(struct _object *, long)

binder: int PyUnicode_WriteChar(struct _object *, long, unsigned int)

binder: wchar_t PyUnicode_GetMax()

binder: struct _object * PyUnicode_FromEncodedObject(struct _object *, const char *, const char *)

binder: struct _object * PyUnicode_FromObject(struct _object *)

binder: struct _object * PyUnicode_FromFormat(const char *)

binder: struct _object * PyUnicode_InternFromString(const char *)

binder: void _Py_ReleaseInternedUnicodeStrings()

binder: struct _object * PyUnicode_FromWideChar(const wchar_t *, long)

binder: long PyUnicode_AsWideChar(struct _object *, wchar_t *, long)

binder: wchar_t * PyUnicode_AsWideCharString(struct _object *, long *)

binder: void * _PyUnicode_AsKind(struct _object *, unsigned int)

binder: struct _object * PyUnicode_FromOrdinal(int)

binder: int PyUnicode_ClearFreeList()

binder: const char * PyUnicode_AsUTF8AndSize(struct _object *, long *)

binder: const char * PyUnicode_AsUTF8(struct _object *)

binder: const char * PyUnicode_GetDefaultEncoding()

binder: struct _object * PyUnicode_Decode(const char *, long, const char *, const char *)

binder: struct _object * PyUnicode_AsDecodedObject(struct _object *, const char *, const char *)

binder: struct _object * PyUnicode_AsDecodedUnicode(struct _object *, const char *, const char *)

binder: struct _object * PyUnicode_Encode(const wchar_t *, long, const char *, const char *)

binder: struct _object * PyUnicode_AsEncodedObject(struct _object *, const char *, const char *)

binder: struct _object * PyUnicode_AsEncodedString(struct _object *, const char *, const char *)

binder: struct _object * PyUnicode_AsEncodedUnicode(struct _object *, const char *, const char *)

binder: struct _object * PyUnicode_BuildEncodingMap(struct _object *)

binder: struct _object * PyUnicode_DecodeUTF7(const char *, long, const char *)

binder: struct _object * PyUnicode_DecodeUTF7Stateful(const char *, long, const char *, long *)

binder: struct _object * PyUnicode_EncodeUTF7(const wchar_t *, long, int, int, const char *)

binder: struct _object * _PyUnicode_EncodeUTF7(struct _object *, int, int, const char *)

binder: struct _object * PyUnicode_DecodeUTF8(const char *, long, const char *)

binder: struct _object * PyUnicode_DecodeUTF8Stateful(const char *, long, const char *, long *)

binder: struct _object * PyUnicode_AsUTF8String(struct _object *)

binder: struct _object * _PyUnicode_AsUTF8String(struct _object *, const char *)

binder: struct _object * PyUnicode_EncodeUTF8(const wchar_t *, long, const char *)

binder: struct _object * PyUnicode_DecodeUTF32(const char *, long, const char *, int *)

binder: struct _object * PyUnicode_DecodeUTF32Stateful(const char *, long, const char *, int *, long *)

binder: struct _object * PyUnicode_AsUTF32String(struct _object *)

binder: struct _object * PyUnicode_EncodeUTF32(const wchar_t *, long, const char *, int)

binder: struct _object * _PyUnicode_EncodeUTF32(struct _object *, const char *, int)

binder: struct _object * PyUnicode_DecodeUTF16(const char *, long, const char *, int *)

binder: struct _object * PyUnicode_DecodeUTF16Stateful(const char *, long, const char *, int *, long *)

binder: struct _object * PyUnicode_AsUTF16String(struct _object *)

binder: struct _object * PyUnicode_EncodeUTF16(const wchar_t *, long, const char *, int)

binder: struct _object * _PyUnicode_EncodeUTF16(struct _object *, const char *, int)

binder: struct _object * PyUnicode_DecodeUnicodeEscape(const char *, long, const char *)

binder: struct _object * PyUnicode_AsUnicodeEscapeString(struct _object *)

binder: struct _object * PyUnicode_EncodeUnicodeEscape(const wchar_t *, long)

binder: struct _object * PyUnicode_DecodeRawUnicodeEscape(const char *, long, const char *)

binder: struct _object * PyUnicode_AsRawUnicodeEscapeString(struct _object *)

binder: struct _object * PyUnicode_EncodeRawUnicodeEscape(const wchar_t *, long)

binder: struct _object * _PyUnicode_DecodeUnicodeInternal(const char *, long, const char *)

binder: struct _object * PyUnicode_DecodeLatin1(const char *, long, const char *)

binder: struct _object * PyUnicode_AsLatin1String(struct _object *)

binder: struct _object * _PyUnicode_AsLatin1String(struct _object *, const char *)

binder: struct _object * PyUnicode_EncodeLatin1(const wchar_t *, long, const char *)

binder: struct _object * PyUnicode_DecodeASCII(const char *, long, const char *)

binder: struct _object * PyUnicode_AsASCIIString(struct _object *)

binder: struct _object * _PyUnicode_AsASCIIString(struct _object *, const char *)

binder: struct _object * PyUnicode_EncodeASCII(const wchar_t *, long, const char *)

binder: struct _object * PyUnicode_DecodeCharmap(const char *, long, struct _object *, const char *)

binder: struct _object * PyUnicode_AsCharmapString(struct _object *, struct _object *)

binder: struct _object * PyUnicode_EncodeCharmap(const wchar_t *, long, struct _object *, const char *)

binder: struct _object * _PyUnicode_EncodeCharmap(struct _object *, struct _object *, const char *)

binder: struct _object * PyUnicode_TranslateCharmap(const wchar_t *, long, struct _object *, const char *)

binder: int PyUnicode_EncodeDecimal(wchar_t *, long, char *, const char *)

binder: struct _object * PyUnicode_TransformDecimalToASCII(wchar_t *, long)

binder: struct _object * _PyUnicode_TransformDecimalAndSpaceToASCII(struct _object *)

binder: struct _object * PyUnicode_DecodeLocaleAndSize(const char *, long, const char *)

binder: struct _object * PyUnicode_DecodeLocale(const char *, const char *)

binder: struct _object * PyUnicode_EncodeLocale(struct _object *, const char *)

binder: int PyUnicode_FSConverter(struct _object *, void *)

binder: int PyUnicode_FSDecoder(struct _object *, void *)

binder: struct _object * PyUnicode_DecodeFSDefault(const char *)

binder: struct _object * PyUnicode_DecodeFSDefaultAndSize(const char *, long)

binder: struct _object * PyUnicode_EncodeFSDefault(struct _object *)

binder: struct _object * PyUnicode_Concat(struct _object *, struct _object *)

binder: struct _object * PyUnicode_Split(struct _object *, struct _object *, long)

binder: struct _object * PyUnicode_Splitlines(struct _object *, int)

binder: struct _object * PyUnicode_Partition(struct _object *, struct _object *)

binder: struct _object * PyUnicode_RPartition(struct _object *, struct _object *)

binder: struct _object * PyUnicode_RSplit(struct _object *, struct _object *, long)

binder: struct _object * PyUnicode_Translate(struct _object *, struct _object *, const char *)

binder: struct _object * PyUnicode_Join(struct _object *, struct _object *)

binder: long PyUnicode_Tailmatch(struct _object *, struct _object *, long, long, int)

binder: long PyUnicode_Find(struct _object *, struct _object *, long, long, int)

binder: long PyUnicode_FindChar(struct _object *, unsigned int, long, long, int)

binder: long PyUnicode_Count(struct _object *, struct _object *, long, long)

binder: struct _object * PyUnicode_Replace(struct _object *, struct _object *, struct _object *, long)

binder: int PyUnicode_Compare(struct _object *, struct _object *)

binder: int _PyUnicode_EqualToASCIIId(struct _object *, struct _Py_Identifier *)

binder: int PyUnicode_CompareWithASCIIString(struct _object *, const char *)

binder: int _PyUnicode_EqualToASCIIString(struct _object *, const char *)

binder: struct _object * PyUnicode_RichCompare(struct _object *, struct _object *, int)

binder: struct _object * PyUnicode_Format(struct _object *, struct _object *)

binder: int PyUnicode_Contains(struct _object *, struct _object *)

binder: int PyUnicode_IsIdentifier(struct _object *)

binder: struct _object * _PyUnicode_XStrip(struct _object *, int, struct _object *)

binder: long _PyUnicode_InsertThousandsGrouping(struct _object *, long, long, void *, long, long, const char *, struct _object *, unsigned int *)

binder: int _PyUnicode_IsLowercase(unsigned int)

binder: int _PyUnicode_IsUppercase(unsigned int)

binder: int _PyUnicode_IsTitlecase(unsigned int)

binder: int _PyUnicode_IsXidStart(unsigned int)

binder: int _PyUnicode_IsXidContinue(unsigned int)

binder: int _PyUnicode_IsWhitespace(const unsigned int)

binder: int _PyUnicode_IsLinebreak(const unsigned int)

binder: unsigned int _PyUnicode_ToLowercase(unsigned int)

binder: unsigned int _PyUnicode_ToUppercase(unsigned int)

binder: unsigned int _PyUnicode_ToTitlecase(unsigned int)

binder: int _PyUnicode_ToLowerFull(unsigned int, unsigned int *)

binder: int _PyUnicode_ToTitleFull(unsigned int, unsigned int *)

binder: int _PyUnicode_ToUpperFull(unsigned int, unsigned int *)

binder: int _PyUnicode_ToFoldedFull(unsigned int, unsigned int *)

binder: int _PyUnicode_IsCaseIgnorable(unsigned int)

binder: int _PyUnicode_IsCased(unsigned int)

binder: int _PyUnicode_ToDecimalDigit(unsigned int)

binder: int _PyUnicode_ToDigit(unsigned int)

binder: double _PyUnicode_ToNumeric(unsigned int)

binder: int _PyUnicode_IsDecimalDigit(unsigned int)

binder: int _PyUnicode_IsDigit(unsigned int)

binder: int _PyUnicode_IsNumeric(unsigned int)

binder: int _PyUnicode_IsPrintable(unsigned int)

binder: int _PyUnicode_IsAlpha(unsigned int)

binder: unsigned long Py_UNICODE_strlen(const wchar_t *)

binder: wchar_t * Py_UNICODE_strcpy(wchar_t *, const wchar_t *)

binder: wchar_t * Py_UNICODE_strcat(wchar_t *, const wchar_t *)

binder: wchar_t * Py_UNICODE_strncpy(wchar_t *, const wchar_t *, unsigned long)

binder: int Py_UNICODE_strcmp(const wchar_t *, const wchar_t *)

binder: int Py_UNICODE_strncmp(const wchar_t *, const wchar_t *, unsigned long)

binder: wchar_t * Py_UNICODE_strchr(const wchar_t *, wchar_t)

binder: wchar_t * Py_UNICODE_strrchr(const wchar_t *, wchar_t)

binder: struct _object * _PyUnicode_FormatLong(struct _object *, int, int, int)

binder: wchar_t * PyUnicode_AsUnicodeCopy(struct _object *)

binder: struct _object * _PyUnicode_FromId(struct _Py_Identifier *)

binder: void _PyUnicode_ClearStaticStrings()

binder: int _PyUnicode_EQ(struct _object *, struct _object *)

binder: struct _object * PyLong_FromLong(long)

binder: struct _object * PyLong_FromUnsignedLong(unsigned long)

binder: struct _object * PyLong_FromSize_t(unsigned long)

binder: struct _object * PyLong_FromSsize_t(long)

binder: struct _object * PyLong_FromDouble(double)

binder: long PyLong_AsLong(struct _object *)

binder: long PyLong_AsLongAndOverflow(struct _object *, int *)

binder: long PyLong_AsSsize_t(struct _object *)

binder: unsigned long PyLong_AsSize_t(struct _object *)

binder: unsigned long PyLong_AsUnsignedLong(struct _object *)

binder: unsigned long PyLong_AsUnsignedLongMask(struct _object *)

binder: int _PyLong_AsInt(struct _object *)

binder: struct _object * PyLong_GetInfo()

binder: double _PyLong_Frexp(struct _longobject *, long *)

binder: double PyLong_AsDouble(struct _object *)

binder: struct _object * PyLong_FromVoidPtr(void *)

binder: void * PyLong_AsVoidPtr(struct _object *)

binder: struct _object * PyLong_FromLongLong(long long)

binder: struct _object * PyLong_FromUnsignedLongLong(unsigned long long)

binder: long long PyLong_AsLongLong(struct _object *)

binder: unsigned long long PyLong_AsUnsignedLongLong(struct _object *)

binder: unsigned long long PyLong_AsUnsignedLongLongMask(struct _object *)

binder: long long PyLong_AsLongLongAndOverflow(struct _object *, int *)

binder: struct _object * PyLong_FromUnicode(wchar_t *, long, int)

binder: struct _object * PyLong_FromUnicodeObject(struct _object *, int)

binder: struct _object * _PyLong_FromBytes(const char *, long, int)

binder: int _PyLong_Sign(struct _object *)

binder: unsigned long _PyLong_NumBits(struct _object *)

binder: struct _object * _PyLong_DivmodNear(struct _object *, struct _object *)

binder: struct _object * _PyLong_FromByteArray(const unsigned char *, unsigned long, int, int)

binder: int _PyLong_AsByteArray(struct _longobject *, unsigned char *, unsigned long, int, int)

binder: struct _longobject * _PyLong_FromNbInt(struct _object *)

binder: struct _object * _PyLong_Format(struct _object *, int)

binder: struct _object * _PyLong_GCD(struct _object *, struct _object *)

binder: _longobject

binder: struct _longobject * _PyLong_New(long)

binder: struct _object * _PyLong_Copy(struct _longobject *)

binder: struct _object * PyBool_FromLong(long)

binder: double PyFloat_GetMax()

binder: double PyFloat_GetMin()

binder: struct _object * PyFloat_GetInfo()

binder: struct _object * PyFloat_FromString(struct _object *)

binder: struct _object * PyFloat_FromDouble(double)

binder: double PyFloat_AsDouble(struct _object *)

binder: int _PyFloat_Pack2(double, unsigned char *, int)

binder: int _PyFloat_Pack4(double, unsigned char *, int)

binder: int _PyFloat_Pack8(double, unsigned char *, int)

binder: int _PyFloat_Repr(double, char *, unsigned long)

binder: int _PyFloat_Digits(char *, double, int *)

binder: void _PyFloat_DigitsInit()

binder: double _PyFloat_Unpack2(const unsigned char *, int)

binder: double _PyFloat_Unpack4(const unsigned char *, int)

binder: double _PyFloat_Unpack8(const unsigned char *, int)

binder: int PyFloat_ClearFreeList()

binder: void _PyFloat_DebugMallocStats(struct _IO_FILE *)

binder: struct _object * PyComplex_FromDoubles(double, double)

binder: double PyComplex_RealAsDouble(struct _object *)

binder: double PyComplex_ImagAsDouble(struct _object *)

binder: struct _object * PyMemoryView_FromObject(struct _object *)

binder: struct _object * PyMemoryView_FromMemory(char *, long, int)

binder: struct _object * PyMemoryView_FromBuffer(struct bufferinfo *)

binder: struct _object * PyMemoryView_GetContiguous(struct _object *, int, char)

binder: struct _object * PyTuple_New(long)

binder: long PyTuple_Size(struct _object *)

binder: struct _object * PyTuple_GetItem(struct _object *, long)

binder: int PyTuple_SetItem(struct _object *, long, struct _object *)

binder: struct _object * PyTuple_GetSlice(struct _object *, long, long)

binder: struct _object * PyTuple_Pack(long)

binder: void _PyTuple_MaybeUntrack(struct _object *)

binder: int PyTuple_ClearFreeList()

binder: void _PyTuple_DebugMallocStats(struct _IO_FILE *)

binder: struct _object * PyList_New(long)

binder: long PyList_Size(struct _object *)

binder: struct _object * PyList_GetItem(struct _object *, long)

binder: int PyList_SetItem(struct _object *, long, struct _object *)

binder: int PyList_Insert(struct _object *, long, struct _object *)

binder: int PyList_Append(struct _object *, struct _object *)

binder: struct _object * PyList_GetSlice(struct _object *, long, long)

binder: int PyList_SetSlice(struct _object *, long, long, struct _object *)

binder: int PyList_Sort(struct _object *)

binder: int PyList_Reverse(struct _object *)

binder: struct _object * PyList_AsTuple(struct _object *)

binder: int PyList_ClearFreeList()

binder: void _PyList_DebugMallocStats(struct _IO_FILE *)

binder: struct _object * PyDict_New()

binder: struct _object * PyDict_GetItem(struct _object *, struct _object *)

binder: struct _object * _PyDict_GetItem_KnownHash(struct _object *, struct _object *, long)

binder: struct _object * PyDict_GetItemWithError(struct _object *, struct _object *)

binder: struct _object * _PyDict_GetItemIdWithError(struct _object *, struct _Py_Identifier *)

binder: struct _object * PyDict_SetDefault(struct _object *, struct _object *, struct _object *)

binder: int PyDict_SetItem(struct _object *, struct _object *, struct _object *)

binder: int _PyDict_SetItem_KnownHash(struct _object *, struct _object *, struct _object *, long)

binder: int PyDict_DelItem(struct _object *, struct _object *)

binder: int _PyDict_DelItem_KnownHash(struct _object *, struct _object *, long)

binder: void PyDict_Clear(struct _object *)

binder: struct _object * PyObject_GenericGetDict(struct _object *, void *)

binder: struct _object * _PyDictView_New(struct _object *, struct _typeobject *)

binder: struct _object * PyDict_Keys(struct _object *)

binder: struct _object * PyDict_Values(struct _object *)

binder: struct _object * PyDict_Items(struct _object *)

binder: long PyDict_Size(struct _object *)

binder: struct _object * PyDict_Copy(struct _object *)

binder: int PyDict_Contains(struct _object *, struct _object *)

binder: int _PyDict_Contains(struct _object *, struct _object *, long)

binder: struct _object * _PyDict_NewPresized(long)

binder: void _PyDict_MaybeUntrack(struct _object *)

binder: int _PyDict_HasOnlyStringKeys(struct _object *)

binder: struct _object * _PyDict_Pop(struct _object *, struct _object *, struct _object *)

binder: struct _object * _PyDict_Pop_KnownHash(struct _object *, struct _object *, long, struct _object *)

binder: struct _object * _PyDict_FromKeys(struct _object *, struct _object *, struct _object *)

binder: int PyDict_ClearFreeList()

binder: int PyDict_Update(struct _object *, struct _object *)

binder: int PyDict_Merge(struct _object *, struct _object *, int)

binder: int _PyDict_MergeEx(struct _object *, struct _object *, int)

binder: struct _object * _PyDictView_Intersect(struct _object *, struct _object *)

binder: int PyDict_MergeFromSeq2(struct _object *, struct _object *, int)

binder: struct _object * PyDict_GetItemString(struct _object *, const char *)

binder: struct _object * _PyDict_GetItemId(struct _object *, struct _Py_Identifier *)

binder: int PyDict_SetItemString(struct _object *, const char *, struct _object *)

binder: int _PyDict_SetItemId(struct _object *, struct _Py_Identifier *, struct _object *)

binder: int PyDict_DelItemString(struct _object *, const char *)

binder: int _PyDict_DelItemId(struct _object *, struct _Py_Identifier *)

binder: void _PyDict_DebugMallocStats(struct _IO_FILE *)

binder: struct _object * PyODict_New()

binder: int PyODict_SetItem(struct _object *, struct _object *, struct _object *)

binder: int PyODict_DelItem(struct _object *, struct _object *)

binder: int _PySet_Update(struct _object *, struct _object *)

binder: int PySet_ClearFreeList()

binder: struct _object * PySet_New(struct _object *)

binder: struct _object * PyFrozenSet_New(struct _object *)

binder: int PySet_Add(struct _object *, struct _object *)

binder: int PySet_Clear(struct _object *)

binder: int PySet_Contains(struct _object *, struct _object *)

binder: int PySet_Discard(struct _object *, struct _object *)

binder: struct _object * PySet_Pop(struct _object *)

binder: long PySet_Size(struct _object *)

binder: struct _object * PyCFunction_GetSelf(struct _object *)

binder: int PyCFunction_GetFlags(struct _object *)

binder: struct _object * PyCFunction_Call(struct _object *, struct _object *, struct _object *)

binder: PyMethodDef

binder: struct _object * PyCFunction_NewEx(struct PyMethodDef *, struct _object *, struct _object *)

binder: int PyCFunction_ClearFreeList()

binder: void _PyCFunction_DebugMallocStats(struct _IO_FILE *)

binder: void _PyMethod_DebugMallocStats(struct _IO_FILE *)

binder: struct _object * PyModule_NewObject(struct _object *)

binder: struct _object * PyModule_New(const char *)

binder: struct _object * PyModule_GetDict(struct _object *)

binder: struct _object * PyModule_GetNameObject(struct _object *)

binder: const char * PyModule_GetName(struct _object *)

binder: const char * PyModule_GetFilename(struct _object *)

binder: struct _object * PyModule_GetFilenameObject(struct _object *)

binder: void _PyModule_Clear(struct _object *)

binder: void _PyModule_ClearDict(struct _object *)

binder: struct PyModuleDef * PyModule_GetDef(struct _object *)

binder: void * PyModule_GetState(struct _object *)

binder: struct _object * PyModuleDef_Init(struct PyModuleDef *)

binder: PyModuleDef_Base

binder: PyModuleDef_Slot

binder: PyModuleDef

binder: struct _object * PyFunction_New(struct _object *, struct _object *)

binder: struct _object * PyFunction_NewWithQualName(struct _object *, struct _object *, struct _object *)

binder: struct _object * PyFunction_GetCode(struct _object *)

binder: struct _object * PyFunction_GetGlobals(struct _object *)

binder: struct _object * PyFunction_GetModule(struct _object *)

binder: struct _object * PyFunction_GetDefaults(struct _object *)

binder: int PyFunction_SetDefaults(struct _object *, struct _object *)

binder: struct _object * PyFunction_GetKwDefaults(struct _object *)

binder: int PyFunction_SetKwDefaults(struct _object *, struct _object *)

binder: struct _object * PyFunction_GetClosure(struct _object *)

binder: int PyFunction_SetClosure(struct _object *, struct _object *)

binder: struct _object * PyFunction_GetAnnotations(struct _object *)

binder: int PyFunction_SetAnnotations(struct _object *, struct _object *)

binder: struct _object * PyClassMethod_New(struct _object *)

binder: struct _object * PyStaticMethod_New(struct _object *)

binder: struct _object * PyMethod_New(struct _object *, struct _object *)

binder: struct _object * PyMethod_Function(struct _object *)

binder: struct _object * PyMethod_Self(struct _object *)

binder: int PyMethod_ClearFreeList()

binder: struct _object * PyInstanceMethod_New(struct _object *)

binder: struct _object * PyInstanceMethod_Function(struct _object *)

binder: struct _object * PyFile_FromFd(int, const char *, const char *, int, const char *, const char *, const char *, int)

binder: struct _object * PyFile_GetLine(struct _object *, int)

binder: int PyFile_WriteObject(struct _object *, struct _object *, int)

binder: int PyFile_WriteString(const char *, struct _object *)

binder: int PyObject_AsFileDescriptor(struct _object *)

binder: char * Py_UniversalNewlineFgets(char *, int, struct _IO_FILE *, struct _object *)

binder: struct _object * PyFile_NewStdPrinter(int)

binder: void * PyCapsule_GetPointer(struct _object *, const char *)

binder: const char * PyCapsule_GetName(struct _object *)

binder: void * PyCapsule_GetContext(struct _object *)

binder: int PyCapsule_IsValid(struct _object *, const char *)

binder: int PyCapsule_SetPointer(struct _object *, void *)

binder: int PyCapsule_SetName(struct _object *, const char *)

binder: int PyCapsule_SetContext(struct _object *, void *)

binder: void * PyCapsule_Import(const char *, int)

binder: PyLockStatus

binder: void PyThread_init_thread()

binder: void PyThread_exit_thread()

binder: unsigned long PyThread_get_thread_ident()

binder: void * PyThread_allocate_lock()

binder: void PyThread_free_lock(void *)

binder: int PyThread_acquire_lock(void *, int)

binder: enum PyLockStatus PyThread_acquire_lock_timed(void *, long long, int)

binder: void PyThread_release_lock(void *)

binder: unsigned long PyThread_get_stacksize()

binder: int PyThread_set_stacksize(unsigned long)

binder: struct _object * PyThread_GetInfo()

binder: int PyThread_create_key()

binder: void PyThread_delete_key(int)

binder: int PyThread_set_key_value(int, void *)

binder: void * PyThread_get_key_value(int)

binder: void PyThread_delete_key_value(int)

binder: void PyThread_ReInitTLS()

binder: _Py_tss_t

binder: struct _Py_tss_t * PyThread_tss_alloc()

binder: void PyThread_tss_free(struct _Py_tss_t *)

binder: int PyThread_tss_is_created(struct _Py_tss_t *)

binder: int PyThread_tss_create(struct _Py_tss_t *)

binder: void PyThread_tss_delete(struct _Py_tss_t *)

binder: int PyThread_tss_set(struct _Py_tss_t *, void *)

binder: void * PyThread_tss_get(struct _Py_tss_t *)

binder: _is

binder: _err_stackitem

binder: _ts

binder: struct _is * PyInterpreterState_New()

binder: void PyInterpreterState_Clear(struct _is *)

binder: void PyInterpreterState_Delete(struct _is *)

binder: long PyInterpreterState_GetID(struct _is *)

binder: int _PyState_AddModule(struct _object *, struct PyModuleDef *)

binder: int PyState_AddModule(struct _object *, struct PyModuleDef *)

binder: int PyState_RemoveModule(struct PyModuleDef *)

binder: struct _object * PyState_FindModule(struct PyModuleDef *)

binder: void _PyState_ClearModules()

binder: struct _ts * PyThreadState_New(struct _is *)

binder: struct _ts * _PyThreadState_Prealloc(struct _is *)

binder: void _PyThreadState_Init(struct _ts *)

binder: void PyThreadState_Clear(struct _ts *)

binder: void PyThreadState_Delete(struct _ts *)

binder: void _PyThreadState_DeleteExcept(struct _ts *)

binder: void PyThreadState_DeleteCurrent()

binder: void _PyGILState_Reinit()

binder: struct _ts * PyThreadState_Get()

binder: struct _ts * _PyThreadState_UncheckedGet()

binder: struct _ts * PyThreadState_Swap(struct _ts *)

binder: struct _object * PyThreadState_GetDict()

binder: int PyThreadState_SetAsyncExc(unsigned long, struct _object *)

binder: PyGILState_STATE PyGILState_Ensure()

binder: void PyGILState_Release(PyGILState_STATE)

binder: struct _ts * PyGILState_GetThisThreadState()

binder: int PyGILState_Check()

binder: struct _is * _PyGILState_GetInterpreterStateUnsafe()

binder: struct _object * _PyThread_CurrentFrames()

binder: struct _is * PyInterpreterState_Main()

binder: struct _is * PyInterpreterState_Head()

binder: struct _is * PyInterpreterState_Next(struct _is *)

binder: struct _ts * PyInterpreterState_ThreadHead(struct _is *)

binder: struct _ts * PyThreadState_Next(struct _ts *)

binder: _traceback

binder: int PyTraceBack_Here(struct _frame *)

binder: int PyTraceBack_Print(struct _object *, struct _object *)

binder: int _Py_DisplaySourceLine(struct _object *, struct _object *, int, int)

binder: void _PyTraceback_Add(const char *, const char *, int)

binder: void _Py_DumpTraceback(int, struct _ts *)

binder: const char * _Py_DumpTracebackThreads(int, struct _is *, struct _ts *)

binder: void _Py_DumpASCII(int, struct _object *)

binder: void _Py_DumpDecimal(int, unsigned long)

binder: void _Py_DumpHexadecimal(int, unsigned long, long)

binder: struct _object * PySlice_New(struct _object *, struct _object *, struct _object *)

binder: struct _object * _PySlice_FromIndices(long, long)

binder: int PySlice_GetIndices(struct _object *, long, long *, long *, long *)

binder: int PySlice_GetIndicesEx(struct _object *, long, long *, long *, long *, long *)

binder: int PySlice_Unpack(struct _object *, long *, long *, long *)

binder: long PySlice_AdjustIndices(long, long *, long *, long)

binder: struct _object * PyCell_New(struct _object *)

binder: struct _object * PyCell_Get(struct _object *)

binder: int PyCell_Set(struct _object *, struct _object *)

binder: struct _object * PySeqIter_New(struct _object *)

binder: struct _object * PyCallIter_New(struct _object *, struct _object *)

binder: struct _object * PyGen_New(struct _frame *)

binder: struct _object * PyGen_NewWithQualName(struct _frame *, struct _object *, struct _object *)

binder: int _PyGen_SetStopIterationValue(struct _object *)

binder: void _PyGen_Finalize(struct _object *)

binder: struct _object * _PyCoro_GetAwaitableIter(struct _object *)

binder: struct _object * PyCoro_New(struct _frame *, struct _object *, struct _object *)

binder: struct _object * PyAsyncGen_New(struct _frame *, struct _object *, struct _object *)

binder: struct _object * _PyAsyncGenValueWrapperNew(struct _object *)

binder: int PyAsyncGen_ClearFreeLists()

binder: PyGetSetDef

binder: wrapperbase

binder: struct _object * PyDescr_NewMethod(struct _typeobject *, struct PyMethodDef *)

binder: struct _object * PyDescr_NewClassMethod(struct _typeobject *, struct PyMethodDef *)

binder: struct _object * PyDescr_NewGetSet(struct _typeobject *, struct PyGetSetDef *)

binder: struct _object * PyDescr_NewWrapper(struct _typeobject *, struct wrapperbase *, void *)

binder: struct _object * PyDictProxy_New(struct _object *)

binder: struct _object * PyWrapper_New(struct _object *, struct _object *)

binder: struct _object * _PyWarnings_Init()

binder: int PyErr_WarnEx(struct _object *, const char *, long)

binder: int PyErr_WarnFormat(struct _object *, long, const char *)

binder: int PyErr_ResourceWarning(struct _object *, long, const char *)

binder: int PyErr_WarnExplicitObject(struct _object *, struct _object *, struct _object *, int, struct _object *, struct _object *)

binder: int PyErr_WarnExplicit(struct _object *, const char *, const char *, int, const char *, struct _object *)

binder: int PyErr_WarnExplicitFormat(struct _object *, const char *, int, const char *, struct _object *, const char *)

binder: void _PyErr_WarnUnawaitedCoroutine(struct _object *)

binder: _PyWeakReference

binder: struct _object * PyWeakref_NewRef(struct _object *, struct _object *)

binder: struct _object * PyWeakref_NewProxy(struct _object *, struct _object *)

binder: struct _object * PyWeakref_GetObject(struct _object *)

binder: long _PyWeakref_GetWeakrefCount(struct _PyWeakReference *)

binder: void _PyWeakref_ClearRef(struct _PyWeakReference *)

binder: PyStructSequence_Field

binder: PyStructSequence_Desc

binder: void PyStructSequence_InitType(struct _typeobject *, struct PyStructSequence_Desc *)

binder: int PyStructSequence_InitType2(struct _typeobject *, struct PyStructSequence_Desc *)

binder: struct _typeobject * PyStructSequence_NewType(struct PyStructSequence_Desc *)

binder: struct _object * PyStructSequence_New(struct _typeobject *)

binder: void PyStructSequence_SetItem(struct _object *, long, struct _object *)

binder: struct _object * PyStructSequence_GetItem(struct _object *, long)

binder: struct _object * _PyNamespace_New(struct _object *)

binder: int PyCodec_Register(struct _object *)

binder: struct _object * _PyCodec_Lookup(const char *)

binder: int _PyCodec_Forget(const char *)

binder: int PyCodec_KnownEncoding(const char *)

binder: struct _object * PyCodec_Encode(struct _object *, const char *, const char *)

binder: struct _object * PyCodec_Decode(struct _object *, const char *, const char *)

binder: struct _object * _PyCodec_LookupTextEncoding(const char *, const char *)

binder: struct _object * _PyCodec_EncodeText(struct _object *, const char *, const char *)

binder: struct _object * _PyCodec_DecodeText(struct _object *, const char *, const char *)

binder: struct _object * _PyCodecInfo_GetIncrementalDecoder(struct _object *, const char *)

binder: struct _object * _PyCodecInfo_GetIncrementalEncoder(struct _object *, const char *)

binder: struct _object * PyCodec_Encoder(const char *)

binder: struct _object * PyCodec_Decoder(const char *)

binder: struct _object * PyCodec_IncrementalEncoder(const char *, const char *)

binder: struct _object * PyCodec_IncrementalDecoder(const char *, const char *)

binder: struct _object * PyCodec_StreamReader(const char *, struct _object *, const char *)

binder: struct _object * PyCodec_StreamWriter(const char *, struct _object *, const char *)

binder: int PyCodec_RegisterError(const char *, struct _object *)

binder: struct _object * PyCodec_LookupError(const char *)

binder: struct _object * PyCodec_StrictErrors(struct _object *)

binder: struct _object * PyCodec_IgnoreErrors(struct _object *)

binder: struct _object * PyCodec_ReplaceErrors(struct _object *)

binder: struct _object * PyCodec_XMLCharRefReplaceErrors(struct _object *)

binder: struct _object * PyCodec_BackslashReplaceErrors(struct _object *)

binder: struct _object * PyCodec_NameReplaceErrors(struct _object *)

binder: void PyErr_SetNone(struct _object *)

binder: void PyErr_SetObject(struct _object *, struct _object *)

binder: void _PyErr_SetKeyError(struct _object *)

binder: struct _err_stackitem * _PyErr_GetTopmostException(struct _ts *)

binder: void PyErr_SetString(struct _object *, const char *)

binder: struct _object * PyErr_Occurred()

binder: void PyErr_Clear()

binder: void PyErr_Restore(struct _object *, struct _object *, struct _object *)

binder: void PyErr_SetExcInfo(struct _object *, struct _object *, struct _object *)

binder: void Py_FatalError(const char *)

binder: int PyErr_GivenExceptionMatches(struct _object *, struct _object *)

binder: int PyErr_ExceptionMatches(struct _object *)

binder: int PyException_SetTraceback(struct _object *, struct _object *)

binder: struct _object * PyException_GetTraceback(struct _object *)

binder: struct _object * PyException_GetCause(struct _object *)

binder: void PyException_SetCause(struct _object *, struct _object *)

binder: struct _object * PyException_GetContext(struct _object *)

binder: void PyException_SetContext(struct _object *, struct _object *)

binder: void _PyErr_ChainExceptions(struct _object *, struct _object *, struct _object *)

binder: int PyErr_BadArgument()

binder: struct _object * PyErr_NoMemory()

binder: struct _object * PyErr_SetFromErrno(struct _object *)

binder: struct _object * PyErr_SetFromErrnoWithFilenameObject(struct _object *, struct _object *)

binder: struct _object * PyErr_SetFromErrnoWithFilenameObjects(struct _object *, struct _object *, struct _object *)

binder: struct _object * PyErr_SetFromErrnoWithFilename(struct _object *, const char *)

binder: struct _object * PyErr_Format(struct _object *, const char *)

binder: struct _object * _PyErr_FormatFromCause(struct _object *, const char *)

binder: struct _object * PyErr_SetImportErrorSubclass(struct _object *, struct _object *, struct _object *, struct _object *)

binder: struct _object * PyErr_SetImportError(struct _object *, struct _object *, struct _object *)

binder: void PyErr_BadInternalCall()

binder: void _PyErr_BadInternalCall(const char *, int)

binder: struct _object * PyErr_NewException(const char *, struct _object *, struct _object *)

binder: struct _object * PyErr_NewExceptionWithDoc(const char *, const char *, struct _object *, struct _object *)

binder: void PyErr_WriteUnraisable(struct _object *)

binder: struct _object * _PyErr_TrySetFromCause(const char *)

binder: int PyErr_CheckSignals()

binder: void PyErr_SetInterrupt()

binder: int PySignal_SetWakeupFd(int)

binder: void PyErr_SyntaxLocation(const char *, int)

binder: void PyErr_SyntaxLocationEx(const char *, int, int)

binder: void PyErr_SyntaxLocationObject(struct _object *, int, int)

binder: struct _object * PyErr_ProgramText(const char *, int)

binder: struct _object * PyErr_ProgramTextObject(struct _object *, int)

binder: struct _object * PyUnicodeDecodeError_Create(const char *, const char *, long, long, long, const char *)

binder: struct _object * PyUnicodeEncodeError_Create(const char *, const wchar_t *, long, long, long, const char *)

binder: struct _object * PyUnicodeTranslateError_Create(const wchar_t *, long, long, long, const char *)

binder: struct _object * _PyUnicodeTranslateError_Create(struct _object *, long, long, const char *)

binder: struct _object * PyUnicodeEncodeError_GetEncoding(struct _object *)

binder: struct _object * PyUnicodeDecodeError_GetEncoding(struct _object *)

binder: struct _object * PyUnicodeEncodeError_GetObject(struct _object *)

binder: struct _object * PyUnicodeDecodeError_GetObject(struct _object *)

binder: struct _object * PyUnicodeTranslateError_GetObject(struct _object *)

binder: int PyUnicodeEncodeError_GetStart(struct _object *, long *)

binder: int PyUnicodeDecodeError_GetStart(struct _object *, long *)

binder: int PyUnicodeTranslateError_GetStart(struct _object *, long *)

binder: int PyUnicodeEncodeError_SetStart(struct _object *, long)

binder: int PyUnicodeDecodeError_SetStart(struct _object *, long)

binder: int PyUnicodeTranslateError_SetStart(struct _object *, long)

binder: int PyUnicodeEncodeError_GetEnd(struct _object *, long *)

binder: int PyUnicodeDecodeError_GetEnd(struct _object *, long *)

binder: int PyUnicodeTranslateError_GetEnd(struct _object *, long *)

binder: int PyUnicodeEncodeError_SetEnd(struct _object *, long)

binder: int PyUnicodeDecodeError_SetEnd(struct _object *, long)

binder: int PyUnicodeTranslateError_SetEnd(struct _object *, long)

binder: struct _object * PyUnicodeEncodeError_GetReason(struct _object *)

binder: struct _object * PyUnicodeDecodeError_GetReason(struct _object *)

binder: struct _object * PyUnicodeTranslateError_GetReason(struct _object *)

binder: int PyUnicodeEncodeError_SetReason(struct _object *, const char *)

binder: int PyUnicodeDecodeError_SetReason(struct _object *, const char *)

binder: int PyUnicodeTranslateError_SetReason(struct _object *, const char *)

binder: int PyOS_snprintf(char *, unsigned long, const char *)

binder: struct _object * _PyContext_NewHamtForTests()

binder: int PyContext_ClearFreeList()

binder: int PyArg_Parse(struct _object *, const char *)

binder: int PyArg_ParseTuple(struct _object *, const char *)

binder: int PyArg_ValidateKeywordArguments(struct _object *)

binder: int PyArg_UnpackTuple(struct _object *, const char *, long, long)

binder: struct _object * Py_BuildValue(const char *)

binder: struct _object * _Py_BuildValue_SizeT(const char *)

binder: int _PyArg_NoKeywords(const char *, struct _object *)

binder: int _PyArg_NoPositional(const char *, struct _object *)

binder: _PyArg_Parser

binder: int _PyArg_ParseTupleAndKeywordsFast(struct _object *, struct _object *, struct _PyArg_Parser *)

binder: void _PyArg_Fini()

binder: int PyModule_AddObject(struct _object *, const char *, struct _object *)

binder: int PyModule_AddIntConstant(struct _object *, const char *, long)

binder: int PyModule_AddStringConstant(struct _object *, const char *, const char *)

binder: int PyModule_SetDocString(struct _object *, const char *)

binder: int PyModule_AddFunctions(struct _object *, struct PyMethodDef *)

binder: int PyModule_ExecDef(struct _object *, struct PyModuleDef *)

binder: struct _object * PyModule_Create2(struct PyModuleDef *, int)

binder: struct _object * _PyModule_CreateInitialized(struct PyModuleDef *, int)

binder: struct _object * PyModule_FromDefAndSpec2(struct PyModuleDef *, struct _object *, int)

binder: _addr_pair

binder: struct _object * _PyCode_ConstantKey(struct _object *)

binder: struct _object * PyCode_Optimize(struct _object *, struct _object *, struct _object *, struct _object *)

binder: int _PyCode_SetExtra(struct _object *, long, void *)

binder: struct _object * _Py_Mangle(struct _object *, struct _object *)

binder: int PyCompile_OpcodeStackEffect(int, int)

binder: void PyErr_Print()

binder: void PyErr_PrintEx(int)

binder: void PyErr_Display(struct _object *, struct _object *, struct _object *)

binder: char * PyOS_Readline(struct _IO_FILE *, struct _IO_FILE *, const char *)

binder: void Py_SetProgramName(const wchar_t *)

binder: wchar_t * Py_GetProgramName()

binder: void Py_SetPythonHome(const wchar_t *)

binder: wchar_t * Py_GetPythonHome()

binder: int Py_SetStandardStreamEncoding(const char *, const char *)

binder: int _Py_IsCoreInitialized()

binder: void Py_Initialize()

binder: void Py_InitializeEx(int)

binder: void Py_Finalize()

binder: int Py_FinalizeEx()

binder: int Py_IsInitialized()

binder: struct _ts * Py_NewInterpreter()

binder: void Py_EndInterpreter(struct _ts *)

binder: void Py_Exit(int)

binder: void _Py_RestoreSignals()

binder: int Py_FdIsInteractive(struct _IO_FILE *, const char *)

binder: wchar_t * Py_GetProgramFullPath()

binder: wchar_t * Py_GetPrefix()

binder: wchar_t * Py_GetExecPrefix()

binder: wchar_t * Py_GetPath()

binder: void Py_SetPath(const wchar_t *)

binder: const char * Py_GetVersion()

binder: const char * Py_GetPlatform()

binder: const char * Py_GetCopyright()

binder: const char * Py_GetCompiler()

binder: const char * Py_GetBuildInfo()

binder: const char * _Py_gitidentifier()

binder: const char * _Py_gitversion()

binder: struct _object * _PyBuiltin_Init()

binder: void _PyExc_Init(struct _object *)

binder: int _PyFrame_Init()

binder: int _PyFloat_Init()

binder: int PyByteArray_Init()

binder: void PyMethod_Fini()

binder: void PyFrame_Fini()

binder: void PyCFunction_Fini()

binder: void PyDict_Fini()

binder: void PyTuple_Fini()

binder: void PyList_Fini()

binder: void PySet_Fini()

binder: void PyBytes_Fini()

binder: void PyByteArray_Fini()

binder: void PyFloat_Fini()

binder: void PyOS_FiniInterrupts()

binder: void PySlice_Fini()

binder: void PyAsyncGen_Fini()

binder: int _Py_IsFinalizing()

binder: int _PyOS_URandom(void *, long)

binder: int _PyOS_URandomNonblock(void *, long)

binder: int _Py_LegacyLocaleDetected()

binder: char * _Py_SetLocaleFromEnv(int)

binder: struct _object * PyEval_CallObjectWithKeywords(struct _object *, struct _object *, struct _object *)

binder: struct _object * PyEval_CallFunction(struct _object *, const char *)

binder: struct _object * PyEval_CallMethod(struct _object *, const char *, const char *)

binder: void _PyEval_SetCoroutineOriginTrackingDepth(int)

binder: int _PyEval_GetCoroutineOriginTrackingDepth()

binder: void _PyEval_SetCoroutineWrapper(struct _object *)

binder: struct _object * _PyEval_GetCoroutineWrapper()

binder: void _PyEval_SetAsyncGenFirstiter(struct _object *)

binder: struct _object * _PyEval_GetAsyncGenFirstiter()

binder: void _PyEval_SetAsyncGenFinalizer(struct _object *)

binder: struct _object * _PyEval_GetAsyncGenFinalizer()

binder: struct _object * PyEval_GetBuiltins()

binder: struct _object * PyEval_GetGlobals()

binder: struct _object * PyEval_GetLocals()

binder: struct _frame * PyEval_GetFrame()

binder: void _PyEval_SignalReceived()

binder: int Py_MakePendingCalls()

binder: void Py_SetRecursionLimit(int)

binder: int Py_GetRecursionLimit()

binder: int _Py_CheckRecursiveCall(const char *)

binder: const char * PyEval_GetFuncName(struct _object *)

binder: const char * PyEval_GetFuncDesc(struct _object *)

binder: struct _object * PyEval_EvalFrame(struct _frame *)

binder: struct _object * PyEval_EvalFrameEx(struct _frame *, int)

binder: struct _object * _PyEval_EvalFrameDefault(struct _frame *, int)

binder: struct _ts * PyEval_SaveThread()

binder: void PyEval_RestoreThread(struct _ts *)

binder: int PyEval_ThreadsInitialized()

binder: void PyEval_InitThreads()

binder: void _PyEval_FiniThreads()

binder: void PyEval_AcquireLock()

binder: void PyEval_ReleaseLock()

binder: void PyEval_AcquireThread(struct _ts *)

binder: void PyEval_ReleaseThread(struct _ts *)

binder: void PyEval_ReInitThreads()

binder: void _PyEval_SetSwitchInterval(unsigned long)

binder: unsigned long _PyEval_GetSwitchInterval()

binder: int _PyEval_SliceIndex(struct _object *, long *)

binder: int _PyEval_SliceIndexNotNone(struct _object *, long *)

binder: void _PyEval_SignalAsyncExc()

binder: struct _object * PySys_GetObject(const char *)

binder: int PySys_SetObject(const char *, struct _object *)

binder: struct _object * _PySys_GetObjectId(struct _Py_Identifier *)

binder: int _PySys_SetObjectId(struct _Py_Identifier *, struct _object *)

binder: void PySys_SetPath(const wchar_t *)

binder: void PySys_WriteStdout(const char *)

binder: void PySys_WriteStderr(const char *)

binder: void PySys_FormatStdout(const char *)

binder: void PySys_FormatStderr(const char *)

binder: void PySys_ResetWarnOptions()

binder: void PySys_AddWarnOption(const wchar_t *)

binder: void PySys_AddWarnOptionUnicode(struct _object *)

binder: int PySys_HasWarnOptions()

binder: void PySys_AddXOption(const wchar_t *)

binder: struct _object * PySys_GetXOptions()

binder: unsigned long _PySys_GetSizeOf(struct _object *)

binder: struct _object * PyOS_FSPath(struct _object *)

binder: int PyOS_InterruptOccurred()

binder: void PyOS_InitInterrupts()

binder: void PyOS_BeforeFork()

binder: void PyOS_AfterFork_Parent()

binder: void PyOS_AfterFork_Child()

binder: void PyOS_AfterFork()

binder: int _PyOS_IsMainThread()

binder: void _PySignal_AfterFork()

binder: struct _object * PyInit__imp()

binder: long PyImport_GetMagicNumber()

binder: const char * PyImport_GetMagicTag()

binder: struct _object * PyImport_ExecCodeModule(const char *, struct _object *)

binder: struct _object * PyImport_ExecCodeModuleEx(const char *, struct _object *, const char *)

binder: struct _object * PyImport_ExecCodeModuleWithPathnames(const char *, struct _object *, const char *, const char *)

binder: struct _object * PyImport_ExecCodeModuleObject(struct _object *, struct _object *, struct _object *, struct _object *)

binder: struct _object * PyImport_GetModuleDict()

binder: struct _object * PyImport_GetModule(struct _object *)

binder: int _PyImport_IsInitialized(struct _is *)

binder: struct _object * _PyImport_GetModuleId(struct _Py_Identifier *)

binder: struct _object * _PyImport_AddModuleObject(struct _object *, struct _object *)

binder: int _PyImport_SetModule(struct _object *, struct _object *)

binder: int _PyImport_SetModuleString(const char *, struct _object *)

binder: struct _object * PyImport_AddModuleObject(struct _object *)

binder: struct _object * PyImport_AddModule(const char *)

binder: struct _object * PyImport_ImportModule(const char *)

binder: struct _object * PyImport_ImportModuleNoBlock(const char *)

binder: struct _object * PyImport_ImportModuleLevel(const char *, struct _object *, struct _object *, struct _object *, int)

binder: struct _object * PyImport_ImportModuleLevelObject(struct _object *, struct _object *, struct _object *, struct _object *, int)

binder: struct _object * PyImport_GetImporter(struct _object *)

binder: struct _object * PyImport_Import(struct _object *)

binder: struct _object * PyImport_ReloadModule(struct _object *)

binder: void PyImport_Cleanup()

binder: int PyImport_ImportFrozenModuleObject(struct _object *)

binder: int PyImport_ImportFrozenModule(const char *)

binder: void _PyImport_AcquireLock()

binder: int _PyImport_ReleaseLock()

binder: void _PyImport_ReInitLock()

binder: struct _object * _PyImport_FindBuiltin(const char *, struct _object *)

binder: struct _object * _PyImport_FindExtensionObject(struct _object *, struct _object *)

binder: struct _object * _PyImport_FindExtensionObjectEx(struct _object *, struct _object *, struct _object *)

binder: int _PyImport_FixupBuiltin(struct _object *, const char *, struct _object *)

binder: int _PyImport_FixupExtensionObject(struct _object *, struct _object *, struct _object *, struct _object *)

binder: _inittab

binder: int PyImport_ExtendInittab(struct _inittab *)

binder: _frozen

binder: struct _object * PyObject_Call(struct _object *, struct _object *, struct _object *)

binder: int _PyObject_HasFastCall(struct _object *)

binder: struct _object * _PyObject_Call_Prepend(struct _object *, struct _object *, struct _object *, struct _object *)

binder: struct _object * _Py_CheckFunctionResult(struct _object *, struct _object *, const char *)

binder: struct _object * PyObject_CallObject(struct _object *, struct _object *)

binder: struct _object * PyObject_CallFunction(struct _object *, const char *)

binder: struct _object * PyObject_CallMethod(struct _object *, const char *, const char *)

binder: struct _object * _PyObject_CallMethodId(struct _object *, struct _Py_Identifier *, const char *)

binder: struct _object * _PyObject_CallFunction_SizeT(struct _object *, const char *)

binder: struct _object * _PyObject_CallMethod_SizeT(struct _object *, const char *, const char *)

binder: struct _object * _PyObject_CallMethodId_SizeT(struct _object *, struct _Py_Identifier *, const char *)

binder: struct _object * PyObject_CallFunctionObjArgs(struct _object *)

binder: struct _object * PyObject_CallMethodObjArgs(struct _object *, struct _object *)

binder: struct _object * _PyObject_CallMethodIdObjArgs(struct _object *, struct _Py_Identifier *)

binder: struct _object * PyObject_Type(struct _object *)

binder: long PyObject_Size(struct _object *)

binder: long PyObject_Length(struct _object *)

binder: int _PyObject_HasLen(struct _object *)

binder: long PyObject_LengthHint(struct _object *, long)

binder: struct _object * PyObject_GetItem(struct _object *, struct _object *)

binder: int PyObject_SetItem(struct _object *, struct _object *, struct _object *)

binder: int PyObject_DelItemString(struct _object *, const char *)

binder: int PyObject_DelItem(struct _object *, struct _object *)

binder: int PyObject_CheckReadBuffer(struct _object *)

binder: int PyObject_GetBuffer(struct _object *, struct bufferinfo *, int)

binder: void * PyBuffer_GetPointer(struct bufferinfo *, long *)

binder: int PyBuffer_SizeFromFormat(const char *)

binder: int PyBuffer_ToContiguous(void *, struct bufferinfo *, long, char)

binder: int PyBuffer_FromContiguous(struct bufferinfo *, void *, long, char)

binder: int PyObject_CopyData(struct _object *, struct _object *)

binder: int PyBuffer_IsContiguous(const struct bufferinfo *, char)

binder: void PyBuffer_FillContiguousStrides(int, long *, long *, int, char)

binder: int PyBuffer_FillInfo(struct bufferinfo *, struct _object *, void *, long, int, int)

binder: void PyBuffer_Release(struct bufferinfo *)

binder: struct _object * PyObject_Format(struct _object *, struct _object *)

binder: struct _object * PyObject_GetIter(struct _object *)

binder: struct _object * PyIter_Next(struct _object *)

binder: int PyNumber_Check(struct _object *)

binder: struct _object * PyNumber_Add(struct _object *, struct _object *)

binder: struct _object * PyNumber_Subtract(struct _object *, struct _object *)

binder: struct _object * PyNumber_Multiply(struct _object *, struct _object *)

binder: struct _object * PyNumber_MatrixMultiply(struct _object *, struct _object *)

binder: struct _object * PyNumber_FloorDivide(struct _object *, struct _object *)

binder: struct _object * PyNumber_TrueDivide(struct _object *, struct _object *)

binder: struct _object * PyNumber_Remainder(struct _object *, struct _object *)

binder: struct _object * PyNumber_Divmod(struct _object *, struct _object *)

binder: struct _object * PyNumber_Power(struct _object *, struct _object *, struct _object *)

binder: struct _object * PyNumber_Negative(struct _object *)

binder: struct _object * PyNumber_Positive(struct _object *)

binder: struct _object * PyNumber_Absolute(struct _object *)

binder: struct _object * PyNumber_Invert(struct _object *)

binder: struct _object * PyNumber_Lshift(struct _object *, struct _object *)

binder: struct _object * PyNumber_Rshift(struct _object *, struct _object *)

binder: struct _object * PyNumber_And(struct _object *, struct _object *)

binder: struct _object * PyNumber_Xor(struct _object *, struct _object *)

binder: struct _object * PyNumber_Or(struct _object *, struct _object *)

binder: struct _object * PyNumber_Index(struct _object *)

binder: long PyNumber_AsSsize_t(struct _object *, struct _object *)

binder: struct _object * PyNumber_Long(struct _object *)

binder: struct _object * PyNumber_Float(struct _object *)

binder: struct _object * PyNumber_InPlaceAdd(struct _object *, struct _object *)

binder: struct _object * PyNumber_InPlaceSubtract(struct _object *, struct _object *)

binder: struct _object * PyNumber_InPlaceMultiply(struct _object *, struct _object *)

binder: struct _object * PyNumber_InPlaceMatrixMultiply(struct _object *, struct _object *)

binder: struct _object * PyNumber_InPlaceFloorDivide(struct _object *, struct _object *)

binder: struct _object * PyNumber_InPlaceTrueDivide(struct _object *, struct _object *)

binder: struct _object * PyNumber_InPlaceRemainder(struct _object *, struct _object *)

binder: struct _object * PyNumber_InPlacePower(struct _object *, struct _object *, struct _object *)

binder: struct _object * PyNumber_InPlaceLshift(struct _object *, struct _object *)

binder: struct _object * PyNumber_InPlaceRshift(struct _object *, struct _object *)

binder: struct _object * PyNumber_InPlaceAnd(struct _object *, struct _object *)

binder: struct _object * PyNumber_InPlaceXor(struct _object *, struct _object *)

binder: struct _object * PyNumber_InPlaceOr(struct _object *, struct _object *)

binder: struct _object * PyNumber_ToBase(struct _object *, int)

binder: int PySequence_Check(struct _object *)

binder: long PySequence_Size(struct _object *)

binder: long PySequence_Length(struct _object *)

binder: struct _object * PySequence_Concat(struct _object *, struct _object *)

binder: struct _object * PySequence_Repeat(struct _object *, long)

binder: struct _object * PySequence_GetItem(struct _object *, long)

binder: struct _object * PySequence_GetSlice(struct _object *, long, long)

binder: int PySequence_SetItem(struct _object *, long, struct _object *)

binder: int PySequence_DelItem(struct _object *, long)

binder: int PySequence_SetSlice(struct _object *, long, long, struct _object *)

binder: int PySequence_DelSlice(struct _object *, long, long)

binder: struct _object * PySequence_Tuple(struct _object *)

binder: struct _object * PySequence_List(struct _object *)

binder: struct _object * PySequence_Fast(struct _object *, const char *)

binder: long PySequence_Count(struct _object *, struct _object *)

binder: int PySequence_Contains(struct _object *, struct _object *)

binder: long _PySequence_IterSearch(struct _object *, struct _object *, int)

binder: int PySequence_In(struct _object *, struct _object *)

binder: long PySequence_Index(struct _object *, struct _object *)

binder: struct _object * PySequence_InPlaceConcat(struct _object *, struct _object *)

binder: struct _object * PySequence_InPlaceRepeat(struct _object *, long)

binder: int PyMapping_Check(struct _object *)

binder: long PyMapping_Size(struct _object *)

binder: long PyMapping_Length(struct _object *)

binder: int PyMapping_HasKeyString(struct _object *, const char *)

binder: int PyMapping_HasKey(struct _object *, struct _object *)

binder: struct _object * PyMapping_Keys(struct _object *)

binder: struct _object * PyMapping_Values(struct _object *)

binder: struct _object * PyMapping_Items(struct _object *)

binder: struct _object * PyMapping_GetItemString(struct _object *, const char *)

binder: int PyMapping_SetItemString(struct _object *, const char *, struct _object *)

binder: int PyObject_IsInstance(struct _object *, struct _object *)

binder: int PyObject_IsSubclass(struct _object *, struct _object *)

binder: int _PyObject_RealIsInstance(struct _object *, struct _object *)

binder: int _PyObject_RealIsSubclass(struct _object *, struct _object *)

binder: void _Py_add_one_to_index_F(int, long *, const long *)

binder: void _Py_add_one_to_index_C(int, long *, const long *)

binder: int _Py_convert_optional_to_ssize_t(struct _object *, void *)

binder: struct _object * PyEval_EvalCode(struct _object *, struct _object *, struct _object *)

binder: struct _object * _PyEval_CallTracing(struct _object *, struct _object *)

binder: char * PyOS_double_to_string(double, char, int, int, int *)

binder: int PyOS_mystrnicmp(const char *, const char *, long)

binder: int PyOS_mystricmp(const char *, const char *)

binder: void _Py_dg_freedtoa(char *)

binder: double _Py_dg_stdnan(int)

binder: double _Py_dg_infinity(int)

binder: wchar_t * Py_DecodeLocale(const char *, unsigned long *)

binder: char * Py_EncodeLocale(const wchar_t *, unsigned long *)

binder: char * _Py_EncodeLocaleRaw(const wchar_t *, unsigned long *)

binder: struct _object * _Py_device_encoding(int)

binder: int _Py_fstat(int, struct stat *)

binder: int _Py_fstat_noraise(int, struct stat *)

binder: int _Py_stat(struct _object *, struct stat *)

binder: int _Py_open(const char *, int)

binder: int _Py_open_noraise(const char *, int)

binder: struct _IO_FILE * _Py_wfopen(const wchar_t *, const wchar_t *)

binder: struct _IO_FILE * _Py_fopen(const char *, const char *)

binder: struct _IO_FILE * _Py_fopen_obj(struct _object *, const char *)

binder: long _Py_read(int, void *, unsigned long)

binder: long _Py_write(int, const void *, unsigned long)

binder: long _Py_write_noraise(int, const void *, unsigned long)

binder: int _Py_wreadlink(const wchar_t *, wchar_t *, unsigned long)

binder: wchar_t * _Py_wrealpath(const wchar_t *, wchar_t *, unsigned long)

binder: wchar_t * _Py_wgetcwd(wchar_t *, unsigned long)

binder: int _Py_get_inheritable(int)

binder: int _Py_set_inheritable(int, int, int *)

binder: int _Py_set_inheritable_async_safe(int, int, int *)

binder: int _Py_dup(int)

binder: int _Py_get_blocking(int)

binder: int _Py_set_blocking(int, int)

binder: _frame

binder: void PyFrame_BlockSetup(struct _frame *, int, int, int)

binder: void PyFrame_LocalsToFast(struct _frame *, int)

binder: int PyFrame_FastToLocalsWithError(struct _frame *)

binder: void PyFrame_FastToLocals(struct _frame *)

binder: int PyFrame_ClearFreeList()

binder: void _PyFrame_DebugMallocStats(struct _IO_FILE *)

binder: int PyFrame_GetLineNumber(struct _frame *)

binder: __gnu_cxx::_Lock_policy

binder: __gnu_cxx::__concurrence_lock_error

binder: __gnu_cxx::__concurrence_unlock_error

binder: __gnu_cxx::__concurrence_broadcast_error

binder: __gnu_cxx::__concurrence_wait_error

binder: void __gnu_cxx::__throw_concurrence_lock_error()

binder: void __gnu_cxx::__throw_concurrence_unlock_error()

binder: void __gnu_cxx::__throw_concurrence_broadcast_error()

binder: void __gnu_cxx::__throw_concurrence_wait_error()

binder: __gnu_cxx::__mutex

binder: __gnu_cxx::__recursive_mutex

binder: __gnu_cxx::__scoped_lock

binder: __gnu_cxx::__cond

binder: std::bad_weak_ptr

binder: std::shared_ptr<int>

binder: std::shared_ptr<mmtf::StructureData>

binder: std::owner_less<void>

binder: std::memory_order

binder: std::__memory_order_modifier

binder: void std::atomic_thread_fence(enum std::memory_order)

binder: void std::atomic_signal_fence(enum std::memory_order)

binder: __atomic_flag_base

binder: std::atomic_flag

binder: std::auto_ptr<void>

binder: void * std::align(unsigned long, unsigned long, void *&, unsigned long &)

binder: std::pointer_safety

binder: void std::declare_reachable(void *)

binder: void std::declare_no_pointers(char *, unsigned long)

binder: void std::undeclare_no_pointers(char *, unsigned long)

binder: enum std::pointer_safety std::get_pointer_safety()

binder: std::type_index

binder: std::hash<std::type_index>

binder: pybind11::return_value_policy

binder: int pybind11::detail::log2(unsigned long, int)

binder: unsigned long pybind11::detail::size_in_ptrs(unsigned long)

binder: unsigned long pybind11::detail::instance_simple_holder_in_ptrs()

binder: pybind11::detail::nonsimple_values_and_holders

binder: pybind11::detail::instance

binder: pybind11::detail::void_type

binder: unsigned long pybind11::detail::constexpr_sum()

binder: int pybind11::detail::constexpr_impl::first(int)

binder: int pybind11::detail::constexpr_impl::last(int, int)

binder: void pybind11::detail::ignore_unused(const int *)

binder: pybind11::builtin_exception

binder: pybind11::stop_iteration

binder: pybind11::index_error

binder: pybind11::key_error

binder: pybind11::value_error

binder: pybind11::type_error

binder: pybind11::cast_error

binder: pybind11::reference_cast_error

binder: void pybind11::pybind11_fail(const char *)

binder: void pybind11::pybind11_fail(const std::string &)

binder: pybind11::error_scope

binder: pybind11::nodelete

binder: pybind11::buffer_info

binder: bool pybind11::detail::isinstance_generic(class pybind11::handle, const class std::type_info &)

binder: pybind11::detail::pyobject_tag

binder: pybind11::handle

binder: pybind11::object

binder: class std::__cxx11::basic_string<char> pybind11::detail::error_string()

binder: pybind11::error_already_set

binder: bool pybind11::isinstance(class pybind11::handle)

binder: bool pybind11::isinstance(class pybind11::handle, class pybind11::handle)

binder: bool pybind11::hasattr(class pybind11::handle, class pybind11::handle)

binder: bool pybind11::hasattr(class pybind11::handle, const char *)

binder: class pybind11::object pybind11::getattr(class pybind11::handle, class pybind11::handle)

binder: class pybind11::object pybind11::getattr(class pybind11::handle, const char *)

binder: class pybind11::object pybind11::getattr(class pybind11::handle, class pybind11::handle, class pybind11::handle)

binder: class pybind11::object pybind11::getattr(class pybind11::handle, const char *, class pybind11::handle)

binder: void pybind11::setattr(class pybind11::handle, class pybind11::handle, class pybind11::handle)

binder: void pybind11::setattr(class pybind11::handle, const char *, class pybind11::handle)

binder: long pybind11::hash(class pybind11::handle)

binder: class pybind11::handle pybind11::detail::get_function(class pybind11::handle)

binder: class pybind11::handle pybind11::detail::object_or_cast(struct _object *)

binder: pybind11::detail::accessor_policies::obj_attr

binder: pybind11::detail::accessor_policies::str_attr

binder: pybind11::detail::accessor_policies::generic_item

binder: pybind11::detail::accessor_policies::sequence_item

binder: pybind11::detail::accessor_policies::list_item

binder: pybind11::detail::accessor_policies::tuple_item

binder: pybind11::detail::iterator_policies::sequence_fast_readonly

binder: pybind11::detail::iterator_policies::sequence_slow_readwrite

binder: pybind11::detail::iterator_policies::dict_readonly

binder: bool pybind11::detail::PyIterable_Check(struct _object *)

binder: bool pybind11::detail::PyNone_Check(struct _object *)

binder: bool pybind11::detail::PyUnicode_Check_Permissive(struct _object *)

binder: pybind11::detail::kwargs_proxy

binder: pybind11::detail::args_proxy

binder: pybind11::iterator

binder: pybind11::iterable

binder: pybind11::str

binder: class pybind11::str pybind11::literals::operator""_s(const char *, unsigned long)

binder: pybind11::bytes

binder: pybind11::none

binder: pybind11::bool_

binder: pybind11::int_

binder: pybind11::float_

binder: pybind11::weakref

binder: pybind11::slice

binder: pybind11::capsule

binder: pybind11::tuple

binder: pybind11::dict

binder: pybind11::sequence

binder: pybind11::list

binder: pybind11::args

binder: pybind11::kwargs

binder: pybind11::set

binder: pybind11::function

binder: pybind11::buffer

binder: pybind11::memoryview

binder: unsigned long pybind11::len(class pybind11::handle)

binder: class pybind11::str pybind11::repr(class pybind11::handle)

binder: class pybind11::iterator pybind11::iter(class pybind11::handle)

binder: int __cxa_guard_acquire(long *)

binder: void __cxa_guard_release(long *)

binder: void __cxa_guard_abort(long *)

binder: int __cxa_finalize(void *)

binder: void __cxa_pure_virtual()

binder: void __cxa_deleted_virtual()

binder: void __cxa_bad_cast()

binder: void __cxa_bad_typeid()

binder: void __cxa_throw_bad_array_new_length()

binder: char * __cxa_demangle(const char *, char *, unsigned long *, int *)

binder: __cxxabiv1::__fundamental_type_info

binder: __cxxabiv1::__array_type_info

binder: __cxxabiv1::__function_type_info

binder: __cxxabiv1::__enum_type_info

binder: __cxxabiv1::__pbase_type_info

binder: __cxxabiv1::__pointer_type_info

binder: __cxxabiv1::__pointer_to_member_type_info

binder: __cxxabiv1::__base_class_type_info

binder: __cxxabiv1::__class_type_info

binder: __cxxabiv1::__si_class_type_info

binder: __cxxabiv1::__vmi_class_type_info

binder: void * __dynamic_cast(const void *, const class __cxxabiv1::__class_type_info *, const class __cxxabiv1::__class_type_info *, long)

binder: void * __cxa_get_exception_ptr(void *)

binder: void * __cxa_begin_catch(void *)

binder: void __cxa_end_catch()

binder: void __cxa_rethrow()

binder: class std::type_info * __cxa_current_exception_type()

binder: __cxxabiv1::__foreign_exception

binder: __gnu_cxx::recursive_init_error

binder: void pybind11::detail::erase_all(std::string &, const std::string &)

binder: void pybind11::detail::clean_type_id(std::string &)

binder: pybind11::detail::descr

binder: class pybind11::detail::descr pybind11::detail::_(const char *)

binder: class pybind11::detail::descr pybind11::detail::concat()

binder: struct _typeobject * pybind11::detail::make_static_property_type()

binder: struct _typeobject * pybind11::detail::make_default_metaclass()

binder: struct _object * pybind11::detail::make_object_base_type(struct _typeobject *)

binder: bool pybind11::detail::same_type(const class std::type_info &, const class std::type_info &)

binder: pybind11::detail::overload_hash

binder: pybind11::detail::internals

binder: pybind11::detail::type_info

binder: struct pybind11::detail::internals & pybind11::detail::get_internals()

binder: void * pybind11::get_shared_data(const std::string &)

binder: void * pybind11::set_shared_data(const std::string &, void *)

binder: pybind11::detail::loader_life_support

binder: int pybind11::detail::all_type_info_get_cache(struct _typeobject *)

binder: void pybind11::detail::all_type_info_populate(struct _typeobject *, int &)

binder: const int & pybind11::detail::all_type_info(struct _typeobject *)

binder: struct pybind11::detail::type_info * pybind11::detail::get_type_info(struct _typeobject *)

binder: struct pybind11::detail::type_info * pybind11::detail::get_local_type_info(const struct std::type_index &)

binder: struct pybind11::detail::type_info * pybind11::detail::get_global_type_info(const struct std::type_index &)

binder: struct pybind11::detail::type_info * pybind11::detail::get_type_info(const struct std::type_index &, bool)

binder: class pybind11::handle pybind11::detail::get_type_handle(const class std::type_info &, bool)

binder: pybind11::detail::value_and_holder

binder: pybind11::detail::values_and_holders

binder: class pybind11::handle pybind11::detail::get_object_handle(const void *, const struct pybind11::detail::type_info *)

binder: struct _ts * pybind11::detail::get_thread_state_unchecked()

binder: void pybind11::detail::keep_alive_impl(class pybind11::handle, class pybind11::handle)

binder: struct _object * pybind11::detail::make_new_instance(struct _typeobject *)

binder: pybind11::detail::type_caster_generic

binder: pybind11::detail::handle_type_name<pybind11::bytes>

binder: pybind11::detail::handle_type_name<pybind11::args>

binder: pybind11::detail::handle_type_name<pybind11::kwargs>

binder: int pybind11::detail::load_type(const class pybind11::handle &)

binder: pybind11::arg_v

binder: pybind11::detail::function_call

binder: pybind11::is_method

binder: pybind11::is_operator

binder: pybind11::scope

binder: pybind11::doc

binder: pybind11::name

binder: pybind11::sibling

binder: pybind11::multiple_inheritance

binder: pybind11::dynamic_attr

binder: pybind11::buffer_protocol

binder: pybind11::metaclass

binder: pybind11::module_local

binder: pybind11::arithmetic

binder: pybind11::call_guard<<>>

binder: pybind11::detail::op_id

binder: pybind11::detail::op_type

binder: void pybind11::detail::keep_alive_impl(unsigned long, unsigned long, struct pybind11::detail::function_call &, class pybind11::handle)

binder: pybind11::detail::argument_record

binder: pybind11::detail::function_record

binder: pybind11::detail::type_record

binder: pybind11::detail::is_new_style_constructor

binder: pybind11::options

binder: struct _typeobject * pybind11::detail::type_incref(struct _typeobject *)

binder: struct _object * pybind11_static_get(struct _object *, struct _object *, struct _object *)

binder: int pybind11_static_set(struct _object *, struct _object *, struct _object *)

binder: int pybind11_meta_setattro(struct _object *, struct _object *, struct _object *)

binder: struct _object * pybind11_meta_getattro(struct _object *, struct _object *)

binder: bool pybind11::detail::register_instance_impl(void *, struct pybind11::detail::instance *)

binder: bool pybind11::detail::deregister_instance_impl(void *, struct pybind11::detail::instance *)

binder: void pybind11::detail::register_instance(struct pybind11::detail::instance *, void *, const struct pybind11::detail::type_info *)

binder: bool pybind11::detail::deregister_instance(struct pybind11::detail::instance *, void *, const struct pybind11::detail::type_info *)

binder: struct _object * pybind11_object_new(struct _typeobject *, struct _object *, struct _object *)

binder: int pybind11_object_init(struct _object *, struct _object *, struct _object *)

binder: void pybind11::detail::add_patient(struct _object *, struct _object *)

binder: void pybind11::detail::clear_patients(struct _object *)

binder: void pybind11::detail::clear_instance(struct _object *)

binder: void pybind11_object_dealloc(struct _object *)

binder: struct _object * pybind11_get_dict(struct _object *, void *)

binder: int pybind11_set_dict(struct _object *, struct _object *, void *)

binder: int pybind11_clear(struct _object *)

binder: void pybind11::detail::enable_dynamic_attributes(struct _heaptypeobject *)

binder: int pybind11_getbuffer(struct _object *, struct bufferinfo *, int)

binder: void pybind11_releasebuffer(struct _object *, struct bufferinfo *)

binder: void pybind11::detail::enable_buffer_protocol(struct _heaptypeobject *)

binder: struct _object * pybind11::detail::make_new_python_type(const struct pybind11::detail::type_record &)

binder: void pybind11::detail::initimpl::no_nullptr(void *)

binder: pybind11::cpp_function

binder: pybind11::module

binder: class pybind11::dict pybind11::globals()

binder: pybind11::detail::generic_type

binder: void pybind11::detail::call_operator_delete(void *, unsigned long)

binder: void pybind11::detail::print(class pybind11::tuple, class pybind11::dict)

binder: pybind11::gil_scoped_acquire

binder: pybind11::gil_scoped_release

binder: class pybind11::function pybind11::get_type_overload(const void *, const struct pybind11::detail::type_info *, const char *)

binder: pybind11::detail::self_t

binder: pybind11::detail::undefined_t

binder: struct pybind11::detail::self_t pybind11::detail::__self()

binder: void msgpack_sd_binder(class pybind11::handle &)

1 error generated.
Error while processing /home/danpf/git/binder/examples/mmtf_example_scratch/all_cmake_includes.hpp.
Generate bindings, pass 1...
Generate bindings, pass 2...
Generate bindings, pass 3...
Generate bindings, pass 4...
Sorting Binders...
Sorting Binders... Done.
Writing code...
Writing code... Done.
-- The C compiler identification is GNU 7.4.0
-- The CXX compiler identification is GNU 7.4.0
-- Check for working C compiler: /usr/bin/cc
-- Check for working C compiler: /usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Check for working CXX compiler: /usr/bin/c++
-- Check for working CXX compiler: /usr/bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
CMake Warning (dev) in CMakeLists.txt:
  No cmake_minimum_required command is present.  A line of code such as

    cmake_minimum_required(VERSION 3.10)

  should be added at the top of the file.  The version specified may be lower
  if you wish to support older CMake versions for this project.  For more
  information run "cmake --help-policy CMP0000".
This warning is for project developers.  Use -Wno-dev to suppress it.

-- Configuring done
-- Generating done
-- Build files have been written to: /home/danpf/git/binder/examples/mmtf_example_scratch/cmake_bindings
[1/2] Building CXX object CMakeFiles/mmtf_cpp.dir/mmtf_cpp.o
FAILED: CMakeFiles/mmtf_cpp.dir/mmtf_cpp.o 
/usr/bin/c++  -DNDEBUG -Dmmtf_cpp_EXPORTS -I/home/danpf/git/binder/examples/mmtf_example_scratch/../../source -I/home/danpf/git/binder/examples/mmtf_example_scratch/mmtf-cpp/include -I/home/danpf/git/binder/examples/mmtf_example_scratch/mmtf-cpp/include/mmtf -I/home/danpf/git/binder/examples/mmtf_example_scratch/msgpack-c/include -I/home/danpf/git/binder/examples/mmtf_example_scratch/../../build/pybind11/include -I/home/danpf/.local/share/pyenv/versions/3.7.0/include/python3.7m -fPIC -MD -MT CMakeFiles/mmtf_cpp.dir/mmtf_cpp.o -MF CMakeFiles/mmtf_cpp.dir/mmtf_cpp.o.d -o CMakeFiles/mmtf_cpp.dir/mmtf_cpp.o -c mmtf_cpp.cpp
In file included from /home/danpf/git/binder/examples/mmtf_example_scratch/mmtf-cpp/include/mmtf/structure_data.hpp:25:0,
                 from /home/danpf/git/binder/examples/mmtf_example_scratch/mmtf-cpp/include/mmtf/decoder.hpp:16,
                 from /home/danpf/git/binder/examples/mmtf_example_scratch/mmtf-cpp/include/mmtf.hpp:15,
                 from mmtf_cpp.cpp:12:
/home/danpf/git/binder/examples/mmtf_example_scratch/msgpack-c/include/msgpack.hpp:10:10: fatal error: msgpackmsgpack/object.hpp: No such file or directory
 #include <msgpackmsgpack/object.hpp>
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~
compilation terminated.
ninja: build stopped: subcommand failed.
BINDER COMMAND: /home/danpf/git/binder/examples/mmtf_example_scratch/../../build/llvm-4.0.0/build_4.0.0.linux.danpf-lappytappy.release/bin/binder --root-module mmtf_cpp --prefix /home/danpf/git/binder/examples/mmtf_example_scratch/cmake_bindings/ --bind="mmtf" --single-file --annotate-includes --config config.cfg all_cmake_includes.hpp -- -std=c++11 -I/home/danpf/git/binder/examples/mmtf_example_scratch/mmtf-cpp/include -I/home/danpf/.local/share/pyenv/versions/3.7.0/include/python3.7m -I/home/danpf/git/binder/examples/mmtf_example_scratch/msgpack-c/include -I/home/danpf/git/binder/examples/mmtf_example_scratch/../../build/pybind11/include -DNDEBUG -v
Testing Python lib...
Traceback (most recent call last):
  File "bind_mmtf_cpp.py", line 179, in <module>
    main()
  File "bind_mmtf_cpp.py", line 175, in main
    compile_sources(sources_to_compile)
  File "bind_mmtf_cpp.py", line 161, in compile_sources
    import mmtf_cpp
ModuleNotFoundError: No module named 'mmtf_cpp'
