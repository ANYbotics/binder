#include <functional> // std::less
#include <iostream> // --trace
#include <iterator> // __gnu_cxx::__normal_iterator
#include <map> // std::map
#include <memory> // std::allocator
#include <msgpack/v1/detail/cpp11_zone.hpp> // msgpack::v1::zone
#include <msgpack/v2/object_fwd.hpp> // msgpack::v2::object
#include <sstream> // __str__
#include <string> // std::__cxx11::basic_string
#include <string> // std::char_traits
#include <utility> // std::pair
#include <vector> // std::vector

#include <pybind11/pybind11.h>
#include <functional>
#include <string>
#include <mmtf.hpp>


#ifndef BINDER_PYBIND11_TYPE_CASTER
	#define BINDER_PYBIND11_TYPE_CASTER
	PYBIND11_DECLARE_HOLDER_TYPE(T, std::shared_ptr<T>);
	PYBIND11_DECLARE_HOLDER_TYPE(T, T*);
	PYBIND11_MAKE_OPAQUE(std::shared_ptr<void>);
#endif

void bind_std_stl_vector_2(std::function< pybind11::module &(std::string const &namespace_) > &M)
{
	std::cout << "B171_[std::vector<mmtf::Transform>] ";
	{ // std::vector file:bits/stl_vector.h line:216
		pybind11::class_<std::vector<mmtf::Transform>, std::shared_ptr<std::vector<mmtf::Transform>>> cl(M("std"), "vector_mmtf_Transform_t", "");
		pybind11::handle cl_type = cl;

		cl.def( pybind11::init( [](){ return new std::vector<mmtf::Transform>(); } ) );
		cl.def( pybind11::init<const class std::allocator<struct mmtf::Transform> &>(), pybind11::arg("__a") );

		cl.def( pybind11::init( [](unsigned long const & a0){ return new std::vector<mmtf::Transform>(a0); } ), "doc");
		cl.def( pybind11::init<unsigned long, const class std::allocator<struct mmtf::Transform> &>(), pybind11::arg("__n"), pybind11::arg("__a") );

		cl.def( pybind11::init( [](unsigned long const & a0, const struct mmtf::Transform & a1){ return new std::vector<mmtf::Transform>(a0, a1); } ), "doc");
		cl.def( pybind11::init<unsigned long, const struct mmtf::Transform &, const class std::allocator<struct mmtf::Transform> &>(), pybind11::arg("__n"), pybind11::arg("__value"), pybind11::arg("__a") );

		cl.def( pybind11::init( [](std::vector<mmtf::Transform> const &o){ return new std::vector<mmtf::Transform>(o); } ) );
		cl.def( pybind11::init<const class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > &, const class std::allocator<struct mmtf::Transform> &>(), pybind11::arg("__x"), pybind11::arg("__a") );

		cl.def("assign", (class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > & (std::vector<mmtf::Transform>::*)(const class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > &)) &std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::operator=, "C++: std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::operator=(const class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > &) --> class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > &", pybind11::return_value_policy::automatic, pybind11::arg("__x"));
		cl.def("assign", (void (std::vector<mmtf::Transform>::*)(unsigned long, const struct mmtf::Transform &)) &std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::assign, "C++: std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::assign(unsigned long, const struct mmtf::Transform &) --> void", pybind11::arg("__n"), pybind11::arg("__val"));
		cl.def("begin", (class __gnu_cxx::__normal_iterator<struct mmtf::Transform *, class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > > (std::vector<mmtf::Transform>::*)()) &std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::begin, "C++: std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::begin() --> class __gnu_cxx::__normal_iterator<struct mmtf::Transform *, class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > >");
		cl.def("end", (class __gnu_cxx::__normal_iterator<struct mmtf::Transform *, class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > > (std::vector<mmtf::Transform>::*)()) &std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::end, "C++: std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::end() --> class __gnu_cxx::__normal_iterator<struct mmtf::Transform *, class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > >");
		cl.def("cbegin", (class __gnu_cxx::__normal_iterator<const struct mmtf::Transform *, class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > > (std::vector<mmtf::Transform>::*)() const) &std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::cbegin, "C++: std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::cbegin() const --> class __gnu_cxx::__normal_iterator<const struct mmtf::Transform *, class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > >");
		cl.def("cend", (class __gnu_cxx::__normal_iterator<const struct mmtf::Transform *, class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > > (std::vector<mmtf::Transform>::*)() const) &std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::cend, "C++: std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::cend() const --> class __gnu_cxx::__normal_iterator<const struct mmtf::Transform *, class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > >");
		cl.def("size", (unsigned long (std::vector<mmtf::Transform>::*)() const) &std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::size, "C++: std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::size() const --> unsigned long");
		cl.def("max_size", (unsigned long (std::vector<mmtf::Transform>::*)() const) &std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::max_size, "C++: std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::max_size() const --> unsigned long");
		cl.def("resize", (void (std::vector<mmtf::Transform>::*)(unsigned long)) &std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::resize, "C++: std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::resize(unsigned long) --> void", pybind11::arg("__new_size"));
		cl.def("resize", (void (std::vector<mmtf::Transform>::*)(unsigned long, const struct mmtf::Transform &)) &std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::resize, "C++: std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::resize(unsigned long, const struct mmtf::Transform &) --> void", pybind11::arg("__new_size"), pybind11::arg("__x"));
		cl.def("shrink_to_fit", (void (std::vector<mmtf::Transform>::*)()) &std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::shrink_to_fit, "C++: std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::shrink_to_fit() --> void");
		cl.def("capacity", (unsigned long (std::vector<mmtf::Transform>::*)() const) &std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::capacity, "C++: std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::capacity() const --> unsigned long");
		cl.def("empty", (bool (std::vector<mmtf::Transform>::*)() const) &std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::empty, "C++: std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::empty() const --> bool");
		cl.def("reserve", (void (std::vector<mmtf::Transform>::*)(unsigned long)) &std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::reserve, "C++: std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::reserve(unsigned long) --> void", pybind11::arg("__n"));
		cl.def("__getitem__", (struct mmtf::Transform & (std::vector<mmtf::Transform>::*)(unsigned long)) &std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::operator[], "C++: std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::operator[](unsigned long) --> struct mmtf::Transform &", pybind11::return_value_policy::automatic, pybind11::arg("__n"));
		cl.def("at", (struct mmtf::Transform & (std::vector<mmtf::Transform>::*)(unsigned long)) &std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::at, "C++: std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::at(unsigned long) --> struct mmtf::Transform &", pybind11::return_value_policy::automatic, pybind11::arg("__n"));
		cl.def("front", (struct mmtf::Transform & (std::vector<mmtf::Transform>::*)()) &std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::front, "C++: std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::front() --> struct mmtf::Transform &", pybind11::return_value_policy::automatic);
		cl.def("back", (struct mmtf::Transform & (std::vector<mmtf::Transform>::*)()) &std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::back, "C++: std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::back() --> struct mmtf::Transform &", pybind11::return_value_policy::automatic);
		cl.def("data", (struct mmtf::Transform * (std::vector<mmtf::Transform>::*)()) &std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::data, "C++: std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::data() --> struct mmtf::Transform *", pybind11::return_value_policy::automatic);
		cl.def("push_back", (void (std::vector<mmtf::Transform>::*)(const struct mmtf::Transform &)) &std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::push_back, "C++: std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::push_back(const struct mmtf::Transform &) --> void", pybind11::arg("__x"));
		cl.def("pop_back", (void (std::vector<mmtf::Transform>::*)()) &std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::pop_back, "C++: std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::pop_back() --> void");
		cl.def("insert", (class __gnu_cxx::__normal_iterator<struct mmtf::Transform *, class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > > (std::vector<mmtf::Transform>::*)(class __gnu_cxx::__normal_iterator<const struct mmtf::Transform *, class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > >, const struct mmtf::Transform &)) &std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::insert, "C++: std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::insert(class __gnu_cxx::__normal_iterator<const struct mmtf::Transform *, class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > >, const struct mmtf::Transform &) --> class __gnu_cxx::__normal_iterator<struct mmtf::Transform *, class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > >", pybind11::arg("__position"), pybind11::arg("__x"));
		cl.def("insert", (class __gnu_cxx::__normal_iterator<struct mmtf::Transform *, class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > > (std::vector<mmtf::Transform>::*)(class __gnu_cxx::__normal_iterator<const struct mmtf::Transform *, class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > >, unsigned long, const struct mmtf::Transform &)) &std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::insert, "C++: std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::insert(class __gnu_cxx::__normal_iterator<const struct mmtf::Transform *, class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > >, unsigned long, const struct mmtf::Transform &) --> class __gnu_cxx::__normal_iterator<struct mmtf::Transform *, class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > >", pybind11::arg("__position"), pybind11::arg("__n"), pybind11::arg("__x"));
		cl.def("erase", (class __gnu_cxx::__normal_iterator<struct mmtf::Transform *, class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > > (std::vector<mmtf::Transform>::*)(class __gnu_cxx::__normal_iterator<const struct mmtf::Transform *, class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > >)) &std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::erase, "C++: std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::erase(class __gnu_cxx::__normal_iterator<const struct mmtf::Transform *, class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > >) --> class __gnu_cxx::__normal_iterator<struct mmtf::Transform *, class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > >", pybind11::arg("__position"));
		cl.def("erase", (class __gnu_cxx::__normal_iterator<struct mmtf::Transform *, class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > > (std::vector<mmtf::Transform>::*)(class __gnu_cxx::__normal_iterator<const struct mmtf::Transform *, class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > >, class __gnu_cxx::__normal_iterator<const struct mmtf::Transform *, class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > >)) &std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::erase, "C++: std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::erase(class __gnu_cxx::__normal_iterator<const struct mmtf::Transform *, class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > >, class __gnu_cxx::__normal_iterator<const struct mmtf::Transform *, class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > >) --> class __gnu_cxx::__normal_iterator<struct mmtf::Transform *, class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > >", pybind11::arg("__first"), pybind11::arg("__last"));
		cl.def("swap", (void (std::vector<mmtf::Transform>::*)(class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > &)) &std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::swap, "C++: std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::swap(class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > &) --> void", pybind11::arg("__x"));
		cl.def("clear", (void (std::vector<mmtf::Transform>::*)()) &std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::clear, "C++: std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::clear() --> void");
	}
	std::cout << "B172_[std::vector<float>] ";
	{ // std::vector file:bits/stl_vector.h line:216
		pybind11::class_<std::vector<float>, std::shared_ptr<std::vector<float>>> cl(M("std"), "vector_float_t", "");
		pybind11::handle cl_type = cl;

		cl.def( pybind11::init( [](){ return new std::vector<float>(); } ) );
		cl.def( pybind11::init<const class std::allocator<float> &>(), pybind11::arg("__a") );

		cl.def( pybind11::init( [](unsigned long const & a0){ return new std::vector<float>(a0); } ), "doc");
		cl.def( pybind11::init<unsigned long, const class std::allocator<float> &>(), pybind11::arg("__n"), pybind11::arg("__a") );

		cl.def( pybind11::init( [](unsigned long const & a0, const float & a1){ return new std::vector<float>(a0, a1); } ), "doc");
		cl.def( pybind11::init<unsigned long, const float &, const class std::allocator<float> &>(), pybind11::arg("__n"), pybind11::arg("__value"), pybind11::arg("__a") );

		cl.def( pybind11::init( [](std::vector<float> const &o){ return new std::vector<float>(o); } ) );
		cl.def( pybind11::init<const class std::vector<float, class std::allocator<float> > &, const class std::allocator<float> &>(), pybind11::arg("__x"), pybind11::arg("__a") );

		cl.def("assign", (class std::vector<float, class std::allocator<float> > & (std::vector<float>::*)(const class std::vector<float, class std::allocator<float> > &)) &std::vector<float, std::allocator<float> >::operator=, "C++: std::vector<float, std::allocator<float> >::operator=(const class std::vector<float, class std::allocator<float> > &) --> class std::vector<float, class std::allocator<float> > &", pybind11::return_value_policy::automatic, pybind11::arg("__x"));
		cl.def("assign", (void (std::vector<float>::*)(unsigned long, const float &)) &std::vector<float, std::allocator<float> >::assign, "C++: std::vector<float, std::allocator<float> >::assign(unsigned long, const float &) --> void", pybind11::arg("__n"), pybind11::arg("__val"));
		cl.def("begin", (class __gnu_cxx::__normal_iterator<float *, class std::vector<float, class std::allocator<float> > > (std::vector<float>::*)()) &std::vector<float, std::allocator<float> >::begin, "C++: std::vector<float, std::allocator<float> >::begin() --> class __gnu_cxx::__normal_iterator<float *, class std::vector<float, class std::allocator<float> > >");
		cl.def("end", (class __gnu_cxx::__normal_iterator<float *, class std::vector<float, class std::allocator<float> > > (std::vector<float>::*)()) &std::vector<float, std::allocator<float> >::end, "C++: std::vector<float, std::allocator<float> >::end() --> class __gnu_cxx::__normal_iterator<float *, class std::vector<float, class std::allocator<float> > >");
		cl.def("cbegin", (class __gnu_cxx::__normal_iterator<const float *, class std::vector<float, class std::allocator<float> > > (std::vector<float>::*)() const) &std::vector<float, std::allocator<float> >::cbegin, "C++: std::vector<float, std::allocator<float> >::cbegin() const --> class __gnu_cxx::__normal_iterator<const float *, class std::vector<float, class std::allocator<float> > >");
		cl.def("cend", (class __gnu_cxx::__normal_iterator<const float *, class std::vector<float, class std::allocator<float> > > (std::vector<float>::*)() const) &std::vector<float, std::allocator<float> >::cend, "C++: std::vector<float, std::allocator<float> >::cend() const --> class __gnu_cxx::__normal_iterator<const float *, class std::vector<float, class std::allocator<float> > >");
		cl.def("size", (unsigned long (std::vector<float>::*)() const) &std::vector<float, std::allocator<float> >::size, "C++: std::vector<float, std::allocator<float> >::size() const --> unsigned long");
		cl.def("max_size", (unsigned long (std::vector<float>::*)() const) &std::vector<float, std::allocator<float> >::max_size, "C++: std::vector<float, std::allocator<float> >::max_size() const --> unsigned long");
		cl.def("resize", (void (std::vector<float>::*)(unsigned long)) &std::vector<float, std::allocator<float> >::resize, "C++: std::vector<float, std::allocator<float> >::resize(unsigned long) --> void", pybind11::arg("__new_size"));
		cl.def("resize", (void (std::vector<float>::*)(unsigned long, const float &)) &std::vector<float, std::allocator<float> >::resize, "C++: std::vector<float, std::allocator<float> >::resize(unsigned long, const float &) --> void", pybind11::arg("__new_size"), pybind11::arg("__x"));
		cl.def("shrink_to_fit", (void (std::vector<float>::*)()) &std::vector<float, std::allocator<float> >::shrink_to_fit, "C++: std::vector<float, std::allocator<float> >::shrink_to_fit() --> void");
		cl.def("capacity", (unsigned long (std::vector<float>::*)() const) &std::vector<float, std::allocator<float> >::capacity, "C++: std::vector<float, std::allocator<float> >::capacity() const --> unsigned long");
		cl.def("empty", (bool (std::vector<float>::*)() const) &std::vector<float, std::allocator<float> >::empty, "C++: std::vector<float, std::allocator<float> >::empty() const --> bool");
		cl.def("reserve", (void (std::vector<float>::*)(unsigned long)) &std::vector<float, std::allocator<float> >::reserve, "C++: std::vector<float, std::allocator<float> >::reserve(unsigned long) --> void", pybind11::arg("__n"));
		cl.def("__getitem__", (float & (std::vector<float>::*)(unsigned long)) &std::vector<float, std::allocator<float> >::operator[], "C++: std::vector<float, std::allocator<float> >::operator[](unsigned long) --> float &", pybind11::return_value_policy::automatic, pybind11::arg("__n"));
		cl.def("at", (float & (std::vector<float>::*)(unsigned long)) &std::vector<float, std::allocator<float> >::at, "C++: std::vector<float, std::allocator<float> >::at(unsigned long) --> float &", pybind11::return_value_policy::automatic, pybind11::arg("__n"));
		cl.def("front", (float & (std::vector<float>::*)()) &std::vector<float, std::allocator<float> >::front, "C++: std::vector<float, std::allocator<float> >::front() --> float &", pybind11::return_value_policy::automatic);
		cl.def("back", (float & (std::vector<float>::*)()) &std::vector<float, std::allocator<float> >::back, "C++: std::vector<float, std::allocator<float> >::back() --> float &", pybind11::return_value_policy::automatic);
		cl.def("data", (float * (std::vector<float>::*)()) &std::vector<float, std::allocator<float> >::data, "C++: std::vector<float, std::allocator<float> >::data() --> float *", pybind11::return_value_policy::automatic);
		cl.def("push_back", (void (std::vector<float>::*)(const float &)) &std::vector<float, std::allocator<float> >::push_back, "C++: std::vector<float, std::allocator<float> >::push_back(const float &) --> void", pybind11::arg("__x"));
		cl.def("pop_back", (void (std::vector<float>::*)()) &std::vector<float, std::allocator<float> >::pop_back, "C++: std::vector<float, std::allocator<float> >::pop_back() --> void");
		cl.def("insert", (class __gnu_cxx::__normal_iterator<float *, class std::vector<float, class std::allocator<float> > > (std::vector<float>::*)(class __gnu_cxx::__normal_iterator<const float *, class std::vector<float, class std::allocator<float> > >, const float &)) &std::vector<float, std::allocator<float> >::insert, "C++: std::vector<float, std::allocator<float> >::insert(class __gnu_cxx::__normal_iterator<const float *, class std::vector<float, class std::allocator<float> > >, const float &) --> class __gnu_cxx::__normal_iterator<float *, class std::vector<float, class std::allocator<float> > >", pybind11::arg("__position"), pybind11::arg("__x"));
		cl.def("insert", (class __gnu_cxx::__normal_iterator<float *, class std::vector<float, class std::allocator<float> > > (std::vector<float>::*)(class __gnu_cxx::__normal_iterator<const float *, class std::vector<float, class std::allocator<float> > >, unsigned long, const float &)) &std::vector<float, std::allocator<float> >::insert, "C++: std::vector<float, std::allocator<float> >::insert(class __gnu_cxx::__normal_iterator<const float *, class std::vector<float, class std::allocator<float> > >, unsigned long, const float &) --> class __gnu_cxx::__normal_iterator<float *, class std::vector<float, class std::allocator<float> > >", pybind11::arg("__position"), pybind11::arg("__n"), pybind11::arg("__x"));
		cl.def("erase", (class __gnu_cxx::__normal_iterator<float *, class std::vector<float, class std::allocator<float> > > (std::vector<float>::*)(class __gnu_cxx::__normal_iterator<const float *, class std::vector<float, class std::allocator<float> > >)) &std::vector<float, std::allocator<float> >::erase, "C++: std::vector<float, std::allocator<float> >::erase(class __gnu_cxx::__normal_iterator<const float *, class std::vector<float, class std::allocator<float> > >) --> class __gnu_cxx::__normal_iterator<float *, class std::vector<float, class std::allocator<float> > >", pybind11::arg("__position"));
		cl.def("erase", (class __gnu_cxx::__normal_iterator<float *, class std::vector<float, class std::allocator<float> > > (std::vector<float>::*)(class __gnu_cxx::__normal_iterator<const float *, class std::vector<float, class std::allocator<float> > >, class __gnu_cxx::__normal_iterator<const float *, class std::vector<float, class std::allocator<float> > >)) &std::vector<float, std::allocator<float> >::erase, "C++: std::vector<float, std::allocator<float> >::erase(class __gnu_cxx::__normal_iterator<const float *, class std::vector<float, class std::allocator<float> > >, class __gnu_cxx::__normal_iterator<const float *, class std::vector<float, class std::allocator<float> > >) --> class __gnu_cxx::__normal_iterator<float *, class std::vector<float, class std::allocator<float> > >", pybind11::arg("__first"), pybind11::arg("__last"));
		cl.def("swap", (void (std::vector<float>::*)(class std::vector<float, class std::allocator<float> > &)) &std::vector<float, std::allocator<float> >::swap, "C++: std::vector<float, std::allocator<float> >::swap(class std::vector<float, class std::allocator<float> > &) --> void", pybind11::arg("__x"));
		cl.def("clear", (void (std::vector<float>::*)()) &std::vector<float, std::allocator<float> >::clear, "C++: std::vector<float, std::allocator<float> >::clear() --> void");
	}
}
