#include <functional> // std::less
#include <iostream> // --trace
#include <iterator> // __gnu_cxx::__normal_iterator
#include <map> // std::_Rb_tree_const_iterator
#include <map> // std::_Rb_tree_iterator
#include <map> // std::map
#include <memory> // std::allocator
#include <sstream> // __str__
#include <string> // std::__cxx11::basic_string
#include <string> // std::char_traits
#include <utility> // std::pair
#include <vector> // std::vector

#include <pybind11/pybind11.h>
#include <functional>
#include <string>
#include <mmtf.hpp>


#ifndef BINDER_PYBIND11_TYPE_CASTER
	#define BINDER_PYBIND11_TYPE_CASTER
	PYBIND11_DECLARE_HOLDER_TYPE(T, std::shared_ptr<T>);
	PYBIND11_DECLARE_HOLDER_TYPE(T, T*);
	PYBIND11_MAKE_OPAQUE(std::shared_ptr<void>);
#endif

void bind_std_stl_map(std::function< pybind11::module &(std::string const &namespace_) > &M)
{
	std::cout << "B195_[std::map<std::string,msgpack::v2::object,std::less<std::string >,std::allocator<std::pair<const std::string, msgpack::v2::object> >>] ";
	{ // std::map file:bits/stl_map.h line:99
		pybind11::class_<std::map<std::string,msgpack::v2::object,std::less<std::string >,std::allocator<std::pair<const std::string, msgpack::v2::object> >>, std::shared_ptr<std::map<std::string,msgpack::v2::object,std::less<std::string >,std::allocator<std::pair<const std::string, msgpack::v2::object> >>>> cl(M("std"), "map_std_string_msgpack_v2_object_std_less_std_string_std_allocator_std_pair_const_std_string_msgpack_v2_object_t", "");
		pybind11::handle cl_type = cl;

		cl.def( pybind11::init( [](){ return new std::map<std::string,msgpack::v2::object,std::less<std::string >,std::allocator<std::pair<const std::string, msgpack::v2::object> >>(); } ) );
		cl.def( pybind11::init( [](const struct std::less<class std::__cxx11::basic_string<char> > & a0){ return new std::map<std::string,msgpack::v2::object,std::less<std::string >,std::allocator<std::pair<const std::string, msgpack::v2::object> >>(a0); } ), "doc");
		cl.def( pybind11::init<const struct std::less<std::string > &, const class std::allocator<struct std::pair<const std::string, struct msgpack::v2::object> > &>(), pybind11::arg("__comp"), pybind11::arg("__a") );

		cl.def( pybind11::init( [](std::map<std::string,msgpack::v2::object,std::less<std::string >,std::allocator<std::pair<const std::string, msgpack::v2::object> >> const &o){ return new std::map<std::string,msgpack::v2::object,std::less<std::string >,std::allocator<std::pair<const std::string, msgpack::v2::object> >>(o); } ) );
		cl.def( pybind11::init<const class std::allocator<struct std::pair<const std::string, struct msgpack::v2::object> > &>(), pybind11::arg("__a") );

		cl.def( pybind11::init<const class std::map<std::string, struct msgpack::v2::object, struct std::less<std::string >, class std::allocator<struct std::pair<const std::string, struct msgpack::v2::object> > > &, const class std::allocator<struct std::pair<const std::string, struct msgpack::v2::object> > &>(), pybind11::arg("__m"), pybind11::arg("__a") );

		cl.def("assign", (class std::map<std::string, struct msgpack::v2::object, struct std::less<std::string >, class std::allocator<struct std::pair<const std::string, struct msgpack::v2::object> > > & (std::map<std::string,msgpack::v2::object,std::less<std::string >,std::allocator<std::pair<const std::string, msgpack::v2::object> >>::*)(const class std::map<std::string, struct msgpack::v2::object, struct std::less<std::string >, class std::allocator<struct std::pair<const std::string, struct msgpack::v2::object> > > &)) &std::map<std::string, msgpack::v2::object, std::less<std::string >, std::allocator<std::pair<const std::string, msgpack::v2::object> > >::operator=, "C++: std::map<std::__cxx11::basic_string<char>, msgpack::v2::object, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, msgpack::v2::object> > >::operator=(const class std::map<std::string, struct msgpack::v2::object, struct std::less<std::string >, class std::allocator<struct std::pair<const std::string, struct msgpack::v2::object> > > &) --> class std::map<std::string, struct msgpack::v2::object, struct std::less<std::string >, class std::allocator<struct std::pair<const std::string, struct msgpack::v2::object> > > &", pybind11::return_value_policy::automatic, pybind11::arg(""));
		cl.def("get_allocator", (class std::allocator<struct std::pair<const std::string, struct msgpack::v2::object> > (std::map<std::string,msgpack::v2::object,std::less<std::string >,std::allocator<std::pair<const std::string, msgpack::v2::object> >>::*)() const) &std::map<std::string, msgpack::v2::object, std::less<std::string >, std::allocator<std::pair<const std::string, msgpack::v2::object> > >::get_allocator, "C++: std::map<std::__cxx11::basic_string<char>, msgpack::v2::object, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, msgpack::v2::object> > >::get_allocator() const --> class std::allocator<struct std::pair<const std::string, struct msgpack::v2::object> >");
		cl.def("empty", (bool (std::map<std::string,msgpack::v2::object,std::less<std::string >,std::allocator<std::pair<const std::string, msgpack::v2::object> >>::*)() const) &std::map<std::string, msgpack::v2::object, std::less<std::string >, std::allocator<std::pair<const std::string, msgpack::v2::object> > >::empty, "C++: std::map<std::__cxx11::basic_string<char>, msgpack::v2::object, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, msgpack::v2::object> > >::empty() const --> bool");
		cl.def("size", (unsigned long (std::map<std::string,msgpack::v2::object,std::less<std::string >,std::allocator<std::pair<const std::string, msgpack::v2::object> >>::*)() const) &std::map<std::string, msgpack::v2::object, std::less<std::string >, std::allocator<std::pair<const std::string, msgpack::v2::object> > >::size, "C++: std::map<std::__cxx11::basic_string<char>, msgpack::v2::object, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, msgpack::v2::object> > >::size() const --> unsigned long");
		cl.def("max_size", (unsigned long (std::map<std::string,msgpack::v2::object,std::less<std::string >,std::allocator<std::pair<const std::string, msgpack::v2::object> >>::*)() const) &std::map<std::string, msgpack::v2::object, std::less<std::string >, std::allocator<std::pair<const std::string, msgpack::v2::object> > >::max_size, "C++: std::map<std::__cxx11::basic_string<char>, msgpack::v2::object, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, msgpack::v2::object> > >::max_size() const --> unsigned long");
		cl.def("__getitem__", (struct msgpack::v2::object & (std::map<std::string,msgpack::v2::object,std::less<std::string >,std::allocator<std::pair<const std::string, msgpack::v2::object> >>::*)(const std::string &)) &std::map<std::string, msgpack::v2::object, std::less<std::string >, std::allocator<std::pair<const std::string, msgpack::v2::object> > >::operator[], "C++: std::map<std::__cxx11::basic_string<char>, msgpack::v2::object, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, msgpack::v2::object> > >::operator[](const std::string &) --> struct msgpack::v2::object &", pybind11::return_value_policy::automatic, pybind11::arg("__k"));
		cl.def("at", (struct msgpack::v2::object & (std::map<std::string,msgpack::v2::object,std::less<std::string >,std::allocator<std::pair<const std::string, msgpack::v2::object> >>::*)(const std::string &)) &std::map<std::string, msgpack::v2::object, std::less<std::string >, std::allocator<std::pair<const std::string, msgpack::v2::object> > >::at, "C++: std::map<std::__cxx11::basic_string<char>, msgpack::v2::object, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, msgpack::v2::object> > >::at(const std::string &) --> struct msgpack::v2::object &", pybind11::return_value_policy::automatic, pybind11::arg("__k"));
		cl.def("insert", (struct std::pair<struct std::_Rb_tree_iterator<struct std::pair<const std::string, struct msgpack::v2::object> >, bool> (std::map<std::string,msgpack::v2::object,std::less<std::string >,std::allocator<std::pair<const std::string, msgpack::v2::object> >>::*)(const struct std::pair<const std::string, struct msgpack::v2::object> &)) &std::map<std::string, msgpack::v2::object, std::less<std::string >, std::allocator<std::pair<const std::string, msgpack::v2::object> > >::insert, "C++: std::map<std::__cxx11::basic_string<char>, msgpack::v2::object, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, msgpack::v2::object> > >::insert(const struct std::pair<const std::string, struct msgpack::v2::object> &) --> struct std::pair<struct std::_Rb_tree_iterator<struct std::pair<const std::string, struct msgpack::v2::object> >, bool>", pybind11::arg("__x"));
		cl.def("erase", (unsigned long (std::map<std::string,msgpack::v2::object,std::less<std::string >,std::allocator<std::pair<const std::string, msgpack::v2::object> >>::*)(const std::string &)) &std::map<std::string, msgpack::v2::object, std::less<std::string >, std::allocator<std::pair<const std::string, msgpack::v2::object> > >::erase, "C++: std::map<std::__cxx11::basic_string<char>, msgpack::v2::object, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, msgpack::v2::object> > >::erase(const std::string &) --> unsigned long", pybind11::arg("__x"));
		cl.def("swap", (void (std::map<std::string,msgpack::v2::object,std::less<std::string >,std::allocator<std::pair<const std::string, msgpack::v2::object> >>::*)(class std::map<std::string, struct msgpack::v2::object, struct std::less<std::string >, class std::allocator<struct std::pair<const std::string, struct msgpack::v2::object> > > &)) &std::map<std::string, msgpack::v2::object, std::less<std::string >, std::allocator<std::pair<const std::string, msgpack::v2::object> > >::swap, "C++: std::map<std::__cxx11::basic_string<char>, msgpack::v2::object, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, msgpack::v2::object> > >::swap(class std::map<std::string, struct msgpack::v2::object, struct std::less<std::string >, class std::allocator<struct std::pair<const std::string, struct msgpack::v2::object> > > &) --> void", pybind11::arg("__x"));
		cl.def("clear", (void (std::map<std::string,msgpack::v2::object,std::less<std::string >,std::allocator<std::pair<const std::string, msgpack::v2::object> >>::*)()) &std::map<std::string, msgpack::v2::object, std::less<std::string >, std::allocator<std::pair<const std::string, msgpack::v2::object> > >::clear, "C++: std::map<std::__cxx11::basic_string<char>, msgpack::v2::object, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, msgpack::v2::object> > >::clear() --> void");
		cl.def("key_comp", (struct std::less<std::string > (std::map<std::string,msgpack::v2::object,std::less<std::string >,std::allocator<std::pair<const std::string, msgpack::v2::object> >>::*)() const) &std::map<std::string, msgpack::v2::object, std::less<std::string >, std::allocator<std::pair<const std::string, msgpack::v2::object> > >::key_comp, "C++: std::map<std::__cxx11::basic_string<char>, msgpack::v2::object, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, msgpack::v2::object> > >::key_comp() const --> struct std::less<std::string >");
		cl.def("count", (unsigned long (std::map<std::string,msgpack::v2::object,std::less<std::string >,std::allocator<std::pair<const std::string, msgpack::v2::object> >>::*)(const std::string &) const) &std::map<std::string, msgpack::v2::object, std::less<std::string >, std::allocator<std::pair<const std::string, msgpack::v2::object> > >::count, "C++: std::map<std::__cxx11::basic_string<char>, msgpack::v2::object, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, msgpack::v2::object> > >::count(const std::string &) const --> unsigned long", pybind11::arg("__x"));
		cl.def("equal_range", (struct std::pair<struct std::_Rb_tree_iterator<struct std::pair<const std::string, struct msgpack::v2::object> >, struct std::_Rb_tree_iterator<struct std::pair<const std::string, struct msgpack::v2::object> > > (std::map<std::string,msgpack::v2::object,std::less<std::string >,std::allocator<std::pair<const std::string, msgpack::v2::object> >>::*)(const std::string &)) &std::map<std::string, msgpack::v2::object, std::less<std::string >, std::allocator<std::pair<const std::string, msgpack::v2::object> > >::equal_range, "C++: std::map<std::__cxx11::basic_string<char>, msgpack::v2::object, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, msgpack::v2::object> > >::equal_range(const std::string &) --> struct std::pair<struct std::_Rb_tree_iterator<struct std::pair<const std::string, struct msgpack::v2::object> >, struct std::_Rb_tree_iterator<struct std::pair<const std::string, struct msgpack::v2::object> > >", pybind11::arg("__x"));
	}
	std::cout << "B196_[std::map<std::string,msgpack::v2::object *,std::less<std::string >,std::allocator<std::pair<const std::string, msgpack::v2::object *> >>] ";
}
